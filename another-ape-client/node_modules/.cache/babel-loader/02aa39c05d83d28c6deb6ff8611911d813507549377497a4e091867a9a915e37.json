{"ast":null,"code":"import { createFetchFn } from '@stacks/network';\nimport { parseZoneFile } from 'zone-file';\nimport { getTokenFileUrl, Person } from '../profile';\nimport { extractProfile } from '../profileTokens';\nexport function resolveZoneFileToPerson(zoneFile, publicKeyOrAddress, callback, fetchFn = createFetchFn()) {\n  let zoneFileJson = null;\n  try {\n    zoneFileJson = parseZoneFile(zoneFile);\n    if (!zoneFileJson.hasOwnProperty('$origin')) {\n      zoneFileJson = null;\n      throw new Error('zone file is missing an origin');\n    }\n  } catch (e) {\n    console.error(e);\n  }\n  let tokenFileUrl = null;\n  if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n    tokenFileUrl = getTokenFileUrl(zoneFileJson);\n  } else {\n    let profile = null;\n    try {\n      profile = JSON.parse(zoneFile);\n      const person = Person.fromLegacyFormat(profile);\n      profile = person.profile();\n    } catch (error) {\n      console.warn(error);\n    }\n    callback(profile);\n    return;\n  }\n  if (tokenFileUrl) {\n    fetchFn(tokenFileUrl).then(response => response.text()).then(responseText => JSON.parse(responseText)).then(responseJson => {\n      const tokenRecords = responseJson;\n      const token = tokenRecords[0].token;\n      const profile = extractProfile(token, publicKeyOrAddress);\n      callback(profile);\n    }).catch(error => {\n      console.warn(error);\n    });\n  } else {\n    console.warn('Token file url not found');\n    callback({});\n  }\n}","map":{"version":3,"names":["createFetchFn","parseZoneFile","getTokenFileUrl","Person","extractProfile","resolveZoneFileToPerson","zoneFile","publicKeyOrAddress","callback","fetchFn","zoneFileJson","hasOwnProperty","Error","e","console","error","tokenFileUrl","Object","keys","length","profile","JSON","parse","person","fromLegacyFormat","warn","then","response","text","responseText","responseJson","tokenRecords","token","catch"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/profile/src/profileSchemas/personZoneFiles.ts"],"sourcesContent":["// @ts-ignore: Could not find a declaration file for module\nimport { createFetchFn, FetchFn } from '@stacks/network';\nimport { parseZoneFile } from 'zone-file';\n\nimport { getTokenFileUrl, Person } from '../profile';\nimport { extractProfile } from '../profileTokens';\n\n/**\n *\n * @param zoneFile\n * @param publicKeyOrAddress\n * @param callback\n *\n * @ignore\n */\nexport function resolveZoneFileToPerson(\n  zoneFile: any,\n  publicKeyOrAddress: string,\n  callback: (profile: any) => void,\n  fetchFn: FetchFn = createFetchFn()\n) {\n  let zoneFileJson = null;\n  try {\n    zoneFileJson = parseZoneFile(zoneFile);\n    if (!zoneFileJson.hasOwnProperty('$origin')) {\n      zoneFileJson = null;\n      throw new Error('zone file is missing an origin');\n    }\n  } catch (e) {\n    console.error(e);\n  }\n\n  let tokenFileUrl = null;\n  if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n    tokenFileUrl = getTokenFileUrl(zoneFileJson);\n  } else {\n    let profile = null;\n    try {\n      profile = JSON.parse(zoneFile);\n      const person = Person.fromLegacyFormat(profile);\n      profile = person.profile();\n    } catch (error) {\n      console.warn(error);\n    }\n    callback(profile);\n    return;\n  }\n\n  if (tokenFileUrl) {\n    fetchFn(tokenFileUrl)\n      .then(response => response.text())\n      .then(responseText => JSON.parse(responseText))\n      .then(responseJson => {\n        const tokenRecords = responseJson;\n        const token = tokenRecords[0].token;\n        const profile = extractProfile(token, publicKeyOrAddress);\n\n        callback(profile);\n      })\n      .catch(error => {\n        console.warn(error);\n      });\n  } else {\n    console.warn('Token file url not found');\n    callback({});\n  }\n}\n"],"mappings":"AACA,SAASA,aAAa,QAAiB,iBAAiB;AACxD,SAASC,aAAa,QAAQ,WAAW;AAEzC,SAASC,eAAe,EAAEC,MAAM,QAAQ,YAAY;AACpD,SAASC,cAAc,QAAQ,kBAAkB;AAUjD,OAAM,SAAUC,uBAAuBA,CACrCC,QAAa,EACbC,kBAA0B,EAC1BC,QAAgC,EAChCC,OAAA,GAAmBT,aAAa,EAAE;EAElC,IAAIU,YAAY,GAAG,IAAI;EACvB,IAAI;IACFA,YAAY,GAAGT,aAAa,CAACK,QAAQ,CAAC;IACtC,IAAI,CAACI,YAAY,CAACC,cAAc,CAAC,SAAS,CAAC,EAAE;MAC3CD,YAAY,GAAG,IAAI;MACnB,MAAM,IAAIE,KAAK,CAAC,gCAAgC,CAAC;;GAEpD,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;;EAGlB,IAAIG,YAAY,GAAG,IAAI;EACvB,IAAIN,YAAY,IAAIO,MAAM,CAACC,IAAI,CAACR,YAAY,CAAC,CAACS,MAAM,GAAG,CAAC,EAAE;IACxDH,YAAY,GAAGd,eAAe,CAACQ,YAAY,CAAC;GAC7C,MAAM;IACL,IAAIU,OAAO,GAAG,IAAI;IAClB,IAAI;MACFA,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAChB,QAAQ,CAAC;MAC9B,MAAMiB,MAAM,GAAGpB,MAAM,CAACqB,gBAAgB,CAACJ,OAAO,CAAC;MAC/CA,OAAO,GAAGG,MAAM,CAACH,OAAO,EAAE;KAC3B,CAAC,OAAOL,KAAK,EAAE;MACdD,OAAO,CAACW,IAAI,CAACV,KAAK,CAAC;;IAErBP,QAAQ,CAACY,OAAO,CAAC;IACjB;;EAGF,IAAIJ,YAAY,EAAE;IAChBP,OAAO,CAACO,YAAY,CAAC,CAClBU,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,YAAY,IAAIR,IAAI,CAACC,KAAK,CAACO,YAAY,CAAC,CAAC,CAC9CH,IAAI,CAACI,YAAY,IAAG;MACnB,MAAMC,YAAY,GAAGD,YAAY;MACjC,MAAME,KAAK,GAAGD,YAAY,CAAC,CAAC,CAAC,CAACC,KAAK;MACnC,MAAMZ,OAAO,GAAGhB,cAAc,CAAC4B,KAAK,EAAEzB,kBAAkB,CAAC;MAEzDC,QAAQ,CAACY,OAAO,CAAC;IACnB,CAAC,CAAC,CACDa,KAAK,CAAClB,KAAK,IAAG;MACbD,OAAO,CAACW,IAAI,CAACV,KAAK,CAAC;IACrB,CAAC,CAAC;GACL,MAAM;IACLD,OAAO,CAACW,IAAI,CAAC,0BAA0B,CAAC;IACxCjB,QAAQ,CAAC,EAAE,CAAC;;AAEhB"},"metadata":{},"sourceType":"module","externalDependencies":[]}