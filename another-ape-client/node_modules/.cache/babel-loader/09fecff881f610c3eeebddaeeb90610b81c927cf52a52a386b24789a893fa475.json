{"ast":null,"code":"var AWS = require('../core');\nrequire('../metadata_service');\n\n/**\n * Represents credentials received from the metadata service on an EC2 instance.\n *\n * By default, this class will connect to the metadata service using\n * {AWS.MetadataService} and attempt to load any available credentials. If it\n * can connect, and credentials are available, these will be used with zero\n * configuration.\n *\n * This credentials class will by default timeout after 1 second of inactivity\n * and retry 3 times.\n * If your requests to the EC2 metadata service are timing out, you can increase\n * these values by configuring them directly:\n *\n * ```javascript\n * AWS.config.credentials = new AWS.EC2MetadataCredentials({\n *   httpOptions: { timeout: 5000 }, // 5 second timeout\n *   maxRetries: 10, // retry 10 times\n *   retryDelayOptions: { base: 200 }, // see AWS.Config for information\n *   logger: console // see AWS.Config for information\n *   ec2MetadataV1Disabled: false // whether to block IMDS v1 fallback.\n * });\n * ```\n *\n * If your requests are timing out in connecting to the metadata service, such\n * as when testing on a development machine, you can use the connectTimeout\n * option, specified in milliseconds, which also defaults to 1 second.\n *\n * If the requests failed or returns expired credentials, it will\n * extend the expiration of current credential, with a warning message. For more\n * information, please go to:\n * https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\n *\n * @!attribute originalExpiration\n *   @return [Date] The optional original expiration of the current credential.\n *   In case of AWS outage, the EC2 metadata will extend expiration of the\n *   existing credential.\n *\n * @see AWS.Config.retryDelayOptions\n * @see AWS.Config.logger\n *\n * @!macro nobrowser\n */\nAWS.EC2MetadataCredentials = AWS.util.inherit(AWS.Credentials, {\n  constructor: function EC2MetadataCredentials(options) {\n    AWS.Credentials.call(this);\n    options = options ? AWS.util.copy(options) : {};\n    options = AWS.util.merge({\n      maxRetries: this.defaultMaxRetries\n    }, options);\n    if (!options.httpOptions) options.httpOptions = {};\n    options.httpOptions = AWS.util.merge({\n      timeout: this.defaultTimeout,\n      connectTimeout: this.defaultConnectTimeout\n    }, options.httpOptions);\n    this.metadataService = new AWS.MetadataService(options);\n    this.logger = options.logger || AWS.config && AWS.config.logger;\n  },\n  /**\n   * @api private\n   */\n  defaultTimeout: 1000,\n  /**\n  * @api private\n  */\n  defaultConnectTimeout: 1000,\n  /**\n   * @api private\n   */\n  defaultMaxRetries: 3,\n  /**\n   * The original expiration of the current credential. In case of AWS\n   * outage, the EC2 metadata will extend expiration of the existing\n   * credential.\n   */\n  originalExpiration: undefined,\n  /**\n   * Loads the credentials from the instance metadata service\n   *\n   * @callback callback function(err)\n   *   Called when the instance metadata service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n  /**\n   * @api private\n   * @param callback\n   */\n  load: function load(callback) {\n    var self = this;\n    self.metadataService.loadCredentials(function (err, creds) {\n      if (err) {\n        if (self.hasLoadedCredentials()) {\n          self.extendExpirationIfExpired();\n          callback();\n        } else {\n          callback(err);\n        }\n      } else {\n        self.setCredentials(creds);\n        self.extendExpirationIfExpired();\n        callback();\n      }\n    });\n  },\n  /**\n   * Whether this credential has been loaded.\n   * @api private\n   */\n  hasLoadedCredentials: function hasLoadedCredentials() {\n    return this.AccessKeyId && this.secretAccessKey;\n  },\n  /**\n   * if expired, extend the expiration by 15 minutes base plus a jitter of 5\n   * minutes range.\n   * @api private\n   */\n  extendExpirationIfExpired: function extendExpirationIfExpired() {\n    if (this.needsRefresh()) {\n      this.originalExpiration = this.originalExpiration || this.expireTime;\n      this.expired = false;\n      var nextTimeout = 15 * 60 + Math.floor(Math.random() * 5 * 60);\n      var currentTime = AWS.util.date.getDate().getTime();\n      this.expireTime = new Date(currentTime + nextTimeout * 1000);\n      // TODO: add doc link;\n      this.logger.warn('Attempting credential expiration extension due to a ' + 'credential service availability issue. A refresh of these ' + 'credentials will be attempted again at ' + this.expireTime + '\\nFor more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html');\n    }\n  },\n  /**\n   * Update the credential with new credential responded from EC2 metadata\n   * service.\n   * @api private\n   */\n  setCredentials: function setCredentials(creds) {\n    var currentTime = AWS.util.date.getDate().getTime();\n    var expireTime = new Date(creds.Expiration);\n    this.expired = currentTime >= expireTime ? true : false;\n    this.metadata = creds;\n    this.accessKeyId = creds.AccessKeyId;\n    this.secretAccessKey = creds.SecretAccessKey;\n    this.sessionToken = creds.Token;\n    this.expireTime = expireTime;\n  }\n});","map":{"version":3,"names":["AWS","require","EC2MetadataCredentials","util","inherit","Credentials","constructor","options","call","copy","merge","maxRetries","defaultMaxRetries","httpOptions","timeout","defaultTimeout","connectTimeout","defaultConnectTimeout","metadataService","MetadataService","logger","config","originalExpiration","undefined","refresh","callback","coalesceRefresh","fn","load","self","loadCredentials","err","creds","hasLoadedCredentials","extendExpirationIfExpired","setCredentials","AccessKeyId","secretAccessKey","needsRefresh","expireTime","expired","nextTimeout","Math","floor","random","currentTime","date","getDate","getTime","Date","warn","Expiration","metadata","accessKeyId","SecretAccessKey","sessionToken","Token"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/credentials/ec2_metadata_credentials.js"],"sourcesContent":["var AWS = require('../core');\nrequire('../metadata_service');\n\n/**\n * Represents credentials received from the metadata service on an EC2 instance.\n *\n * By default, this class will connect to the metadata service using\n * {AWS.MetadataService} and attempt to load any available credentials. If it\n * can connect, and credentials are available, these will be used with zero\n * configuration.\n *\n * This credentials class will by default timeout after 1 second of inactivity\n * and retry 3 times.\n * If your requests to the EC2 metadata service are timing out, you can increase\n * these values by configuring them directly:\n *\n * ```javascript\n * AWS.config.credentials = new AWS.EC2MetadataCredentials({\n *   httpOptions: { timeout: 5000 }, // 5 second timeout\n *   maxRetries: 10, // retry 10 times\n *   retryDelayOptions: { base: 200 }, // see AWS.Config for information\n *   logger: console // see AWS.Config for information\n *   ec2MetadataV1Disabled: false // whether to block IMDS v1 fallback.\n * });\n * ```\n *\n * If your requests are timing out in connecting to the metadata service, such\n * as when testing on a development machine, you can use the connectTimeout\n * option, specified in milliseconds, which also defaults to 1 second.\n *\n * If the requests failed or returns expired credentials, it will\n * extend the expiration of current credential, with a warning message. For more\n * information, please go to:\n * https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\n *\n * @!attribute originalExpiration\n *   @return [Date] The optional original expiration of the current credential.\n *   In case of AWS outage, the EC2 metadata will extend expiration of the\n *   existing credential.\n *\n * @see AWS.Config.retryDelayOptions\n * @see AWS.Config.logger\n *\n * @!macro nobrowser\n */\nAWS.EC2MetadataCredentials = AWS.util.inherit(AWS.Credentials, {\n  constructor: function EC2MetadataCredentials(options) {\n    AWS.Credentials.call(this);\n\n    options = options ? AWS.util.copy(options) : {};\n    options = AWS.util.merge(\n      {maxRetries: this.defaultMaxRetries}, options);\n    if (!options.httpOptions) options.httpOptions = {};\n    options.httpOptions = AWS.util.merge(\n      {timeout: this.defaultTimeout,\n        connectTimeout: this.defaultConnectTimeout},\n       options.httpOptions);\n\n    this.metadataService = new AWS.MetadataService(options);\n    this.logger = options.logger || AWS.config && AWS.config.logger;\n  },\n\n  /**\n   * @api private\n   */\n  defaultTimeout: 1000,\n\n   /**\n   * @api private\n   */\n  defaultConnectTimeout: 1000,\n\n  /**\n   * @api private\n   */\n  defaultMaxRetries: 3,\n\n  /**\n   * The original expiration of the current credential. In case of AWS\n   * outage, the EC2 metadata will extend expiration of the existing\n   * credential.\n   */\n  originalExpiration: undefined,\n\n  /**\n   * Loads the credentials from the instance metadata service\n   *\n   * @callback callback function(err)\n   *   Called when the instance metadata service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n\n  /**\n   * @api private\n   * @param callback\n   */\n  load: function load(callback) {\n    var self = this;\n    self.metadataService.loadCredentials(function(err, creds) {\n      if (err) {\n        if (self.hasLoadedCredentials()) {\n          self.extendExpirationIfExpired();\n          callback();\n        } else {\n          callback(err);\n        }\n      } else {\n        self.setCredentials(creds);\n        self.extendExpirationIfExpired();\n        callback();\n      }\n    });\n  },\n\n  /**\n   * Whether this credential has been loaded.\n   * @api private\n   */\n  hasLoadedCredentials: function hasLoadedCredentials() {\n    return this.AccessKeyId && this.secretAccessKey;\n  },\n\n  /**\n   * if expired, extend the expiration by 15 minutes base plus a jitter of 5\n   * minutes range.\n   * @api private\n   */\n  extendExpirationIfExpired: function extendExpirationIfExpired() {\n    if (this.needsRefresh()) {\n      this.originalExpiration = this.originalExpiration || this.expireTime;\n      this.expired = false;\n      var nextTimeout = 15 * 60 + Math.floor(Math.random() * 5 * 60);\n      var currentTime = AWS.util.date.getDate().getTime();\n      this.expireTime = new Date(currentTime + nextTimeout * 1000);\n      // TODO: add doc link;\n      this.logger.warn('Attempting credential expiration extension due to a '\n          + 'credential service availability issue. A refresh of these '\n          + 'credentials will be attempted again at ' + this.expireTime\n          + '\\nFor more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html');\n    }\n  },\n\n  /**\n   * Update the credential with new credential responded from EC2 metadata\n   * service.\n   * @api private\n   */\n  setCredentials: function setCredentials(creds) {\n    var currentTime = AWS.util.date.getDate().getTime();\n    var expireTime = new Date(creds.Expiration);\n    this.expired = currentTime >= expireTime ? true : false;\n    this.metadata = creds;\n    this.accessKeyId = creds.AccessKeyId;\n    this.secretAccessKey = creds.SecretAccessKey;\n    this.sessionToken = creds.Token;\n    this.expireTime = expireTime;\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}