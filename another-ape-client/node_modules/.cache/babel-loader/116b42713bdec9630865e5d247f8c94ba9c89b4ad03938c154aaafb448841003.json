{"ast":null,"code":"import { signProfileToken, extractProfile } from './profileTokens';\nimport { getPersonFromLegacyFormat } from './profileSchemas';\nimport { getName, getFamilyName, getGivenName, getAvatarUrl, getDescription, getVerifiedAccounts, getAddress, getBirthDate, getConnections, getOrganizations } from './profileSchemas/personUtils';\nimport { makeZoneFile, parseZoneFile } from 'zone-file';\nimport * as inspector from 'schema-inspector';\nimport { Logger } from '@stacks/common';\nimport { createFetchFn } from '@stacks/network';\nconst schemaDefinition = {\n  type: 'object',\n  properties: {\n    '@context': {\n      type: 'string',\n      optional: true\n    },\n    '@type': {\n      type: 'string'\n    }\n  }\n};\nexport class Profile {\n  constructor(profile = {}) {\n    this._profile = Object.assign({}, {\n      '@context': 'http://schema.org/'\n    }, profile);\n  }\n  toJSON() {\n    return Object.assign({}, this._profile);\n  }\n  toToken(privateKey) {\n    return signProfileToken(this.toJSON(), privateKey);\n  }\n  static validateSchema(profile, strict = false) {\n    schemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n  static fromToken(token, publicKeyOrAddress = null) {\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Profile(profile);\n  }\n  static makeZoneFile(domainName, tokenFileURL) {\n    return makeProfileZoneFile(domainName, tokenFileURL);\n  }\n}\nconst personSchemaDefinition = {\n  type: 'object',\n  strict: false,\n  properties: {\n    '@context': {\n      type: 'string',\n      optional: true\n    },\n    '@type': {\n      type: 'string'\n    },\n    '@id': {\n      type: 'string',\n      optional: true\n    },\n    name: {\n      type: 'string',\n      optional: true\n    },\n    givenName: {\n      type: 'string',\n      optional: true\n    },\n    familyName: {\n      type: 'string',\n      optional: true\n    },\n    description: {\n      type: 'string',\n      optional: true\n    },\n    image: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          name: {\n            type: 'string',\n            optional: true\n          },\n          contentUrl: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    website: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          url: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    account: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          service: {\n            type: 'string',\n            optional: true\n          },\n          identifier: {\n            type: 'string',\n            optional: true\n          },\n          proofType: {\n            type: 'string',\n            optional: true\n          },\n          proofUrl: {\n            type: 'string',\n            optional: true\n          },\n          proofMessage: {\n            type: 'string',\n            optional: true\n          },\n          proofSignature: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    worksFor: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    knows: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    address: {\n      type: 'object',\n      optional: true,\n      properties: {\n        '@type': {\n          type: 'string'\n        },\n        streetAddress: {\n          type: 'string',\n          optional: true\n        },\n        addressLocality: {\n          type: 'string',\n          optional: true\n        },\n        postalCode: {\n          type: 'string',\n          optional: true\n        },\n        addressCountry: {\n          type: 'string',\n          optional: true\n        }\n      }\n    },\n    birthDate: {\n      type: 'string',\n      optional: true\n    },\n    taxID: {\n      type: 'string',\n      optional: true\n    }\n  }\n};\nexport class Person extends Profile {\n  constructor(profile = {\n    '@type': 'Person'\n  }) {\n    super(profile);\n    this._profile = Object.assign({}, {\n      '@type': 'Person'\n    }, this._profile);\n  }\n  static validateSchema(profile, strict = false) {\n    personSchemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n  static fromToken(token, publicKeyOrAddress = null) {\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Person(profile);\n  }\n  static fromLegacyFormat(legacyProfile) {\n    const profile = getPersonFromLegacyFormat(legacyProfile);\n    return new Person(profile);\n  }\n  toJSON() {\n    return {\n      profile: this.profile(),\n      name: this.name(),\n      givenName: this.givenName(),\n      familyName: this.familyName(),\n      description: this.description(),\n      avatarUrl: this.avatarUrl(),\n      verifiedAccounts: this.verifiedAccounts(),\n      address: this.address(),\n      birthDate: this.birthDate(),\n      connections: this.connections(),\n      organizations: this.organizations()\n    };\n  }\n  profile() {\n    return Object.assign({}, this._profile);\n  }\n  name() {\n    return getName(this.profile());\n  }\n  givenName() {\n    return getGivenName(this.profile());\n  }\n  familyName() {\n    return getFamilyName(this.profile());\n  }\n  description() {\n    return getDescription(this.profile());\n  }\n  avatarUrl() {\n    return getAvatarUrl(this.profile());\n  }\n  verifiedAccounts(verifications) {\n    return getVerifiedAccounts(this.profile(), verifications);\n  }\n  address() {\n    return getAddress(this.profile());\n  }\n  birthDate() {\n    return getBirthDate(this.profile());\n  }\n  connections() {\n    return getConnections(this.profile());\n  }\n  organizations() {\n    return getOrganizations(this.profile());\n  }\n}\nexport function makeProfileZoneFile(origin, tokenFileUrl) {\n  if (!tokenFileUrl.includes('://')) {\n    throw new Error('Invalid token file url');\n  }\n  const urlScheme = tokenFileUrl.split('://')[0];\n  const urlParts = tokenFileUrl.split('://')[1].split('/');\n  const domain = urlParts[0];\n  const pathname = `/${urlParts.slice(1).join('/')}`;\n  const zoneFile = {\n    $origin: origin,\n    $ttl: 3600,\n    uri: [{\n      name: '_http._tcp',\n      priority: 10,\n      weight: 1,\n      target: `${urlScheme}://${domain}${pathname}`\n    }]\n  };\n  const zoneFileTemplate = '{$origin}\\n{$ttl}\\n{uri}\\n';\n  return makeZoneFile(zoneFile, zoneFileTemplate);\n}\nexport function getTokenFileUrl(zoneFileJson) {\n  if (!zoneFileJson.hasOwnProperty('uri')) {\n    return null;\n  }\n  if (!Array.isArray(zoneFileJson.uri)) {\n    return null;\n  }\n  if (zoneFileJson.uri.length < 1) {\n    return null;\n  }\n  const validRecords = zoneFileJson.uri.filter(record => record.hasOwnProperty('target') && record.name === '_http._tcp');\n  if (validRecords.length < 1) {\n    return null;\n  }\n  const firstValidRecord = validRecords[0];\n  if (!firstValidRecord.hasOwnProperty('target')) {\n    return null;\n  }\n  let tokenFileUrl = firstValidRecord.target;\n  if (tokenFileUrl.startsWith('https')) {} else if (tokenFileUrl.startsWith('http')) {} else {\n    tokenFileUrl = `https://${tokenFileUrl}`;\n  }\n  return tokenFileUrl;\n}\nexport function resolveZoneFileToProfile(zoneFile, publicKeyOrAddress, fetchFn = createFetchFn()) {\n  return new Promise((resolve, reject) => {\n    let zoneFileJson = null;\n    try {\n      zoneFileJson = parseZoneFile(zoneFile);\n      if (!zoneFileJson.hasOwnProperty('$origin')) {\n        zoneFileJson = null;\n      }\n    } catch (e) {\n      reject(e);\n    }\n    let tokenFileUrl = null;\n    if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n      tokenFileUrl = getTokenFileUrl(zoneFileJson);\n    } else {\n      try {\n        return resolve(Person.fromLegacyFormat(JSON.parse(zoneFile)).profile());\n      } catch (error) {\n        return reject(error);\n      }\n    }\n    if (tokenFileUrl) {\n      fetchFn(tokenFileUrl).then(response => response.text()).then(responseText => JSON.parse(responseText)).then(responseJson => {\n        const tokenRecords = responseJson;\n        const profile = extractProfile(tokenRecords[0].token, publicKeyOrAddress);\n        resolve(profile);\n      }).catch(error => {\n        Logger.error(`resolveZoneFileToProfile: error fetching token file ${tokenFileUrl}: ${error}`);\n        reject(error);\n      });\n    } else {\n      Logger.debug('Token file url not found. Resolving to blank profile.');\n      resolve({});\n    }\n  });\n}","map":{"version":3,"names":["signProfileToken","extractProfile","getPersonFromLegacyFormat","getName","getFamilyName","getGivenName","getAvatarUrl","getDescription","getVerifiedAccounts","getAddress","getBirthDate","getConnections","getOrganizations","makeZoneFile","parseZoneFile","inspector","Logger","createFetchFn","schemaDefinition","type","properties","optional","Profile","constructor","profile","_profile","Object","assign","toJSON","toToken","privateKey","validateSchema","strict","validate","fromToken","token","publicKeyOrAddress","domainName","tokenFileURL","makeProfileZoneFile","personSchemaDefinition","name","givenName","familyName","description","image","items","contentUrl","website","url","account","service","identifier","proofType","proofUrl","proofMessage","proofSignature","worksFor","knows","address","streetAddress","addressLocality","postalCode","addressCountry","birthDate","taxID","Person","fromLegacyFormat","legacyProfile","avatarUrl","verifiedAccounts","connections","organizations","verifications","origin","tokenFileUrl","includes","Error","urlScheme","split","urlParts","domain","pathname","slice","join","zoneFile","$origin","$ttl","uri","priority","weight","target","zoneFileTemplate","getTokenFileUrl","zoneFileJson","hasOwnProperty","Array","isArray","length","validRecords","filter","record","firstValidRecord","startsWith","resolveZoneFileToProfile","fetchFn","Promise","resolve","reject","e","keys","JSON","parse","error","then","response","text","responseText","responseJson","tokenRecords","catch","debug"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/profile/src/profile.ts"],"sourcesContent":["import { signProfileToken, extractProfile } from './profileTokens';\n\nimport { getPersonFromLegacyFormat } from './profileSchemas';\nimport {\n  getName,\n  getFamilyName,\n  getGivenName,\n  getAvatarUrl,\n  getDescription,\n  getVerifiedAccounts,\n  getAddress,\n  getBirthDate,\n  getConnections,\n  getOrganizations,\n} from './profileSchemas/personUtils';\n\n// TODO: bring into this monorepo/convert to ts\n// @ts-ignore\nimport { makeZoneFile, parseZoneFile } from 'zone-file';\n\n// Could not find a declaration file for module\n// @ts-ignore\nimport * as inspector from 'schema-inspector';\n\nimport { Logger } from '@stacks/common';\nimport { createFetchFn, FetchFn } from '@stacks/network';\nimport { PublicPersonProfile } from './types';\n\nconst schemaDefinition: { [key: string]: any } = {\n  type: 'object',\n  properties: {\n    '@context': { type: 'string', optional: true },\n    '@type': { type: 'string' },\n  },\n};\n\n/**\n * Represents a user profile\n */\nexport class Profile {\n  _profile: { [key: string]: any };\n\n  constructor(profile = {}) {\n    this._profile = Object.assign(\n      {},\n      {\n        '@context': 'http://schema.org/',\n      },\n      profile\n    );\n  }\n\n  toJSON() {\n    return Object.assign({}, this._profile);\n  }\n\n  toToken(privateKey: string): string {\n    return signProfileToken(this.toJSON(), privateKey);\n  }\n\n  static validateSchema(profile: any, strict = false): any {\n    schemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token: string, publicKeyOrAddress: string | null = null): Profile {\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Profile(profile);\n  }\n\n  static makeZoneFile(domainName: string, tokenFileURL: string): string {\n    return makeProfileZoneFile(domainName, tokenFileURL);\n  }\n}\n\nconst personSchemaDefinition = {\n  type: 'object',\n  strict: false,\n  properties: {\n    '@context': { type: 'string', optional: true },\n    '@type': { type: 'string' },\n    '@id': { type: 'string', optional: true },\n    name: { type: 'string', optional: true },\n    givenName: { type: 'string', optional: true },\n    familyName: { type: 'string', optional: true },\n    description: { type: 'string', optional: true },\n    image: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          name: { type: 'string', optional: true },\n          contentUrl: { type: 'string', optional: true },\n        },\n      },\n    },\n    website: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          url: { type: 'string', optional: true },\n        },\n      },\n    },\n    account: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          service: { type: 'string', optional: true },\n          identifier: { type: 'string', optional: true },\n          proofType: { type: 'string', optional: true },\n          proofUrl: { type: 'string', optional: true },\n          proofMessage: { type: 'string', optional: true },\n          proofSignature: { type: 'string', optional: true },\n        },\n      },\n    },\n    worksFor: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          '@id': { type: 'string', optional: true },\n        },\n      },\n    },\n    knows: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          '@id': { type: 'string', optional: true },\n        },\n      },\n    },\n    address: {\n      type: 'object',\n      optional: true,\n      properties: {\n        '@type': { type: 'string' },\n        streetAddress: { type: 'string', optional: true },\n        addressLocality: { type: 'string', optional: true },\n        postalCode: { type: 'string', optional: true },\n        addressCountry: { type: 'string', optional: true },\n      },\n    },\n    birthDate: { type: 'string', optional: true },\n    taxID: { type: 'string', optional: true },\n  },\n};\n\n/**\n * @ignore\n */\nexport class Person extends Profile {\n  constructor(profile: PublicPersonProfile = { '@type': 'Person' }) {\n    super(profile);\n    this._profile = Object.assign(\n      {},\n      {\n        '@type': 'Person',\n      },\n      this._profile\n    );\n  }\n\n  static validateSchema(profile: any, strict = false) {\n    personSchemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token: string, publicKeyOrAddress: string | null = null): Person {\n    const profile = extractProfile(token, publicKeyOrAddress) as PublicPersonProfile;\n    return new Person(profile);\n  }\n\n  static fromLegacyFormat(legacyProfile: any) {\n    const profile = getPersonFromLegacyFormat(legacyProfile);\n    return new Person(profile);\n  }\n\n  toJSON() {\n    return {\n      profile: this.profile(),\n      name: this.name(),\n      givenName: this.givenName(),\n      familyName: this.familyName(),\n      description: this.description(),\n      avatarUrl: this.avatarUrl(),\n      verifiedAccounts: this.verifiedAccounts(),\n      address: this.address(),\n      birthDate: this.birthDate(),\n      connections: this.connections(),\n      organizations: this.organizations(),\n    };\n  }\n\n  profile() {\n    return Object.assign({}, this._profile);\n  }\n\n  name() {\n    return getName(this.profile());\n  }\n\n  givenName() {\n    return getGivenName(this.profile());\n  }\n\n  familyName() {\n    return getFamilyName(this.profile());\n  }\n\n  description() {\n    return getDescription(this.profile());\n  }\n\n  avatarUrl() {\n    return getAvatarUrl(this.profile());\n  }\n\n  verifiedAccounts(verifications?: any[]) {\n    return getVerifiedAccounts(this.profile(), verifications);\n  }\n\n  address() {\n    return getAddress(this.profile());\n  }\n\n  birthDate() {\n    return getBirthDate(this.profile());\n  }\n\n  connections() {\n    return getConnections(this.profile());\n  }\n\n  organizations() {\n    return getOrganizations(this.profile());\n  }\n}\n\n/**\n *\n * @param origin\n * @param tokenFileUrl\n *\n * @ignore\n */\nexport function makeProfileZoneFile(origin: string, tokenFileUrl: string): string {\n  if (!tokenFileUrl.includes('://')) {\n    throw new Error('Invalid token file url');\n  }\n\n  const urlScheme = tokenFileUrl.split('://')[0];\n  const urlParts = tokenFileUrl.split('://')[1].split('/');\n  const domain = urlParts[0];\n  const pathname = `/${urlParts.slice(1).join('/')}`;\n\n  const zoneFile = {\n    $origin: origin,\n    $ttl: 3600,\n    uri: [\n      {\n        name: '_http._tcp',\n        priority: 10,\n        weight: 1,\n        target: `${urlScheme}://${domain}${pathname}`,\n      },\n    ],\n  };\n\n  const zoneFileTemplate = '{$origin}\\n{$ttl}\\n{uri}\\n';\n\n  return makeZoneFile(zoneFile, zoneFileTemplate);\n}\n\n/**\n *\n * @param zoneFileJson\n *\n * @ignore\n */\nexport function getTokenFileUrl(zoneFileJson: any): string | null {\n  if (!zoneFileJson.hasOwnProperty('uri')) {\n    return null;\n  }\n  if (!Array.isArray(zoneFileJson.uri)) {\n    return null;\n  }\n  if (zoneFileJson.uri.length < 1) {\n    return null;\n  }\n\n  const validRecords = zoneFileJson.uri.filter(\n    (record: any) => record.hasOwnProperty('target') && record.name === '_http._tcp'\n  );\n\n  if (validRecords.length < 1) {\n    return null;\n  }\n\n  const firstValidRecord = validRecords[0];\n\n  if (!firstValidRecord.hasOwnProperty('target')) {\n    return null;\n  }\n  let tokenFileUrl = firstValidRecord.target;\n\n  if (tokenFileUrl.startsWith('https')) {\n    // pass\n  } else if (tokenFileUrl.startsWith('http')) {\n    // pass\n  } else {\n    tokenFileUrl = `https://${tokenFileUrl}`;\n  }\n\n  return tokenFileUrl;\n}\n\n/**\n *\n * @param zoneFile\n * @param publicKeyOrAddress\n *\n * @ignore\n */\nexport function resolveZoneFileToProfile(\n  zoneFile: any,\n  publicKeyOrAddress: string,\n  fetchFn: FetchFn = createFetchFn()\n): Promise<Record<string, any>> {\n  return new Promise((resolve, reject) => {\n    let zoneFileJson = null;\n    try {\n      zoneFileJson = parseZoneFile(zoneFile);\n      if (!zoneFileJson.hasOwnProperty('$origin')) {\n        zoneFileJson = null;\n      }\n    } catch (e) {\n      reject(e);\n    }\n\n    let tokenFileUrl: string | null = null;\n    if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n      tokenFileUrl = getTokenFileUrl(zoneFileJson);\n    } else {\n      try {\n        return resolve(Person.fromLegacyFormat(JSON.parse(zoneFile)).profile());\n      } catch (error) {\n        return reject(error);\n      }\n    }\n\n    if (tokenFileUrl) {\n      fetchFn(tokenFileUrl)\n        .then(response => response.text())\n        .then(responseText => JSON.parse(responseText))\n        .then(responseJson => {\n          const tokenRecords = responseJson;\n          const profile = extractProfile(tokenRecords[0].token, publicKeyOrAddress);\n          resolve(profile);\n        })\n        .catch(error => {\n          Logger.error(\n            `resolveZoneFileToProfile: error fetching token file ${tokenFileUrl}: ${error}`\n          );\n          reject(error);\n        });\n    } else {\n      Logger.debug('Token file url not found. Resolving to blank profile.');\n      resolve({});\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}