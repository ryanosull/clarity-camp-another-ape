{"ast":null,"code":"var AWS = require('../core');\nAWS.util.update(AWS.Glacier.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    if (Array.isArray(request._events.validate)) {\n      request._events.validate.unshift(this.validateAccountId);\n    } else {\n      request.on('validate', this.validateAccountId);\n    }\n    request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    request.on('build', this.addGlacierApiVersion);\n    request.on('build', this.addTreeHashHeaders);\n  },\n  /**\n   * @api private\n   */\n  validateAccountId: function validateAccountId(request) {\n    if (request.params.accountId !== undefined) return;\n    request.params = AWS.util.copy(request.params);\n    request.params.accountId = '-';\n  },\n  /**\n   * @api private\n   */\n  addGlacierApiVersion: function addGlacierApiVersion(request) {\n    var version = request.service.api.apiVersion;\n    request.httpRequest.headers['x-amz-glacier-version'] = version;\n  },\n  /**\n   * @api private\n   */\n  addTreeHashHeaders: function addTreeHashHeaders(request) {\n    if (request.params.body === undefined) return;\n    var hashes = request.service.computeChecksums(request.params.body);\n    request.httpRequest.headers['X-Amz-Content-Sha256'] = hashes.linearHash;\n    if (!request.httpRequest.headers['x-amz-sha256-tree-hash']) {\n      request.httpRequest.headers['x-amz-sha256-tree-hash'] = hashes.treeHash;\n    }\n  },\n  /**\n   * @!group Computing Checksums\n   */\n\n  /**\n   * Computes the SHA-256 linear and tree hash checksums for a given\n   * block of Buffer data. Pass the tree hash of the computed checksums\n   * as the checksum input to the {completeMultipartUpload} when performing\n   * a multi-part upload.\n   *\n   * @example Calculate checksum of 5.5MB data chunk\n   *   var glacier = new AWS.Glacier();\n   *   var data = Buffer.alloc(5.5 * 1024 * 1024);\n   *   data.fill('0'); // fill with zeros\n   *   var results = glacier.computeChecksums(data);\n   *   // Result: { linearHash: '68aff0c5a9...', treeHash: '154e26c78f...' }\n   * @param data [Buffer, String] data to calculate the checksum for\n   * @return [map<linearHash:String,treeHash:String>] a map containing\n   *   the linearHash and treeHash properties representing hex based digests\n   *   of the respective checksums.\n   * @see completeMultipartUpload\n   */\n  computeChecksums: function computeChecksums(data) {\n    if (!AWS.util.Buffer.isBuffer(data)) data = AWS.util.buffer.toBuffer(data);\n    var mb = 1024 * 1024;\n    var hashes = [];\n    var hash = AWS.util.crypto.createHash('sha256');\n\n    // build leaf nodes in 1mb chunks\n    for (var i = 0; i < data.length; i += mb) {\n      var chunk = data.slice(i, Math.min(i + mb, data.length));\n      hash.update(chunk);\n      hashes.push(AWS.util.crypto.sha256(chunk));\n    }\n    return {\n      linearHash: hash.digest('hex'),\n      treeHash: this.buildHashTree(hashes)\n    };\n  },\n  /**\n   * @api private\n   */\n  buildHashTree: function buildHashTree(hashes) {\n    // merge leaf nodes\n    while (hashes.length > 1) {\n      var tmpHashes = [];\n      for (var i = 0; i < hashes.length; i += 2) {\n        if (hashes[i + 1]) {\n          var tmpHash = AWS.util.buffer.alloc(64);\n          tmpHash.write(hashes[i], 0, 32, 'binary');\n          tmpHash.write(hashes[i + 1], 32, 32, 'binary');\n          tmpHashes.push(AWS.util.crypto.sha256(tmpHash));\n        } else {\n          tmpHashes.push(hashes[i]);\n        }\n      }\n      hashes = tmpHashes;\n    }\n    return AWS.util.crypto.toHex(hashes[0]);\n  }\n});","map":{"version":3,"names":["AWS","require","util","update","Glacier","prototype","setupRequestListeners","request","Array","isArray","_events","validate","unshift","validateAccountId","on","removeListener","EventListeners","Core","COMPUTE_SHA256","addGlacierApiVersion","addTreeHashHeaders","params","accountId","undefined","copy","version","service","api","apiVersion","httpRequest","headers","body","hashes","computeChecksums","linearHash","treeHash","data","Buffer","isBuffer","buffer","toBuffer","mb","hash","crypto","createHash","i","length","chunk","slice","Math","min","push","sha256","digest","buildHashTree","tmpHashes","tmpHash","alloc","write","toHex"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/services/glacier.js"],"sourcesContent":["var AWS = require('../core');\n\nAWS.util.update(AWS.Glacier.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    if (Array.isArray(request._events.validate)) {\n      request._events.validate.unshift(this.validateAccountId);\n    } else {\n      request.on('validate', this.validateAccountId);\n    }\n    request.removeListener('afterBuild',\n      AWS.EventListeners.Core.COMPUTE_SHA256);\n    request.on('build', this.addGlacierApiVersion);\n    request.on('build', this.addTreeHashHeaders);\n  },\n\n  /**\n   * @api private\n   */\n  validateAccountId: function validateAccountId(request) {\n    if (request.params.accountId !== undefined) return;\n    request.params = AWS.util.copy(request.params);\n    request.params.accountId = '-';\n  },\n\n  /**\n   * @api private\n   */\n  addGlacierApiVersion: function addGlacierApiVersion(request) {\n    var version = request.service.api.apiVersion;\n    request.httpRequest.headers['x-amz-glacier-version'] = version;\n  },\n\n  /**\n   * @api private\n   */\n  addTreeHashHeaders: function addTreeHashHeaders(request) {\n    if (request.params.body === undefined) return;\n\n    var hashes = request.service.computeChecksums(request.params.body);\n    request.httpRequest.headers['X-Amz-Content-Sha256'] = hashes.linearHash;\n\n    if (!request.httpRequest.headers['x-amz-sha256-tree-hash']) {\n      request.httpRequest.headers['x-amz-sha256-tree-hash'] = hashes.treeHash;\n    }\n  },\n\n  /**\n   * @!group Computing Checksums\n   */\n\n  /**\n   * Computes the SHA-256 linear and tree hash checksums for a given\n   * block of Buffer data. Pass the tree hash of the computed checksums\n   * as the checksum input to the {completeMultipartUpload} when performing\n   * a multi-part upload.\n   *\n   * @example Calculate checksum of 5.5MB data chunk\n   *   var glacier = new AWS.Glacier();\n   *   var data = Buffer.alloc(5.5 * 1024 * 1024);\n   *   data.fill('0'); // fill with zeros\n   *   var results = glacier.computeChecksums(data);\n   *   // Result: { linearHash: '68aff0c5a9...', treeHash: '154e26c78f...' }\n   * @param data [Buffer, String] data to calculate the checksum for\n   * @return [map<linearHash:String,treeHash:String>] a map containing\n   *   the linearHash and treeHash properties representing hex based digests\n   *   of the respective checksums.\n   * @see completeMultipartUpload\n   */\n  computeChecksums: function computeChecksums(data) {\n    if (!AWS.util.Buffer.isBuffer(data)) data = AWS.util.buffer.toBuffer(data);\n\n    var mb = 1024 * 1024;\n    var hashes = [];\n    var hash = AWS.util.crypto.createHash('sha256');\n\n    // build leaf nodes in 1mb chunks\n    for (var i = 0; i < data.length; i += mb) {\n      var chunk = data.slice(i, Math.min(i + mb, data.length));\n      hash.update(chunk);\n      hashes.push(AWS.util.crypto.sha256(chunk));\n    }\n\n    return {\n      linearHash: hash.digest('hex'),\n      treeHash: this.buildHashTree(hashes)\n    };\n  },\n\n  /**\n   * @api private\n   */\n  buildHashTree: function buildHashTree(hashes) {\n    // merge leaf nodes\n    while (hashes.length > 1) {\n      var tmpHashes = [];\n      for (var i = 0; i < hashes.length; i += 2) {\n        if (hashes[i + 1]) {\n          var tmpHash = AWS.util.buffer.alloc(64);\n          tmpHash.write(hashes[i], 0, 32, 'binary');\n          tmpHash.write(hashes[i + 1], 32, 32, 'binary');\n          tmpHashes.push(AWS.util.crypto.sha256(tmpHash));\n        } else {\n          tmpHashes.push(hashes[i]);\n        }\n      }\n      hashes = tmpHashes;\n    }\n\n    return AWS.util.crypto.toHex(hashes[0]);\n  }\n});\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE5BD,GAAG,CAACE,IAAI,CAACC,MAAM,CAACH,GAAG,CAACI,OAAO,CAACC,SAAS,EAAE;EACrC;AACF;AACA;EACEC,qBAAqB,EAAE,SAASA,qBAAqBA,CAACC,OAAO,EAAE;IAC7D,IAAIC,KAAK,CAACC,OAAO,CAACF,OAAO,CAACG,OAAO,CAACC,QAAQ,CAAC,EAAE;MAC3CJ,OAAO,CAACG,OAAO,CAACC,QAAQ,CAACC,OAAO,CAAC,IAAI,CAACC,iBAAiB,CAAC;IAC1D,CAAC,MAAM;MACLN,OAAO,CAACO,EAAE,CAAC,UAAU,EAAE,IAAI,CAACD,iBAAiB,CAAC;IAChD;IACAN,OAAO,CAACQ,cAAc,CAAC,YAAY,EACjCf,GAAG,CAACgB,cAAc,CAACC,IAAI,CAACC,cAAc,CAAC;IACzCX,OAAO,CAACO,EAAE,CAAC,OAAO,EAAE,IAAI,CAACK,oBAAoB,CAAC;IAC9CZ,OAAO,CAACO,EAAE,CAAC,OAAO,EAAE,IAAI,CAACM,kBAAkB,CAAC;EAC9C,CAAC;EAED;AACF;AACA;EACEP,iBAAiB,EAAE,SAASA,iBAAiBA,CAACN,OAAO,EAAE;IACrD,IAAIA,OAAO,CAACc,MAAM,CAACC,SAAS,KAAKC,SAAS,EAAE;IAC5ChB,OAAO,CAACc,MAAM,GAAGrB,GAAG,CAACE,IAAI,CAACsB,IAAI,CAACjB,OAAO,CAACc,MAAM,CAAC;IAC9Cd,OAAO,CAACc,MAAM,CAACC,SAAS,GAAG,GAAG;EAChC,CAAC;EAED;AACF;AACA;EACEH,oBAAoB,EAAE,SAASA,oBAAoBA,CAACZ,OAAO,EAAE;IAC3D,IAAIkB,OAAO,GAAGlB,OAAO,CAACmB,OAAO,CAACC,GAAG,CAACC,UAAU;IAC5CrB,OAAO,CAACsB,WAAW,CAACC,OAAO,CAAC,uBAAuB,CAAC,GAAGL,OAAO;EAChE,CAAC;EAED;AACF;AACA;EACEL,kBAAkB,EAAE,SAASA,kBAAkBA,CAACb,OAAO,EAAE;IACvD,IAAIA,OAAO,CAACc,MAAM,CAACU,IAAI,KAAKR,SAAS,EAAE;IAEvC,IAAIS,MAAM,GAAGzB,OAAO,CAACmB,OAAO,CAACO,gBAAgB,CAAC1B,OAAO,CAACc,MAAM,CAACU,IAAI,CAAC;IAClExB,OAAO,CAACsB,WAAW,CAACC,OAAO,CAAC,sBAAsB,CAAC,GAAGE,MAAM,CAACE,UAAU;IAEvE,IAAI,CAAC3B,OAAO,CAACsB,WAAW,CAACC,OAAO,CAAC,wBAAwB,CAAC,EAAE;MAC1DvB,OAAO,CAACsB,WAAW,CAACC,OAAO,CAAC,wBAAwB,CAAC,GAAGE,MAAM,CAACG,QAAQ;IACzE;EACF,CAAC;EAED;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEF,gBAAgB,EAAE,SAASA,gBAAgBA,CAACG,IAAI,EAAE;IAChD,IAAI,CAACpC,GAAG,CAACE,IAAI,CAACmC,MAAM,CAACC,QAAQ,CAACF,IAAI,CAAC,EAAEA,IAAI,GAAGpC,GAAG,CAACE,IAAI,CAACqC,MAAM,CAACC,QAAQ,CAACJ,IAAI,CAAC;IAE1E,IAAIK,EAAE,GAAG,IAAI,GAAG,IAAI;IACpB,IAAIT,MAAM,GAAG,EAAE;IACf,IAAIU,IAAI,GAAG1C,GAAG,CAACE,IAAI,CAACyC,MAAM,CAACC,UAAU,CAAC,QAAQ,CAAC;;IAE/C;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,IAAI,CAACU,MAAM,EAAED,CAAC,IAAIJ,EAAE,EAAE;MACxC,IAAIM,KAAK,GAAGX,IAAI,CAACY,KAAK,CAACH,CAAC,EAAEI,IAAI,CAACC,GAAG,CAACL,CAAC,GAAGJ,EAAE,EAAEL,IAAI,CAACU,MAAM,CAAC,CAAC;MACxDJ,IAAI,CAACvC,MAAM,CAAC4C,KAAK,CAAC;MAClBf,MAAM,CAACmB,IAAI,CAACnD,GAAG,CAACE,IAAI,CAACyC,MAAM,CAACS,MAAM,CAACL,KAAK,CAAC,CAAC;IAC5C;IAEA,OAAO;MACLb,UAAU,EAAEQ,IAAI,CAACW,MAAM,CAAC,KAAK,CAAC;MAC9BlB,QAAQ,EAAE,IAAI,CAACmB,aAAa,CAACtB,MAAM;IACrC,CAAC;EACH,CAAC;EAED;AACF;AACA;EACEsB,aAAa,EAAE,SAASA,aAAaA,CAACtB,MAAM,EAAE;IAC5C;IACA,OAAOA,MAAM,CAACc,MAAM,GAAG,CAAC,EAAE;MACxB,IAAIS,SAAS,GAAG,EAAE;MAClB,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,MAAM,CAACc,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QACzC,IAAIb,MAAM,CAACa,CAAC,GAAG,CAAC,CAAC,EAAE;UACjB,IAAIW,OAAO,GAAGxD,GAAG,CAACE,IAAI,CAACqC,MAAM,CAACkB,KAAK,CAAC,EAAE,CAAC;UACvCD,OAAO,CAACE,KAAK,CAAC1B,MAAM,CAACa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC;UACzCW,OAAO,CAACE,KAAK,CAAC1B,MAAM,CAACa,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC;UAC9CU,SAAS,CAACJ,IAAI,CAACnD,GAAG,CAACE,IAAI,CAACyC,MAAM,CAACS,MAAM,CAACI,OAAO,CAAC,CAAC;QACjD,CAAC,MAAM;UACLD,SAAS,CAACJ,IAAI,CAACnB,MAAM,CAACa,CAAC,CAAC,CAAC;QAC3B;MACF;MACAb,MAAM,GAAGuB,SAAS;IACpB;IAEA,OAAOvD,GAAG,CAACE,IAAI,CAACyC,MAAM,CAACgB,KAAK,CAAC3B,MAAM,CAAC,CAAC,CAAC,CAAC;EACzC;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}