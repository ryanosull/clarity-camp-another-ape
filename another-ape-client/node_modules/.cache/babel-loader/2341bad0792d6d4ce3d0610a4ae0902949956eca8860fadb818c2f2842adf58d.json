{"ast":null,"code":"const {\n  CID\n} = require('multiformats');\nconst uploadFile = (s3, params, cb = () => {}) => new Promise((resolve, reject) => {\n  const request = s3.putObject(params);\n  request.on('complete', response => {\n    try {\n      const {\n        data: {\n          ETag\n        }\n      } = response;\n      const hash = ETag.replace(/^\"|\"$/g, '');\n      const cidObj = CID.parse(hash);\n      let cidv0;\n      const cidv1 = cidObj.toV1().toString();\n      try {\n        cidv0 = cidObj.toV0().toString();\n      } catch (e) {\n        // fallback when cbor is used\n        cidv0 = cidv1;\n      }\n      resolve({\n        hash: cidv1,\n        hashV0: cidv0\n      });\n    } catch (e) {\n      reject(e);\n    }\n  });\n  request.on('error', error => {\n    reject(error);\n  });\n  request.on('httpUploadProgress', event => {\n    cb(event);\n  });\n  request.send();\n});\nmodule.exports = uploadFile;","map":{"version":3,"names":["CID","require","uploadFile","s3","params","cb","Promise","resolve","reject","request","putObject","on","response","data","ETag","hash","replace","cidObj","parse","cidv0","cidv1","toV1","toString","toV0","e","hashV0","error","event","send","module","exports"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@fleekhq/fleek-storage-js/utils/upload-file.js"],"sourcesContent":["const { CID } = require('multiformats');\n\n\nconst uploadFile = (s3, params, cb = () => {}) => (new Promise((resolve, reject) => {\n  const request = s3.putObject(params);\n\n  request.on('complete', (response) => {\n    try {\n      const { data: { ETag } } = response;\n\n      const hash = ETag.replace(/^\"|\"$/g, '');\n\n      const cidObj = CID.parse(hash);\n\n      let cidv0;\n\n      const cidv1 = cidObj.toV1().toString();\n\n      try {\n        cidv0 = cidObj.toV0().toString();\n      } catch (e) {\n        // fallback when cbor is used\n        cidv0 = cidv1;\n      }\n\n      resolve ({ hash: cidv1, hashV0: cidv0 });\n    } catch (e) {\n      reject(e);\n    }\n  });\n\n  request.on('error', (error) => {\n    reject(error);\n  });\n\n  request.on('httpUploadProgress', (event) => {\n    cb(event);\n  });\n\n  request.send();\n}));\n\nmodule.exports = uploadFile;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,cAAc,CAAC;AAGvC,MAAMC,UAAU,GAAGA,CAACC,EAAE,EAAEC,MAAM,EAAEC,EAAE,GAAGA,CAAA,KAAM,CAAC,CAAC,KAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAClF,MAAMC,OAAO,GAAGN,EAAE,CAACO,SAAS,CAACN,MAAM,CAAC;EAEpCK,OAAO,CAACE,EAAE,CAAC,UAAU,EAAGC,QAAQ,IAAK;IACnC,IAAI;MACF,MAAM;QAAEC,IAAI,EAAE;UAAEC;QAAK;MAAE,CAAC,GAAGF,QAAQ;MAEnC,MAAMG,IAAI,GAAGD,IAAI,CAACE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;MAEvC,MAAMC,MAAM,GAAGjB,GAAG,CAACkB,KAAK,CAACH,IAAI,CAAC;MAE9B,IAAII,KAAK;MAET,MAAMC,KAAK,GAAGH,MAAM,CAACI,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MAEtC,IAAI;QACFH,KAAK,GAAGF,MAAM,CAACM,IAAI,CAAC,CAAC,CAACD,QAAQ,CAAC,CAAC;MAClC,CAAC,CAAC,OAAOE,CAAC,EAAE;QACV;QACAL,KAAK,GAAGC,KAAK;MACf;MAEAb,OAAO,CAAE;QAAEQ,IAAI,EAAEK,KAAK;QAAEK,MAAM,EAAEN;MAAM,CAAC,CAAC;IAC1C,CAAC,CAAC,OAAOK,CAAC,EAAE;MACVhB,MAAM,CAACgB,CAAC,CAAC;IACX;EACF,CAAC,CAAC;EAEFf,OAAO,CAACE,EAAE,CAAC,OAAO,EAAGe,KAAK,IAAK;IAC7BlB,MAAM,CAACkB,KAAK,CAAC;EACf,CAAC,CAAC;EAEFjB,OAAO,CAACE,EAAE,CAAC,oBAAoB,EAAGgB,KAAK,IAAK;IAC1CtB,EAAE,CAACsB,KAAK,CAAC;EACX,CAAC,CAAC;EAEFlB,OAAO,CAACmB,IAAI,CAAC,CAAC;AAChB,CAAC,CAAE;AAEHC,MAAM,CAACC,OAAO,GAAG5B,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}