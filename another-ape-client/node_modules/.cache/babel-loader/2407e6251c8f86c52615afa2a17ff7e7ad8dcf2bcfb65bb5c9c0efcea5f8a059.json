{"ast":null,"code":"const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst streamUploadFile = require('../utils/stream-upload');\nconst getPublicUrl = require('../utils/get-public-url');\nconst streamUpload = async ({\n  apiKey,\n  apiSecret,\n  stream,\n  key,\n  bucket\n}) => {\n  try {\n    const s3 = initS3(apiKey, apiSecret);\n    if (!stream) {\n      throw 'No file to upload';\n    }\n    if (!key) {\n      throw 'No file key was specified';\n    }\n    let bucketName = bucket;\n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n    const params = {\n      bucket: bucketName,\n      objectName: key,\n      stream\n    };\n    const result = await streamUploadFile(s3, params);\n    const returnData = {\n      key,\n      bucket: bucketName,\n      publicUrl: getPublicUrl(bucketName, key),\n      hash: result.hash,\n      hashV0: result.hashV0\n    };\n    return returnData;\n  } catch (error) {\n    throw error;\n  }\n};\nmodule.exports = streamUpload;","map":{"version":3,"names":["initS3","require","getBucket","streamUploadFile","getPublicUrl","streamUpload","apiKey","apiSecret","stream","key","bucket","s3","bucketName","params","objectName","result","returnData","publicUrl","hash","hashV0","error","module","exports"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@fleekhq/fleek-storage-js/methods/streamUpload.js"],"sourcesContent":["const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst streamUploadFile = require('../utils/stream-upload');\nconst getPublicUrl = require('../utils/get-public-url');\n\nconst streamUpload = async ({\n  apiKey,\n  apiSecret,\n  stream,\n  key,\n  bucket,\n}) => {\n  try {\n    const s3 = initS3(\n      apiKey,\n      apiSecret,\n    );\n\n    if (!stream) {\n      throw 'No file to upload';\n    }\n\n    if (!key) {\n      throw 'No file key was specified'\n    }\n\n    let bucketName = bucket;\n    \n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n\n    const params = {\n      bucket: bucketName,\n      objectName: key,\n      stream,\n    };\n\n    const result = await streamUploadFile(s3, params);\n\n    const returnData = {\n      key,\n      bucket: bucketName,\n      publicUrl: getPublicUrl(bucketName, key),\n      hash: result.hash,\n      hashV0: result.hashV0,\n    };\n\n    return returnData;\n  } catch(error) {\n    throw error;\n  }\n};\n\nmodule.exports = streamUpload;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC1C,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAME,gBAAgB,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAC1D,MAAMG,YAAY,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AAEvD,MAAMI,YAAY,GAAG,MAAAA,CAAO;EAC1BC,MAAM;EACNC,SAAS;EACTC,MAAM;EACNC,GAAG;EACHC;AACF,CAAC,KAAK;EACJ,IAAI;IACF,MAAMC,EAAE,GAAGX,MAAM,CACfM,MAAM,EACNC,SACF,CAAC;IAED,IAAI,CAACC,MAAM,EAAE;MACX,MAAM,mBAAmB;IAC3B;IAEA,IAAI,CAACC,GAAG,EAAE;MACR,MAAM,2BAA2B;IACnC;IAEA,IAAIG,UAAU,GAAGF,MAAM;IAEvB,IAAI,CAACE,UAAU,EAAE;MACfA,UAAU,GAAG,MAAMV,SAAS,CAACS,EAAE,CAAC;IAClC;IAEA,MAAME,MAAM,GAAG;MACbH,MAAM,EAAEE,UAAU;MAClBE,UAAU,EAAEL,GAAG;MACfD;IACF,CAAC;IAED,MAAMO,MAAM,GAAG,MAAMZ,gBAAgB,CAACQ,EAAE,EAAEE,MAAM,CAAC;IAEjD,MAAMG,UAAU,GAAG;MACjBP,GAAG;MACHC,MAAM,EAAEE,UAAU;MAClBK,SAAS,EAAEb,YAAY,CAACQ,UAAU,EAAEH,GAAG,CAAC;MACxCS,IAAI,EAAEH,MAAM,CAACG,IAAI;MACjBC,MAAM,EAAEJ,MAAM,CAACI;IACjB,CAAC;IAED,OAAOH,UAAU;EACnB,CAAC,CAAC,OAAMI,KAAK,EAAE;IACb,MAAMA,KAAK;EACb;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGjB,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}