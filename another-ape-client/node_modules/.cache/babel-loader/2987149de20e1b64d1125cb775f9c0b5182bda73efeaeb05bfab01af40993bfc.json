{"ast":null,"code":"var fs = require('fs');\nvar AWS = require('../core'),\n  ENV_RELATIVE_URI = 'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI',\n  ENV_FULL_URI = 'AWS_CONTAINER_CREDENTIALS_FULL_URI',\n  ENV_AUTH_TOKEN = 'AWS_CONTAINER_AUTHORIZATION_TOKEN',\n  ENV_AUTH_TOKEN_FILE = 'AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE',\n  FULL_URI_UNRESTRICTED_PROTOCOLS = ['https:'],\n  FULL_URI_ALLOWED_PROTOCOLS = ['http:', 'https:'],\n  FULL_URI_ALLOWED_HOSTNAMES = ['localhost', '127.0.0.1', '169.254.170.23'],\n  RELATIVE_URI_HOST = '169.254.170.2';\n\n/**\n * Represents credentials received from specified URI.\n *\n * This class will request refreshable credentials from the relative URI\n * specified by the AWS_CONTAINER_CREDENTIALS_RELATIVE_URI or the\n * AWS_CONTAINER_CREDENTIALS_FULL_URI environment variable. If valid credentials\n * are returned in the response, these will be used with zero configuration.\n *\n * This credentials class will by default timeout after 1 second of inactivity\n * and retry 3 times.\n * If your requests to the relative URI are timing out, you can increase\n * the value by configuring them directly:\n *\n * ```javascript\n * AWS.config.credentials = new AWS.RemoteCredentials({\n *   httpOptions: { timeout: 5000 }, // 5 second timeout\n *   maxRetries: 10, // retry 10 times\n *   retryDelayOptions: { base: 200 } // see AWS.Config for information\n * });\n * ```\n *\n * @see AWS.Config.retryDelayOptions\n *\n * @!macro nobrowser\n */\nAWS.RemoteCredentials = AWS.util.inherit(AWS.Credentials, {\n  constructor: function RemoteCredentials(options) {\n    AWS.Credentials.call(this);\n    options = options ? AWS.util.copy(options) : {};\n    if (!options.httpOptions) options.httpOptions = {};\n    options.httpOptions = AWS.util.merge(this.httpOptions, options.httpOptions);\n    AWS.util.update(this, options);\n  },\n  /**\n   * @api private\n   */\n  httpOptions: {\n    timeout: 1000\n  },\n  /**\n   * @api private\n   */\n  maxRetries: 3,\n  /**\n   * @api private\n   */\n  isConfiguredForEcsCredentials: function isConfiguredForEcsCredentials() {\n    return Boolean(process && process.env && (process.env[ENV_RELATIVE_URI] || process.env[ENV_FULL_URI]));\n  },\n  /**\n   * @api private\n   */\n  getECSFullUri: function getECSFullUri() {\n    if (process && process.env) {\n      var relative = process.env[ENV_RELATIVE_URI],\n        full = process.env[ENV_FULL_URI];\n      if (relative) {\n        return 'http://' + RELATIVE_URI_HOST + relative;\n      } else if (full) {\n        var parsed = AWS.util.urlParse(full);\n        if (FULL_URI_ALLOWED_PROTOCOLS.indexOf(parsed.protocol) < 0) {\n          throw AWS.util.error(new Error('Unsupported protocol:  AWS.RemoteCredentials supports ' + FULL_URI_ALLOWED_PROTOCOLS.join(',') + ' only; ' + parsed.protocol + ' requested.'), {\n            code: 'ECSCredentialsProviderFailure'\n          });\n        }\n        if (FULL_URI_UNRESTRICTED_PROTOCOLS.indexOf(parsed.protocol) < 0 && FULL_URI_ALLOWED_HOSTNAMES.indexOf(parsed.hostname) < 0) {\n          throw AWS.util.error(new Error('Unsupported hostname: AWS.RemoteCredentials only supports ' + FULL_URI_ALLOWED_HOSTNAMES.join(',') + ' for ' + parsed.protocol + '; ' + parsed.protocol + '//' + parsed.hostname + ' requested.'), {\n            code: 'ECSCredentialsProviderFailure'\n          });\n        }\n        return full;\n      } else {\n        throw AWS.util.error(new Error('Variable ' + ENV_RELATIVE_URI + ' or ' + ENV_FULL_URI + ' must be set to use AWS.RemoteCredentials.'), {\n          code: 'ECSCredentialsProviderFailure'\n        });\n      }\n    } else {\n      throw AWS.util.error(new Error('No process info available'), {\n        code: 'ECSCredentialsProviderFailure'\n      });\n    }\n  },\n  /**\n   * @api private\n   */\n  getECSAuthToken: function getECSAuthToken() {\n    if (process && process.env && (process.env[ENV_FULL_URI] || process.env[ENV_AUTH_TOKEN_FILE])) {\n      if (!process.env[ENV_AUTH_TOKEN] && process.env[ENV_AUTH_TOKEN_FILE]) {\n        try {\n          var data = fs.readFileSync(process.env[ENV_AUTH_TOKEN_FILE]).toString();\n          return data;\n        } catch (error) {\n          console.error('Error reading token file:', error);\n          throw error; // Re-throw the error to propagate it\n        }\n      }\n\n      return process.env[ENV_AUTH_TOKEN];\n    }\n  },\n  /**\n   * @api private\n   */\n  credsFormatIsValid: function credsFormatIsValid(credData) {\n    return !!credData.accessKeyId && !!credData.secretAccessKey && !!credData.sessionToken && !!credData.expireTime;\n  },\n  /**\n   * @api private\n   */\n  formatCreds: function formatCreds(credData) {\n    if (!!credData.credentials) {\n      credData = credData.credentials;\n    }\n    return {\n      expired: false,\n      accessKeyId: credData.accessKeyId || credData.AccessKeyId,\n      secretAccessKey: credData.secretAccessKey || credData.SecretAccessKey,\n      sessionToken: credData.sessionToken || credData.Token,\n      expireTime: new Date(credData.expiration || credData.Expiration)\n    };\n  },\n  /**\n   * @api private\n   */\n  request: function request(url, callback) {\n    var httpRequest = new AWS.HttpRequest(url);\n    httpRequest.method = 'GET';\n    httpRequest.headers.Accept = 'application/json';\n    var token = this.getECSAuthToken();\n    if (token) {\n      httpRequest.headers.Authorization = token;\n    }\n    AWS.util.handleRequestWithRetries(httpRequest, this, callback);\n  },\n  /**\n   * Loads the credentials from the relative URI specified by container\n   *\n   * @callback callback function(err)\n   *   Called when the request to the relative URI responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, `sessionToken`, and `expireTime` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    var fullUri;\n    try {\n      fullUri = this.getECSFullUri();\n    } catch (err) {\n      callback(err);\n      return;\n    }\n    this.request(fullUri, function (err, data) {\n      if (!err) {\n        try {\n          data = JSON.parse(data);\n          var creds = self.formatCreds(data);\n          if (!self.credsFormatIsValid(creds)) {\n            throw AWS.util.error(new Error('Response data is not in valid format'), {\n              code: 'ECSCredentialsProviderFailure'\n            });\n          }\n          AWS.util.update(self, creds);\n        } catch (dataError) {\n          err = dataError;\n        }\n      }\n      callback(err, creds);\n    });\n  }\n});","map":{"version":3,"names":["fs","require","AWS","ENV_RELATIVE_URI","ENV_FULL_URI","ENV_AUTH_TOKEN","ENV_AUTH_TOKEN_FILE","FULL_URI_UNRESTRICTED_PROTOCOLS","FULL_URI_ALLOWED_PROTOCOLS","FULL_URI_ALLOWED_HOSTNAMES","RELATIVE_URI_HOST","RemoteCredentials","util","inherit","Credentials","constructor","options","call","copy","httpOptions","merge","update","timeout","maxRetries","isConfiguredForEcsCredentials","Boolean","process","env","getECSFullUri","relative","full","parsed","urlParse","indexOf","protocol","error","Error","join","code","hostname","getECSAuthToken","data","readFileSync","toString","console","credsFormatIsValid","credData","accessKeyId","secretAccessKey","sessionToken","expireTime","formatCreds","credentials","expired","AccessKeyId","SecretAccessKey","Token","Date","expiration","Expiration","request","url","callback","httpRequest","HttpRequest","method","headers","Accept","token","Authorization","handleRequestWithRetries","refresh","coalesceRefresh","fn","load","self","fullUri","err","JSON","parse","creds","dataError"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/credentials/remote_credentials.js"],"sourcesContent":["var fs = require('fs');\n\nvar AWS = require('../core'),\n  ENV_RELATIVE_URI = 'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI',\n  ENV_FULL_URI = 'AWS_CONTAINER_CREDENTIALS_FULL_URI',\n  ENV_AUTH_TOKEN = 'AWS_CONTAINER_AUTHORIZATION_TOKEN',\n  ENV_AUTH_TOKEN_FILE = 'AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE',\n  FULL_URI_UNRESTRICTED_PROTOCOLS = ['https:'],\n  FULL_URI_ALLOWED_PROTOCOLS = ['http:', 'https:'],\n  FULL_URI_ALLOWED_HOSTNAMES = ['localhost', '127.0.0.1', '169.254.170.23'],\n  RELATIVE_URI_HOST = '169.254.170.2';\n\n/**\n * Represents credentials received from specified URI.\n *\n * This class will request refreshable credentials from the relative URI\n * specified by the AWS_CONTAINER_CREDENTIALS_RELATIVE_URI or the\n * AWS_CONTAINER_CREDENTIALS_FULL_URI environment variable. If valid credentials\n * are returned in the response, these will be used with zero configuration.\n *\n * This credentials class will by default timeout after 1 second of inactivity\n * and retry 3 times.\n * If your requests to the relative URI are timing out, you can increase\n * the value by configuring them directly:\n *\n * ```javascript\n * AWS.config.credentials = new AWS.RemoteCredentials({\n *   httpOptions: { timeout: 5000 }, // 5 second timeout\n *   maxRetries: 10, // retry 10 times\n *   retryDelayOptions: { base: 200 } // see AWS.Config for information\n * });\n * ```\n *\n * @see AWS.Config.retryDelayOptions\n *\n * @!macro nobrowser\n */\nAWS.RemoteCredentials = AWS.util.inherit(AWS.Credentials, {\n  constructor: function RemoteCredentials(options) {\n    AWS.Credentials.call(this);\n    options = options ? AWS.util.copy(options) : {};\n    if (!options.httpOptions) options.httpOptions = {};\n    options.httpOptions = AWS.util.merge(\n      this.httpOptions, options.httpOptions);\n    AWS.util.update(this, options);\n  },\n\n  /**\n   * @api private\n   */\n  httpOptions: { timeout: 1000 },\n\n  /**\n   * @api private\n   */\n  maxRetries: 3,\n\n  /**\n   * @api private\n   */\n  isConfiguredForEcsCredentials: function isConfiguredForEcsCredentials() {\n    return Boolean(\n        process &&\n        process.env &&\n        (process.env[ENV_RELATIVE_URI] || process.env[ENV_FULL_URI])\n    );\n  },\n\n  /**\n   * @api private\n   */\n  getECSFullUri: function getECSFullUri() {\n    if (process && process.env) {\n      var relative = process.env[ENV_RELATIVE_URI],\n          full = process.env[ENV_FULL_URI];\n      if (relative) {\n        return 'http://' + RELATIVE_URI_HOST + relative;\n      } else if (full) {\n        var parsed = AWS.util.urlParse(full);\n        if (FULL_URI_ALLOWED_PROTOCOLS.indexOf(parsed.protocol) < 0) {\n          throw AWS.util.error(\n            new Error('Unsupported protocol:  AWS.RemoteCredentials supports '\n              + FULL_URI_ALLOWED_PROTOCOLS.join(',') + ' only; '\n              + parsed.protocol + ' requested.'),\n            { code: 'ECSCredentialsProviderFailure' }\n          );\n        }\n\n        if (FULL_URI_UNRESTRICTED_PROTOCOLS.indexOf(parsed.protocol) < 0 &&\n            FULL_URI_ALLOWED_HOSTNAMES.indexOf(parsed.hostname) < 0) {\n          throw AWS.util.error(\n            new Error('Unsupported hostname: AWS.RemoteCredentials only supports '\n              + FULL_URI_ALLOWED_HOSTNAMES.join(',') + ' for ' + parsed.protocol + '; '\n              + parsed.protocol + '//' + parsed.hostname + ' requested.'),\n            { code: 'ECSCredentialsProviderFailure' }\n          );\n        }\n\n        return full;\n      } else {\n        throw AWS.util.error(\n          new Error('Variable ' + ENV_RELATIVE_URI + ' or ' + ENV_FULL_URI +\n            ' must be set to use AWS.RemoteCredentials.'),\n          { code: 'ECSCredentialsProviderFailure' }\n        );\n      }\n    } else {\n      throw AWS.util.error(\n        new Error('No process info available'),\n        { code: 'ECSCredentialsProviderFailure' }\n      );\n    }\n  },\n\n  /**\n   * @api private\n   */\n  getECSAuthToken: function getECSAuthToken() {\n    if (process && process.env && (process.env[ENV_FULL_URI] || process.env[ENV_AUTH_TOKEN_FILE])) {\n      if (!process.env[ENV_AUTH_TOKEN] && process.env[ENV_AUTH_TOKEN_FILE]) {\n        try {\n          var data = fs.readFileSync(process.env[ENV_AUTH_TOKEN_FILE]).toString();\n          return data;\n        } catch (error) {\n          console.error('Error reading token file:', error);\n          throw error; // Re-throw the error to propagate it\n        }\n      }\n      return process.env[ENV_AUTH_TOKEN];\n    }\n  },\n\n  /**\n   * @api private\n   */\n  credsFormatIsValid: function credsFormatIsValid(credData) {\n    return (!!credData.accessKeyId && !!credData.secretAccessKey &&\n      !!credData.sessionToken && !!credData.expireTime);\n  },\n\n  /**\n   * @api private\n   */\n  formatCreds: function formatCreds(credData) {\n    if (!!credData.credentials) {\n      credData = credData.credentials;\n    }\n\n    return {\n      expired: false,\n      accessKeyId: credData.accessKeyId || credData.AccessKeyId,\n      secretAccessKey: credData.secretAccessKey || credData.SecretAccessKey,\n      sessionToken: credData.sessionToken || credData.Token,\n      expireTime: new Date(credData.expiration || credData.Expiration)\n    };\n  },\n\n  /**\n   * @api private\n   */\n  request: function request(url, callback) {\n    var httpRequest = new AWS.HttpRequest(url);\n    httpRequest.method = 'GET';\n    httpRequest.headers.Accept = 'application/json';\n    var token = this.getECSAuthToken();\n    if (token) {\n      httpRequest.headers.Authorization = token;\n    }\n    AWS.util.handleRequestWithRetries(httpRequest, this, callback);\n  },\n\n  /**\n   * Loads the credentials from the relative URI specified by container\n   *\n   * @callback callback function(err)\n   *   Called when the request to the relative URI responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, `sessionToken`, and `expireTime` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    var fullUri;\n\n    try {\n      fullUri = this.getECSFullUri();\n    } catch (err) {\n      callback(err);\n      return;\n    }\n\n    this.request(fullUri, function(err, data) {\n      if (!err) {\n        try {\n          data = JSON.parse(data);\n          var creds = self.formatCreds(data);\n          if (!self.credsFormatIsValid(creds)) {\n            throw AWS.util.error(\n              new Error('Response data is not in valid format'),\n              { code: 'ECSCredentialsProviderFailure' }\n            );\n          }\n          AWS.util.update(self, creds);\n        } catch (dataError) {\n          err = dataError;\n        }\n      }\n      callback(err, creds);\n    });\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}