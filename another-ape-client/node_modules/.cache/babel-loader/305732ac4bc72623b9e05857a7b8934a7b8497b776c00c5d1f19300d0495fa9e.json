{"ast":null,"code":"var AWS = require('../core');\nAWS.util.update(AWS.RDSDataService.prototype, {\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error) {\n    if (error.code === 'BadRequestException' && error.message && error.message.match(/^Communications link failure/) && error.statusCode === 400) {\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error);\n    }\n  }\n});","map":{"version":3,"names":["AWS","require","util","update","RDSDataService","prototype","retryableError","error","code","message","match","statusCode","_super","Service","call"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/services/rdsdataservice.js"],"sourcesContent":["var AWS = require('../core');\n\nAWS.util.update(AWS.RDSDataService.prototype, {\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error) {\n    if (error.code === 'BadRequestException' &&\n      error.message &&\n      error.message.match(/^Communications link failure/) &&\n      error.statusCode === 400) {\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error);\n    }\n  }\n});\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE5BD,GAAG,CAACE,IAAI,CAACC,MAAM,CAACH,GAAG,CAACI,cAAc,CAACC,SAAS,EAAE;EAC5C;AACF;AACA;AACA;EACEC,cAAc,EAAE,SAASA,cAAcA,CAACC,KAAK,EAAE;IAC7C,IAAIA,KAAK,CAACC,IAAI,KAAK,qBAAqB,IACtCD,KAAK,CAACE,OAAO,IACbF,KAAK,CAACE,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC,IACnDH,KAAK,CAACI,UAAU,KAAK,GAAG,EAAE;MAC1B,OAAO,IAAI;IACb,CAAC,MAAM;MACL,IAAIC,MAAM,GAAGZ,GAAG,CAACa,OAAO,CAACR,SAAS,CAACC,cAAc;MACjD,OAAOM,MAAM,CAACE,IAAI,CAAC,IAAI,EAAEP,KAAK,CAAC;IACjC;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}