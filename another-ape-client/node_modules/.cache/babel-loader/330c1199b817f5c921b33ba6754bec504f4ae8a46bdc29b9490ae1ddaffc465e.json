{"ast":null,"code":"var AWS = require('../core');\n\n/**\n * Resolve client-side monitoring configuration from either environmental variables\n * or shared config file. Configurations from environmental variables have higher priority\n * than those from shared config file. The resolver will try to read the shared config file\n * no matter whether the AWS_SDK_LOAD_CONFIG variable is set.\n * @api private\n */\nfunction resolveMonitoringConfig() {\n  var config = {\n    port: undefined,\n    clientId: undefined,\n    enabled: undefined,\n    host: undefined\n  };\n  if (fromEnvironment(config) || fromConfigFile(config)) return toJSType(config);\n  return toJSType(config);\n}\n\n/**\n * Resolve configurations from environmental variables.\n * @param {object} client side monitoring config object needs to be resolved\n * @returns {boolean} whether resolving configurations is done\n * @api private\n */\nfunction fromEnvironment(config) {\n  config.port = config.port || process.env.AWS_CSM_PORT;\n  config.enabled = config.enabled || process.env.AWS_CSM_ENABLED;\n  config.clientId = config.clientId || process.env.AWS_CSM_CLIENT_ID;\n  config.host = config.host || process.env.AWS_CSM_HOST;\n  return config.port && config.enabled && config.clientId && config.host || ['false', '0'].indexOf(config.enabled) >= 0; //no need to read shared config file if explicitely disabled\n}\n\n/**\n * Resolve cofigurations from shared config file with specified role name\n * @param {object} client side monitoring config object needs to be resolved\n * @returns {boolean} whether resolving configurations is done\n * @api private\n */\nfunction fromConfigFile(config) {\n  var sharedFileConfig;\n  try {\n    var configFile = AWS.util.iniLoader.loadFrom({\n      isConfig: true,\n      filename: process.env[AWS.util.sharedConfigFileEnv]\n    });\n    var sharedFileConfig = configFile[process.env.AWS_PROFILE || AWS.util.defaultProfile];\n  } catch (err) {\n    return false;\n  }\n  if (!sharedFileConfig) return config;\n  config.port = config.port || sharedFileConfig.csm_port;\n  config.enabled = config.enabled || sharedFileConfig.csm_enabled;\n  config.clientId = config.clientId || sharedFileConfig.csm_client_id;\n  config.host = config.host || sharedFileConfig.csm_host;\n  return config.port && config.enabled && config.clientId && config.host;\n}\n\n/**\n * Transfer the resolved configuration value to proper types: port as number, enabled\n * as boolean and clientId as string. The 'enabled' flag is valued to false when set\n * to 'false' or '0'.\n * @param {object} resolved client side monitoring config\n * @api private\n */\nfunction toJSType(config) {\n  //config.XXX is either undefined or string\n  var falsyNotations = ['false', '0', undefined];\n  if (!config.enabled || falsyNotations.indexOf(config.enabled.toLowerCase()) >= 0) {\n    config.enabled = false;\n  } else {\n    config.enabled = true;\n  }\n  config.port = config.port ? parseInt(config.port, 10) : undefined;\n  return config;\n}\nmodule.exports = resolveMonitoringConfig;","map":{"version":3,"names":["AWS","require","resolveMonitoringConfig","config","port","undefined","clientId","enabled","host","fromEnvironment","fromConfigFile","toJSType","process","env","AWS_CSM_PORT","AWS_CSM_ENABLED","AWS_CSM_CLIENT_ID","AWS_CSM_HOST","indexOf","sharedFileConfig","configFile","util","iniLoader","loadFrom","isConfig","filename","sharedConfigFileEnv","AWS_PROFILE","defaultProfile","err","csm_port","csm_enabled","csm_client_id","csm_host","falsyNotations","toLowerCase","parseInt","module","exports"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/publisher/configuration.js"],"sourcesContent":["var AWS = require('../core');\n\n/**\n * Resolve client-side monitoring configuration from either environmental variables\n * or shared config file. Configurations from environmental variables have higher priority\n * than those from shared config file. The resolver will try to read the shared config file\n * no matter whether the AWS_SDK_LOAD_CONFIG variable is set.\n * @api private\n */\nfunction resolveMonitoringConfig() {\n  var config = {\n    port: undefined,\n    clientId: undefined,\n    enabled: undefined,\n    host: undefined\n  };\n  if (fromEnvironment(config) || fromConfigFile(config)) return toJSType(config);\n  return toJSType(config);\n}\n\n/**\n * Resolve configurations from environmental variables.\n * @param {object} client side monitoring config object needs to be resolved\n * @returns {boolean} whether resolving configurations is done\n * @api private\n */\nfunction fromEnvironment(config) {\n  config.port = config.port || process.env.AWS_CSM_PORT;\n  config.enabled = config.enabled || process.env.AWS_CSM_ENABLED;\n  config.clientId = config.clientId || process.env.AWS_CSM_CLIENT_ID;\n  config.host = config.host || process.env.AWS_CSM_HOST;\n  return config.port && config.enabled && config.clientId && config.host ||\n    ['false', '0'].indexOf(config.enabled) >= 0; //no need to read shared config file if explicitely disabled\n}\n\n/**\n * Resolve cofigurations from shared config file with specified role name\n * @param {object} client side monitoring config object needs to be resolved\n * @returns {boolean} whether resolving configurations is done\n * @api private\n */\nfunction fromConfigFile(config) {\n  var sharedFileConfig;\n  try {\n    var configFile = AWS.util.iniLoader.loadFrom({\n      isConfig: true,\n      filename: process.env[AWS.util.sharedConfigFileEnv]\n    });\n    var sharedFileConfig = configFile[\n      process.env.AWS_PROFILE || AWS.util.defaultProfile\n    ];\n  } catch (err) {\n    return false;\n  }\n  if (!sharedFileConfig) return config;\n  config.port = config.port || sharedFileConfig.csm_port;\n  config.enabled = config.enabled || sharedFileConfig.csm_enabled;\n  config.clientId = config.clientId || sharedFileConfig.csm_client_id;\n  config.host = config.host || sharedFileConfig.csm_host;\n  return config.port && config.enabled && config.clientId && config.host;\n}\n\n/**\n * Transfer the resolved configuration value to proper types: port as number, enabled\n * as boolean and clientId as string. The 'enabled' flag is valued to false when set\n * to 'false' or '0'.\n * @param {object} resolved client side monitoring config\n * @api private\n */\nfunction toJSType(config) {\n    //config.XXX is either undefined or string\n  var falsyNotations = ['false', '0', undefined];\n  if (!config.enabled || falsyNotations.indexOf(config.enabled.toLowerCase()) >= 0) {\n    config.enabled = false;\n  } else {\n    config.enabled = true;\n  }\n  config.port = config.port ? parseInt(config.port, 10) : undefined;\n  return config;\n}\n\nmodule.exports = resolveMonitoringConfig;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}