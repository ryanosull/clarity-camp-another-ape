{"ast":null,"code":"var AWS = require('../core');\nvar fs = require('fs');\nvar STS = require('../../clients/sts');\nvar iniLoader = AWS.util.iniLoader;\n\n/**\n * Represents OIDC credentials from a file on disk\n * If the credentials expire, the SDK can {refresh} the credentials\n * from the file.\n *\n * ## Using the web identity token file\n *\n * This provider is checked by default in the Node.js environment. To use\n * the provider simply add your OIDC token to a file (ASCII encoding) and\n * share the filename in either AWS_WEB_IDENTITY_TOKEN_FILE environment\n * variable or web_identity_token_file shared config variable\n *\n * The file contains encoded OIDC token and the characters are\n * ASCII encoded. OIDC tokens are JSON Web Tokens (JWT).\n * JWT's are 3 base64 encoded strings joined by the '.' character.\n *\n * This class will read filename from AWS_WEB_IDENTITY_TOKEN_FILE\n * environment variable or web_identity_token_file shared config variable,\n * and get the OIDC token from filename.\n * It will also read IAM role to be assumed from AWS_ROLE_ARN\n * environment variable or role_arn shared config variable.\n * This provider gets credetials using the {AWS.STS.assumeRoleWithWebIdentity}\n * service operation\n *\n * @!macro nobrowser\n */\nAWS.TokenFileWebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * @example Creating a new credentials object\n   *  AWS.config.credentials = new AWS.TokenFileWebIdentityCredentials(\n   *   // optionally provide configuration to apply to the underlying AWS.STS service client\n   *   // if configuration is not provided, then configuration will be pulled from AWS.config\n   *   {\n   *     // specify timeout options\n   *     httpOptions: {\n   *       timeout: 100\n   *     }\n   *   });\n   * @see AWS.Config\n   */\n  constructor: function TokenFileWebIdentityCredentials(clientConfig) {\n    AWS.Credentials.call(this);\n    this.data = null;\n    this.clientConfig = AWS.util.copy(clientConfig || {});\n  },\n  /**\n   * Returns params from environment variables\n   *\n   * @api private\n   */\n  getParamsFromEnv: function getParamsFromEnv() {\n    var ENV_TOKEN_FILE = 'AWS_WEB_IDENTITY_TOKEN_FILE',\n      ENV_ROLE_ARN = 'AWS_ROLE_ARN';\n    if (process.env[ENV_TOKEN_FILE] && process.env[ENV_ROLE_ARN]) {\n      return [{\n        envTokenFile: process.env[ENV_TOKEN_FILE],\n        roleArn: process.env[ENV_ROLE_ARN],\n        roleSessionName: process.env['AWS_ROLE_SESSION_NAME']\n      }];\n    }\n  },\n  /**\n   * Returns params from shared config variables\n   *\n   * @api private\n   */\n  getParamsFromSharedConfig: function getParamsFromSharedConfig() {\n    var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader);\n    var profileName = process.env.AWS_PROFILE || AWS.util.defaultProfile;\n    var profile = profiles[profileName] || {};\n    if (Object.keys(profile).length === 0) {\n      throw AWS.util.error(new Error('Profile ' + profileName + ' not found'), {\n        code: 'TokenFileWebIdentityCredentialsProviderFailure'\n      });\n    }\n    var paramsArray = [];\n    while (!profile['web_identity_token_file'] && profile['source_profile']) {\n      paramsArray.unshift({\n        roleArn: profile['role_arn'],\n        roleSessionName: profile['role_session_name']\n      });\n      var sourceProfile = profile['source_profile'];\n      profile = profiles[sourceProfile];\n    }\n    paramsArray.unshift({\n      envTokenFile: profile['web_identity_token_file'],\n      roleArn: profile['role_arn'],\n      roleSessionName: profile['role_session_name']\n    });\n    return paramsArray;\n  },\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRoleWithWebIdentity}\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see AWS.Credentials.get\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n  /**\n   * @api private\n  */\n  assumeRoleChaining: function assumeRoleChaining(paramsArray, callback) {\n    var self = this;\n    if (paramsArray.length === 0) {\n      self.service.credentialsFrom(self.data, self);\n      callback();\n    } else {\n      var params = paramsArray.shift();\n      self.service.config.credentials = self.service.credentialsFrom(self.data, self);\n      self.service.assumeRole({\n        RoleArn: params.roleArn,\n        RoleSessionName: params.roleSessionName || 'token-file-web-identity'\n      }, function (err, data) {\n        self.data = null;\n        if (err) {\n          callback(err);\n        } else {\n          self.data = data;\n          self.assumeRoleChaining(paramsArray, callback);\n        }\n      });\n    }\n  },\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    try {\n      var paramsArray = self.getParamsFromEnv();\n      if (!paramsArray) {\n        paramsArray = self.getParamsFromSharedConfig();\n      }\n      if (paramsArray) {\n        var params = paramsArray.shift();\n        var oidcToken = fs.readFileSync(params.envTokenFile, {\n          encoding: 'ascii'\n        });\n        if (!self.service) {\n          self.createClients();\n        }\n        self.service.assumeRoleWithWebIdentity({\n          WebIdentityToken: oidcToken,\n          RoleArn: params.roleArn,\n          RoleSessionName: params.roleSessionName || 'token-file-web-identity'\n        }, function (err, data) {\n          self.data = null;\n          if (err) {\n            callback(err);\n          } else {\n            self.data = data;\n            self.assumeRoleChaining(paramsArray, callback);\n          }\n        });\n      }\n    } catch (err) {\n      callback(err);\n    }\n  },\n  /**\n   * @api private\n   */\n  createClients: function () {\n    if (!this.service) {\n      var stsConfig = AWS.util.merge({}, this.clientConfig);\n      this.service = new STS(stsConfig);\n\n      // Retry in case of IDPCommunicationErrorException or InvalidIdentityToken\n      this.service.retryableError = function (error) {\n        if (error.code === 'IDPCommunicationErrorException' || error.code === 'InvalidIdentityToken') {\n          return true;\n        } else {\n          return AWS.Service.prototype.retryableError.call(this, error);\n        }\n      };\n    }\n  }\n});","map":{"version":3,"names":["AWS","require","fs","STS","iniLoader","util","TokenFileWebIdentityCredentials","inherit","Credentials","constructor","clientConfig","call","data","copy","getParamsFromEnv","ENV_TOKEN_FILE","ENV_ROLE_ARN","process","env","envTokenFile","roleArn","roleSessionName","getParamsFromSharedConfig","profiles","getProfilesFromSharedConfig","profileName","AWS_PROFILE","defaultProfile","profile","Object","keys","length","error","Error","code","paramsArray","unshift","sourceProfile","refresh","callback","coalesceRefresh","fn","assumeRoleChaining","self","service","credentialsFrom","params","shift","config","credentials","assumeRole","RoleArn","RoleSessionName","err","load","oidcToken","readFileSync","encoding","createClients","assumeRoleWithWebIdentity","WebIdentityToken","stsConfig","merge","retryableError","Service","prototype"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/credentials/token_file_web_identity_credentials.js"],"sourcesContent":["var AWS = require('../core');\nvar fs = require('fs');\nvar STS = require('../../clients/sts');\nvar iniLoader = AWS.util.iniLoader;\n\n/**\n * Represents OIDC credentials from a file on disk\n * If the credentials expire, the SDK can {refresh} the credentials\n * from the file.\n *\n * ## Using the web identity token file\n *\n * This provider is checked by default in the Node.js environment. To use\n * the provider simply add your OIDC token to a file (ASCII encoding) and\n * share the filename in either AWS_WEB_IDENTITY_TOKEN_FILE environment\n * variable or web_identity_token_file shared config variable\n *\n * The file contains encoded OIDC token and the characters are\n * ASCII encoded. OIDC tokens are JSON Web Tokens (JWT).\n * JWT's are 3 base64 encoded strings joined by the '.' character.\n *\n * This class will read filename from AWS_WEB_IDENTITY_TOKEN_FILE\n * environment variable or web_identity_token_file shared config variable,\n * and get the OIDC token from filename.\n * It will also read IAM role to be assumed from AWS_ROLE_ARN\n * environment variable or role_arn shared config variable.\n * This provider gets credetials using the {AWS.STS.assumeRoleWithWebIdentity}\n * service operation\n *\n * @!macro nobrowser\n */\nAWS.TokenFileWebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {\n\n  /**\n   * @example Creating a new credentials object\n   *  AWS.config.credentials = new AWS.TokenFileWebIdentityCredentials(\n   *   // optionally provide configuration to apply to the underlying AWS.STS service client\n   *   // if configuration is not provided, then configuration will be pulled from AWS.config\n   *   {\n   *     // specify timeout options\n   *     httpOptions: {\n   *       timeout: 100\n   *     }\n   *   });\n   * @see AWS.Config\n   */\n  constructor: function TokenFileWebIdentityCredentials(clientConfig) {\n    AWS.Credentials.call(this);\n    this.data = null;\n    this.clientConfig = AWS.util.copy(clientConfig || {});\n  },\n\n  /**\n   * Returns params from environment variables\n   *\n   * @api private\n   */\n  getParamsFromEnv: function getParamsFromEnv() {\n    var ENV_TOKEN_FILE = 'AWS_WEB_IDENTITY_TOKEN_FILE',\n        ENV_ROLE_ARN = 'AWS_ROLE_ARN';\n    if (process.env[ENV_TOKEN_FILE] && process.env[ENV_ROLE_ARN]) {\n      return [{\n        envTokenFile: process.env[ENV_TOKEN_FILE],\n        roleArn: process.env[ENV_ROLE_ARN],\n        roleSessionName: process.env['AWS_ROLE_SESSION_NAME']\n      }];\n    }\n  },\n\n  /**\n   * Returns params from shared config variables\n   *\n   * @api private\n   */\n  getParamsFromSharedConfig: function getParamsFromSharedConfig() {\n    var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader);\n    var profileName = process.env.AWS_PROFILE || AWS.util.defaultProfile;\n    var profile = profiles[profileName] || {};\n\n    if (Object.keys(profile).length === 0) {\n      throw AWS.util.error(\n        new Error('Profile ' + profileName + ' not found'),\n        { code: 'TokenFileWebIdentityCredentialsProviderFailure' }\n      );\n    }\n\n    var paramsArray = [];\n\n    while (!profile['web_identity_token_file'] && profile['source_profile']) {\n      paramsArray.unshift({\n        roleArn: profile['role_arn'],\n        roleSessionName: profile['role_session_name']\n      });\n      var sourceProfile = profile['source_profile'];\n      profile = profiles[sourceProfile];\n    }\n\n    paramsArray.unshift({\n      envTokenFile: profile['web_identity_token_file'],\n      roleArn: profile['role_arn'],\n      roleSessionName: profile['role_session_name']\n    });\n\n    return paramsArray;\n  },\n\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRoleWithWebIdentity}\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see AWS.Credentials.get\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n\n  /**\n   * @api private\n  */\n  assumeRoleChaining: function assumeRoleChaining(paramsArray, callback) {\n    var self = this;\n    if (paramsArray.length === 0) {\n      self.service.credentialsFrom(self.data, self);\n      callback();\n    } else {\n      var params = paramsArray.shift();\n      self.service.config.credentials = self.service.credentialsFrom(self.data, self);\n      self.service.assumeRole(\n        {\n          RoleArn: params.roleArn,\n          RoleSessionName: params.roleSessionName || 'token-file-web-identity'\n        },\n        function (err, data) {\n          self.data = null;\n          if (err) {\n            callback(err);\n          } else {\n            self.data = data;\n            self.assumeRoleChaining(paramsArray, callback);\n          }\n        }\n      );\n    }\n  },\n\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    try {\n      var paramsArray = self.getParamsFromEnv();\n      if (!paramsArray) {\n        paramsArray = self.getParamsFromSharedConfig();\n      }\n      if (paramsArray) {\n        var params = paramsArray.shift();\n        var oidcToken = fs.readFileSync(params.envTokenFile, {encoding: 'ascii'});\n        if (!self.service) {\n          self.createClients();\n        }\n        self.service.assumeRoleWithWebIdentity(\n          {\n            WebIdentityToken: oidcToken,\n            RoleArn: params.roleArn,\n            RoleSessionName: params.roleSessionName || 'token-file-web-identity'\n          },\n          function (err, data) {\n            self.data = null;\n            if (err) {\n              callback(err);\n            } else {\n              self.data = data;\n              self.assumeRoleChaining(paramsArray, callback);\n            }\n          }\n        );\n      }\n    } catch (err) {\n      callback(err);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  createClients: function() {\n    if (!this.service) {\n      var stsConfig = AWS.util.merge({}, this.clientConfig);\n      this.service = new STS(stsConfig);\n\n      // Retry in case of IDPCommunicationErrorException or InvalidIdentityToken\n      this.service.retryableError = function(error) {\n        if (error.code === 'IDPCommunicationErrorException' || error.code === 'InvalidIdentityToken') {\n          return true;\n        } else {\n          return AWS.Service.prototype.retryableError.call(this, error);\n        }\n      };\n    }\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}