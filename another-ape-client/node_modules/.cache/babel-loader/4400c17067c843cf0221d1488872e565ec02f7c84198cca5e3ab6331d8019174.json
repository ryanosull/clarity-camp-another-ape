{"ast":null,"code":"var AWS = require('../core');\n\n/**\n * Represents credentials from the environment.\n *\n * By default, this class will look for the matching environment variables\n * prefixed by a given {envPrefix}. The un-prefixed environment variable names\n * for each credential value is listed below:\n *\n * ```javascript\n * accessKeyId: ACCESS_KEY_ID\n * secretAccessKey: SECRET_ACCESS_KEY\n * sessionToken: SESSION_TOKEN\n * ```\n *\n * With the default prefix of 'AWS', the environment variables would be:\n *\n *     AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN\n *\n * @!attribute envPrefix\n *   @readonly\n *   @return [String] the prefix for the environment variable names excluding\n *     the separating underscore ('_').\n */\nAWS.EnvironmentCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new EnvironmentCredentials class with a given variable\n   * prefix {envPrefix}. For example, to load credentials using the 'AWS'\n   * prefix:\n   *\n   * ```javascript\n   * var creds = new AWS.EnvironmentCredentials('AWS');\n   * creds.accessKeyId == 'AKID' // from AWS_ACCESS_KEY_ID env var\n   * ```\n   *\n   * @param envPrefix [String] the prefix to use (e.g., 'AWS') for environment\n   *   variables. Do not include the separating underscore.\n   */\n  constructor: function EnvironmentCredentials(envPrefix) {\n    AWS.Credentials.call(this);\n    this.envPrefix = envPrefix;\n    this.get(function () {});\n  },\n  /**\n   * Loads credentials from the environment using the prefixed\n   * environment variables.\n   *\n   * @callback callback function(err)\n   *   Called after the (prefixed) ACCESS_KEY_ID, SECRET_ACCESS_KEY, and\n   *   SESSION_TOKEN environment variables are read. When this callback is\n   *   called with no error, it means that the credentials information has\n   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,\n   *   and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    if (!callback) callback = AWS.util.fn.callback;\n    if (!process || !process.env) {\n      callback(AWS.util.error(new Error('No process info or environment variables available'), {\n        code: 'EnvironmentCredentialsProviderFailure'\n      }));\n      return;\n    }\n    var keys = ['ACCESS_KEY_ID', 'SECRET_ACCESS_KEY', 'SESSION_TOKEN'];\n    var values = [];\n    for (var i = 0; i < keys.length; i++) {\n      var prefix = '';\n      if (this.envPrefix) prefix = this.envPrefix + '_';\n      values[i] = process.env[prefix + keys[i]];\n      if (!values[i] && keys[i] !== 'SESSION_TOKEN') {\n        callback(AWS.util.error(new Error('Variable ' + prefix + keys[i] + ' not set.'), {\n          code: 'EnvironmentCredentialsProviderFailure'\n        }));\n        return;\n      }\n    }\n    this.expired = false;\n    AWS.Credentials.apply(this, values);\n    callback();\n  }\n});","map":{"version":3,"names":["AWS","require","EnvironmentCredentials","util","inherit","Credentials","constructor","envPrefix","call","get","refresh","callback","fn","process","env","error","Error","code","keys","values","i","length","prefix","expired","apply"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/credentials/environment_credentials.js"],"sourcesContent":["var AWS = require('../core');\n\n/**\n * Represents credentials from the environment.\n *\n * By default, this class will look for the matching environment variables\n * prefixed by a given {envPrefix}. The un-prefixed environment variable names\n * for each credential value is listed below:\n *\n * ```javascript\n * accessKeyId: ACCESS_KEY_ID\n * secretAccessKey: SECRET_ACCESS_KEY\n * sessionToken: SESSION_TOKEN\n * ```\n *\n * With the default prefix of 'AWS', the environment variables would be:\n *\n *     AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN\n *\n * @!attribute envPrefix\n *   @readonly\n *   @return [String] the prefix for the environment variable names excluding\n *     the separating underscore ('_').\n */\nAWS.EnvironmentCredentials = AWS.util.inherit(AWS.Credentials, {\n\n  /**\n   * Creates a new EnvironmentCredentials class with a given variable\n   * prefix {envPrefix}. For example, to load credentials using the 'AWS'\n   * prefix:\n   *\n   * ```javascript\n   * var creds = new AWS.EnvironmentCredentials('AWS');\n   * creds.accessKeyId == 'AKID' // from AWS_ACCESS_KEY_ID env var\n   * ```\n   *\n   * @param envPrefix [String] the prefix to use (e.g., 'AWS') for environment\n   *   variables. Do not include the separating underscore.\n   */\n  constructor: function EnvironmentCredentials(envPrefix) {\n    AWS.Credentials.call(this);\n    this.envPrefix = envPrefix;\n    this.get(function() {});\n  },\n\n  /**\n   * Loads credentials from the environment using the prefixed\n   * environment variables.\n   *\n   * @callback callback function(err)\n   *   Called after the (prefixed) ACCESS_KEY_ID, SECRET_ACCESS_KEY, and\n   *   SESSION_TOKEN environment variables are read. When this callback is\n   *   called with no error, it means that the credentials information has\n   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,\n   *   and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    if (!callback) callback = AWS.util.fn.callback;\n\n    if (!process || !process.env) {\n      callback(AWS.util.error(\n        new Error('No process info or environment variables available'),\n        { code: 'EnvironmentCredentialsProviderFailure' }\n      ));\n      return;\n    }\n\n    var keys = ['ACCESS_KEY_ID', 'SECRET_ACCESS_KEY', 'SESSION_TOKEN'];\n    var values = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      var prefix = '';\n      if (this.envPrefix) prefix = this.envPrefix + '_';\n      values[i] = process.env[prefix + keys[i]];\n      if (!values[i] && keys[i] !== 'SESSION_TOKEN') {\n        callback(AWS.util.error(\n          new Error('Variable ' + prefix + keys[i] + ' not set.'),\n        { code: 'EnvironmentCredentialsProviderFailure' }\n        ));\n        return;\n      }\n    }\n\n    this.expired = false;\n    AWS.Credentials.apply(this, values);\n    callback();\n  }\n\n});\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,GAAG,CAACE,sBAAsB,GAAGF,GAAG,CAACG,IAAI,CAACC,OAAO,CAACJ,GAAG,CAACK,WAAW,EAAE;EAE7D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,SAASJ,sBAAsBA,CAACK,SAAS,EAAE;IACtDP,GAAG,CAACK,WAAW,CAACG,IAAI,CAAC,IAAI,CAAC;IAC1B,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,GAAG,CAAC,YAAW,CAAC,CAAC,CAAC;EACzB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO,EAAE,SAASA,OAAOA,CAACC,QAAQ,EAAE;IAClC,IAAI,CAACA,QAAQ,EAAEA,QAAQ,GAAGX,GAAG,CAACG,IAAI,CAACS,EAAE,CAACD,QAAQ;IAE9C,IAAI,CAACE,OAAO,IAAI,CAACA,OAAO,CAACC,GAAG,EAAE;MAC5BH,QAAQ,CAACX,GAAG,CAACG,IAAI,CAACY,KAAK,CACrB,IAAIC,KAAK,CAAC,oDAAoD,CAAC,EAC/D;QAAEC,IAAI,EAAE;MAAwC,CAClD,CAAC,CAAC;MACF;IACF;IAEA,IAAIC,IAAI,GAAG,CAAC,eAAe,EAAE,mBAAmB,EAAE,eAAe,CAAC;IAClE,IAAIC,MAAM,GAAG,EAAE;IAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAIE,MAAM,GAAG,EAAE;MACf,IAAI,IAAI,CAACf,SAAS,EAAEe,MAAM,GAAG,IAAI,CAACf,SAAS,GAAG,GAAG;MACjDY,MAAM,CAACC,CAAC,CAAC,GAAGP,OAAO,CAACC,GAAG,CAACQ,MAAM,GAAGJ,IAAI,CAACE,CAAC,CAAC,CAAC;MACzC,IAAI,CAACD,MAAM,CAACC,CAAC,CAAC,IAAIF,IAAI,CAACE,CAAC,CAAC,KAAK,eAAe,EAAE;QAC7CT,QAAQ,CAACX,GAAG,CAACG,IAAI,CAACY,KAAK,CACrB,IAAIC,KAAK,CAAC,WAAW,GAAGM,MAAM,GAAGJ,IAAI,CAACE,CAAC,CAAC,GAAG,WAAW,CAAC,EACzD;UAAEH,IAAI,EAAE;QAAwC,CAChD,CAAC,CAAC;QACF;MACF;IACF;IAEA,IAAI,CAACM,OAAO,GAAG,KAAK;IACpBvB,GAAG,CAACK,WAAW,CAACmB,KAAK,CAAC,IAAI,EAAEL,MAAM,CAAC;IACnCR,QAAQ,CAAC,CAAC;EACZ;AAEF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}