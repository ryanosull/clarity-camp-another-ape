{"ast":null,"code":"const {\n  CID\n} = require('multiformats');\nconst Uploader = require('s3-streaming-upload').Uploader;\nconst streamUploadFile = (s3, params) => new Promise((resolve, reject) => {\n  const request = new Uploader({\n    service: s3,\n    objectParams: {\n      ACL: 'public-read'\n    },\n    ...params\n  });\n  request.send((err, data) => {\n    if (err) {\n      reject(err);\n    }\n    const {\n      ETag\n    } = data;\n    const hash = ETag.replace(/^\"|\"$/g, '');\n    const cidObj = CID.parse(hash);\n    let cidv0;\n    const cidv1 = cidObj.toV1().toString();\n    try {\n      cidv0 = cidObj.toV0().toString();\n    } catch (e) {\n      // fallback when cbor is used\n      cidv0 = cidv1;\n    }\n    resolve({\n      hash: cidv1,\n      hashV0: cidv0\n    });\n  });\n});\nmodule.exports = streamUploadFile;","map":{"version":3,"names":["CID","require","Uploader","streamUploadFile","s3","params","Promise","resolve","reject","request","service","objectParams","ACL","send","err","data","ETag","hash","replace","cidObj","parse","cidv0","cidv1","toV1","toString","toV0","e","hashV0","module","exports"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@fleekhq/fleek-storage-js/utils/stream-upload.js"],"sourcesContent":["const { CID } = require('multiformats');\nconst Uploader = require('s3-streaming-upload').Uploader;\n\nconst streamUploadFile = (s3, params) => (new Promise((resolve, reject) => {\n  const request = new Uploader({\n    service: s3,\n    objectParams: {\n      ACL: 'public-read',\n    },\n    ...params,\n  });\n\n  request.send((err, data) => {\n    if (err) {\n      reject(err);\n    }\n    const { ETag } = data;\n\n    const hash = ETag.replace(/^\"|\"$/g, '');\n\n    const cidObj = CID.parse(hash);\n  \n    let cidv0;\n  \n    const cidv1 = cidObj.toV1().toString();\n\n    try {\n      cidv0 = cidObj.toV0().toString();\n    } catch (e) {\n      // fallback when cbor is used\n      cidv0 = cidv1;\n    }\n\n    resolve ({ hash: cidv1, hashV0: cidv0 });\n  });\n}));\n\nmodule.exports = streamUploadFile;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,cAAc,CAAC;AACvC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,qBAAqB,CAAC,CAACC,QAAQ;AAExD,MAAMC,gBAAgB,GAAGA,CAACC,EAAE,EAAEC,MAAM,KAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EACzE,MAAMC,OAAO,GAAG,IAAIP,QAAQ,CAAC;IAC3BQ,OAAO,EAAEN,EAAE;IACXO,YAAY,EAAE;MACZC,GAAG,EAAE;IACP,CAAC;IACD,GAAGP;EACL,CAAC,CAAC;EAEFI,OAAO,CAACI,IAAI,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;IAC1B,IAAID,GAAG,EAAE;MACPN,MAAM,CAACM,GAAG,CAAC;IACb;IACA,MAAM;MAAEE;IAAK,CAAC,GAAGD,IAAI;IAErB,MAAME,IAAI,GAAGD,IAAI,CAACE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IAEvC,MAAMC,MAAM,GAAGnB,GAAG,CAACoB,KAAK,CAACH,IAAI,CAAC;IAE9B,IAAII,KAAK;IAET,MAAMC,KAAK,GAAGH,MAAM,CAACI,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAEtC,IAAI;MACFH,KAAK,GAAGF,MAAM,CAACM,IAAI,CAAC,CAAC,CAACD,QAAQ,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOE,CAAC,EAAE;MACV;MACAL,KAAK,GAAGC,KAAK;IACf;IAEAf,OAAO,CAAE;MAAEU,IAAI,EAAEK,KAAK;MAAEK,MAAM,EAAEN;IAAM,CAAC,CAAC;EAC1C,CAAC,CAAC;AACJ,CAAC,CAAE;AAEHO,MAAM,CAACC,OAAO,GAAG1B,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}