{"ast":null,"code":"const {\n  EventEmitter\n} = require('events');\nconst aws = require('aws-sdk');\nclass Uploader extends EventEmitter {\n  // Constructor\n  constructor({\n    accessKey,\n    secretKey,\n    sessionToken,\n    region,\n    stream,\n    objectName,\n    objectParams,\n    bucket,\n    partSize,\n    service,\n    debug\n  }, cb) {\n    super();\n    this.cb = cb;\n    aws.config.update({\n      accessKeyId: accessKey,\n      secretAccessKey: secretKey,\n      sessionToken,\n      region: region || undefined\n    });\n    const params = {\n      Bucket: bucket,\n      Key: objectName,\n      Body: stream\n    };\n    for (const k in objectParams || {}) {\n      if (!params[k]) {\n        params[k] = objectParams[k];\n      }\n    }\n    this.objectName = objectName;\n    this.objectParams = params;\n    this.timeout = 300000;\n    this.debug = debug || false;\n    if (!this.objectParams.Bucket) {\n      throw new Error('Bucket must be given');\n    }\n    this.upload = new aws.S3.ManagedUpload({\n      partSize: partSize || 10 * 1024 * 1024,\n      queueSize: 4,\n      service,\n      params\n    });\n    // Progress event\n    this.upload.on('httpUploadProgress', progress => {\n      if (this.debug) {\n        console.log(`${progress.loaded} / ${progress.total}`);\n      }\n    });\n  }\n\n  // Send stream\n  send(callback) {\n    this.upload.send((err, data) => {\n      if (err) {\n        console.log(err, data);\n      }\n      callback(err, data);\n    });\n  }\n}\nmodule.exports = {\n  Uploader\n};","map":{"version":3,"names":["EventEmitter","require","aws","Uploader","constructor","accessKey","secretKey","sessionToken","region","stream","objectName","objectParams","bucket","partSize","service","debug","cb","config","update","accessKeyId","secretAccessKey","undefined","params","Bucket","Key","Body","k","timeout","Error","upload","S3","ManagedUpload","queueSize","on","progress","console","log","loaded","total","send","callback","err","data","module","exports"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/s3-streaming-upload/src/index.js"],"sourcesContent":["const { EventEmitter } = require('events');\n\nconst aws = require('aws-sdk');\n\nclass Uploader extends EventEmitter {\n  // Constructor\n  constructor({\n    accessKey,\n    secretKey,\n    sessionToken,\n    region,\n    stream,\n    objectName,\n    objectParams,\n    bucket,\n    partSize,\n    service,\n    debug,\n  }, cb) {\n    super();\n    this.cb = cb;\n    aws.config.update({\n      accessKeyId: accessKey,\n      secretAccessKey: secretKey,\n      sessionToken,\n      region: region || undefined,\n    });\n\n    const params = {\n      Bucket: bucket,\n      Key: objectName,\n      Body: stream,\n    };\n\n    for (const k in objectParams || {}) {\n      if (!params[k]) {\n        params[k] = objectParams[k];\n      }\n    }\n\n    this.objectName = objectName;\n    this.objectParams = params;\n    this.timeout = 300000;\n    this.debug = debug || false;\n\n    if (!this.objectParams.Bucket) {\n      throw new Error('Bucket must be given');\n    }\n\n    this.upload = new aws.S3.ManagedUpload({\n      partSize: partSize || 10 * 1024 * 1024,\n      queueSize: 4,\n      service,\n      params,\n    });\n    // Progress event\n    this.upload.on('httpUploadProgress', (progress) => {\n      if (this.debug) {\n        console.log(`${progress.loaded} / ${progress.total}`);\n      }\n    });\n  }\n\n  // Send stream\n  send(callback) {\n    this.upload.send((err, data) => {\n      if (err) {\n        console.log(err, data);\n      }\n      callback(err, data);\n    });\n  }\n}\n\nmodule.exports = { Uploader };\n"],"mappings":"AAAA,MAAM;EAAEA;AAAa,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE1C,MAAMC,GAAG,GAAGD,OAAO,CAAC,SAAS,CAAC;AAE9B,MAAME,QAAQ,SAASH,YAAY,CAAC;EAClC;EACAI,WAAWA,CAAC;IACVC,SAAS;IACTC,SAAS;IACTC,YAAY;IACZC,MAAM;IACNC,MAAM;IACNC,UAAU;IACVC,YAAY;IACZC,MAAM;IACNC,QAAQ;IACRC,OAAO;IACPC;EACF,CAAC,EAAEC,EAAE,EAAE;IACL,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,EAAE,GAAGA,EAAE;IACZd,GAAG,CAACe,MAAM,CAACC,MAAM,CAAC;MAChBC,WAAW,EAAEd,SAAS;MACtBe,eAAe,EAAEd,SAAS;MAC1BC,YAAY;MACZC,MAAM,EAAEA,MAAM,IAAIa;IACpB,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAG;MACbC,MAAM,EAAEX,MAAM;MACdY,GAAG,EAAEd,UAAU;MACfe,IAAI,EAAEhB;IACR,CAAC;IAED,KAAK,MAAMiB,CAAC,IAAIf,YAAY,IAAI,CAAC,CAAC,EAAE;MAClC,IAAI,CAACW,MAAM,CAACI,CAAC,CAAC,EAAE;QACdJ,MAAM,CAACI,CAAC,CAAC,GAAGf,YAAY,CAACe,CAAC,CAAC;MAC7B;IACF;IAEA,IAAI,CAAChB,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,YAAY,GAAGW,MAAM;IAC1B,IAAI,CAACK,OAAO,GAAG,MAAM;IACrB,IAAI,CAACZ,KAAK,GAAGA,KAAK,IAAI,KAAK;IAE3B,IAAI,CAAC,IAAI,CAACJ,YAAY,CAACY,MAAM,EAAE;MAC7B,MAAM,IAAIK,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEA,IAAI,CAACC,MAAM,GAAG,IAAI3B,GAAG,CAAC4B,EAAE,CAACC,aAAa,CAAC;MACrClB,QAAQ,EAAEA,QAAQ,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI;MACtCmB,SAAS,EAAE,CAAC;MACZlB,OAAO;MACPQ;IACF,CAAC,CAAC;IACF;IACA,IAAI,CAACO,MAAM,CAACI,EAAE,CAAC,oBAAoB,EAAGC,QAAQ,IAAK;MACjD,IAAI,IAAI,CAACnB,KAAK,EAAE;QACdoB,OAAO,CAACC,GAAG,CAAE,GAAEF,QAAQ,CAACG,MAAO,MAAKH,QAAQ,CAACI,KAAM,EAAC,CAAC;MACvD;IACF,CAAC,CAAC;EACJ;;EAEA;EACAC,IAAIA,CAACC,QAAQ,EAAE;IACb,IAAI,CAACX,MAAM,CAACU,IAAI,CAAC,CAACE,GAAG,EAAEC,IAAI,KAAK;MAC9B,IAAID,GAAG,EAAE;QACPN,OAAO,CAACC,GAAG,CAACK,GAAG,EAAEC,IAAI,CAAC;MACxB;MACAF,QAAQ,CAACC,GAAG,EAAEC,IAAI,CAAC;IACrB,CAAC,CAAC;EACJ;AACF;AAEAC,MAAM,CAACC,OAAO,GAAG;EAAEzC;AAAS,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}