{"ast":null,"code":"import C, { createContext, useContext, useReducer } from 'react';\nimport { authenticate, showBlockstackConnect, openContractCall, openContractDeploy, openSTXTransfer, openProfileUpdateRequestPopup, openSignatureRequestPopup, openStructuredDataSignatureRequestPopup, openPsbtRequestPopup } from '@stacks/connect';\nexport * from '@stacks/connect';\nvar w = Object.defineProperty,\n  _ = Object.defineProperties;\nvar I = Object.getOwnPropertyDescriptors;\nvar O = Object.getOwnPropertySymbols;\nvar E = Object.prototype.hasOwnProperty,\n  H = Object.prototype.propertyIsEnumerable;\nvar S = (n, e, a) => e in n ? w(n, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: a\n  }) : n[e] = a,\n  i = (n, e) => {\n    for (var a in e || (e = {})) E.call(e, a) && S(n, a, e[a]);\n    if (O) for (var a of O(e)) H.call(e, a) && S(n, a, e[a]);\n    return n;\n  },\n  s = (n, e) => _(n, I(e));\nvar D = {\n    isOpen: !1,\n    isAuthenticating: !1,\n    authData: void 0,\n    userSession: void 0,\n    authOptions: {\n      redirectTo: \"\",\n      manifestPath: \"\",\n      onFinish: () => null,\n      authOrigin: void 0,\n      sendToSignIn: !1,\n      appDetails: {\n        name: \"\",\n        icon: \"\"\n      }\n    }\n  },\n  B = (n, {\n    type: e,\n    payload: a\n  }) => {\n    switch (e) {\n      case \"data/update-auth-options\":\n        return s(i({}, n), {\n          authOptions: i(i({}, n.authOptions), a)\n        });\n      default:\n        throw new Error(`Unhandled action type: ${e}`);\n    }\n  },\n  c = createContext(D),\n  d = createContext(void 0),\n  P = ({\n    authOptions: n,\n    children: e\n  }) => {\n    let [a, t] = useReducer(B, D);\n    return C.createElement(c.Provider, {\n      value: s(i({}, a), {\n        authOptions: n\n      })\n    }, C.createElement(d.Provider, {\n      value: t\n    }, e));\n  };\nvar j = ({\n  authOptions: n,\n  children: e\n}) => C.createElement(P, {\n  authOptions: n\n}, e);\nvar W = () => {\n    let n = useContext(d);\n    if (!n) throw new Error(\"This must be used within the ConnectProvider component.\");\n    return n;\n  },\n  Y = () => {\n    let {\n        isOpen: n,\n        isAuthenticating: e,\n        authData: a,\n        authOptions: t,\n        userSession: T\n      } = useContext(c),\n      A = W(),\n      m = o => A({\n        type: \"data/update-auth-options\",\n        payload: o\n      }),\n      v = (o, r, u) => {\n        if (o) {\n          let p = s(i(i({}, t), r), {\n            onFinish: X => {\n              var l;\n              (l = t.onFinish) == null || l.call(t, X);\n            },\n            sendToSignIn: !0\n          });\n          authenticate(p, u);\n          return;\n        } else showBlockstackConnect(s(i({}, t), {\n          sendToSignIn: !1\n        }));\n        t && m(t);\n      },\n      y = (o = {}, r) => {\n        authenticate(s(i(i({}, t), o), {\n          onFinish: u => {\n            var p;\n            (p = t.onFinish) == null || p.call(t, u);\n          }\n        }), r);\n      };\n    function R(o, r) {\n      return openContractCall(s(i({}, o), {\n        authOrigin: t.authOrigin,\n        appDetails: t.appDetails\n      }), r);\n    }\n    function x(o, r) {\n      return openContractDeploy(s(i({}, o), {\n        authOrigin: t.authOrigin,\n        appDetails: t.appDetails\n      }), r);\n    }\n    function U(o, r) {\n      return openSTXTransfer(s(i({}, o), {\n        authOrigin: t.authOrigin,\n        appDetails: t.appDetails\n      }), r);\n    }\n    function k(o, r) {\n      return openProfileUpdateRequestPopup(s(i({}, o), {\n        authOrigin: t.authOrigin,\n        appDetails: t.appDetails\n      }), r);\n    }\n    function q(o, r) {\n      return openSignatureRequestPopup(s(i({}, o), {\n        authOrigin: t.authOrigin,\n        appDetails: t.appDetails\n      }), r);\n    }\n    function F(o, r) {\n      return openStructuredDataSignatureRequestPopup(s(i({}, o), {\n        authOrigin: t.authOrigin,\n        appDetails: t.appDetails\n      }), r);\n    }\n    function b(o, r) {\n      return openPsbtRequestPopup(s(i({}, o), {\n        authOrigin: t.authOrigin,\n        appDetails: t.appDetails\n      }), r);\n    }\n    return {\n      isOpen: n,\n      isAuthenticating: e,\n      authData: a,\n      authOptions: t,\n      userSession: T,\n      doOpenAuth: v,\n      doAuth: y,\n      authenticate: authenticate,\n      doContractCall: R,\n      doContractDeploy: x,\n      doSTXTransfer: U,\n      doProfileUpdate: k,\n      sign: q,\n      signStructuredData: F,\n      signPsbt: b\n    };\n  };\nexport { j as Connect, Y as useConnect };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect-react/src/react/components/connect/index.tsx","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect-react/src/react/components/connect/context.tsx","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect-react/src/react/hooks/use-connect.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect-react/src/index.ts"],"sourcesContent":["import React from 'react';\nimport { ConnectProvider } from './context';\nimport { AuthOptions } from '@stacks/connect';\n\n/**\n * Usage\n *\n *\n * const auth = {\n      manifestPath: '/static/manifest.json',\n      redirectTo: '/',\n      finished: ({userSession}) => {\n        doFinishSignIn();\n      },\n      authOrigin,\n      appDetails: {\n        name: 'Wink',\n        icon: 'url'\n      }\n    }\n *\n * <Connect authOptions={authOptions} />\n */\nconst Connect = ({ authOptions, children }: { authOptions: AuthOptions; children: any }) => {\n  return <ConnectProvider authOptions={authOptions}>{children}</ConnectProvider>;\n};\n\nexport { Connect };\n","import React, { useReducer, createContext } from 'react';\nimport { AuthOptions, FinishedAuthData, UserSession } from '@stacks/connect';\n\nenum States {\n  UPDATE_AUTH_OPTIONS = 'data/update-auth-options',\n}\n\ntype Action = { type: string; payload?: any };\n\ntype Dispatch = (action: Action) => void;\n\ntype State = {\n  isOpen: boolean;\n  isAuthenticating: boolean;\n  authData?: FinishedAuthData;\n  authOptions: AuthOptions;\n  userSession?: UserSession;\n};\n\nconst initialState: State = {\n  isOpen: false,\n  isAuthenticating: false,\n  authData: undefined,\n  userSession: undefined,\n  authOptions: {\n    redirectTo: '',\n    manifestPath: '',\n    onFinish: () => null,\n    authOrigin: undefined,\n    sendToSignIn: false,\n    appDetails: {\n      name: '',\n      icon: '',\n    },\n  },\n};\n\nconst connectReducer = (state: State, { type, payload }: { type: string; payload?: any }) => {\n  switch (type) {\n    case States.UPDATE_AUTH_OPTIONS: {\n      return {\n        ...state,\n        authOptions: {\n          ...state.authOptions,\n          ...payload,\n        },\n      };\n    }\n\n    default: {\n      throw new Error(`Unhandled action type: ${type}`);\n    }\n  }\n};\n\nconst ConnectContext = createContext<State>(initialState);\n\nconst ConnectDispatchContext = createContext<Dispatch | undefined>(undefined);\n\nconst ConnectProvider = ({\n  authOptions,\n  children,\n}: {\n  authOptions: AuthOptions;\n  children: any;\n}) => {\n  const [state, dispatch] = useReducer(connectReducer, initialState);\n\n  return (\n    <ConnectContext.Provider value={{ ...state, authOptions }}>\n      <ConnectDispatchContext.Provider value={dispatch}>{children}</ConnectDispatchContext.Provider>\n    </ConnectContext.Provider>\n  );\n};\n\nexport {\n  initialState,\n  connectReducer,\n  ConnectContext,\n  ConnectDispatchContext,\n  ConnectProvider,\n  States,\n};\n","import {\n  authenticate,\n  AuthOptions,\n  ContractCallOptions,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  ContractDeployOptions,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  FinishedAuthData,\n  openContractCall,\n  openContractDeploy,\n  openProfileUpdateRequestPopup,\n  openPsbtRequestPopup,\n  openSignatureRequestPopup,\n  openStructuredDataSignatureRequestPopup,\n  openSTXTransfer,\n  PsbtRequestOptions,\n  ProfileUpdateRequestOptions,\n  showBlockstackConnect,\n  SignatureRequestOptions,\n  STXTransferOptions,\n  STXTransferRegularOptions,\n  STXTransferSponsoredOptions,\n  StacksProvider,\n} from '@stacks/connect';\nimport { StructuredDataSignatureRequestOptions } from '@stacks/connect/src/types/structuredDataSignature';\nimport { useContext } from 'react';\nimport { ConnectContext, ConnectDispatchContext, States } from '../components/connect/context';\n\nconst useConnectDispatch = () => {\n  const dispatch = useContext(ConnectDispatchContext);\n  if (!dispatch) {\n    throw new Error('This must be used within the ConnectProvider component.');\n  }\n  return dispatch;\n};\n\nexport const useConnect = () => {\n  // todo: add custom provider injection in connect context\n  const { isOpen, isAuthenticating, authData, authOptions, userSession } =\n    useContext(ConnectContext);\n\n  const dispatch = useConnectDispatch();\n\n  const doUpdateAuthOptions = (payload: Partial<AuthOptions>) => {\n    return dispatch({ type: States.UPDATE_AUTH_OPTIONS, payload });\n  };\n\n  /**\n   *\n   * @param signIn Whether the user should be sent to sign in\n   * @param options\n   */\n  const doOpenAuth = (\n    signIn?: boolean,\n    options?: Partial<AuthOptions>,\n    provider?: StacksProvider\n  ) => {\n    if (signIn) {\n      const _options: AuthOptions = {\n        ...authOptions,\n        ...options,\n        onFinish: (payload: FinishedAuthData) => {\n          authOptions.onFinish?.(payload);\n        },\n        sendToSignIn: true,\n      };\n      void authenticate(_options, provider);\n      return;\n    } else {\n      showBlockstackConnect({\n        ...authOptions,\n        sendToSignIn: false,\n      });\n    }\n    authOptions && doUpdateAuthOptions(authOptions);\n  };\n\n  const doAuth = (options: Partial<AuthOptions> = {}, provider?: StacksProvider) => {\n    void authenticate(\n      {\n        ...authOptions,\n        ...options,\n        onFinish: (payload: FinishedAuthData) => {\n          authOptions.onFinish?.(payload);\n        },\n      },\n      provider\n    );\n  };\n\n  function doContractCall(\n    options: ContractCallOptions | ContractCallRegularOptions | ContractCallSponsoredOptions,\n    provider?: StacksProvider\n  ) {\n    return openContractCall(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function doContractDeploy(\n    options: ContractDeployOptions | ContractDeployRegularOptions | ContractDeploySponsoredOptions,\n    provider?: StacksProvider\n  ) {\n    return openContractDeploy(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function doSTXTransfer(\n    options: STXTransferOptions | STXTransferRegularOptions | STXTransferSponsoredOptions,\n    provider?: StacksProvider\n  ) {\n    return openSTXTransfer(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function doProfileUpdate(options: ProfileUpdateRequestOptions, provider?: StacksProvider) {\n    return openProfileUpdateRequestPopup(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function sign(options: SignatureRequestOptions, provider?: StacksProvider) {\n    return openSignatureRequestPopup(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function signStructuredData(\n    options: StructuredDataSignatureRequestOptions,\n    provider?: StacksProvider\n  ) {\n    return openStructuredDataSignatureRequestPopup(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function signPsbt(options: PsbtRequestOptions, provider?: StacksProvider) {\n    return openPsbtRequestPopup(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  return {\n    isOpen,\n    isAuthenticating,\n    authData,\n    authOptions,\n    userSession,\n    doOpenAuth,\n    doAuth,\n    authenticate,\n    doContractCall,\n    doContractDeploy,\n    doSTXTransfer,\n    doProfileUpdate,\n    sign,\n    signStructuredData,\n    signPsbt,\n  };\n};\n","export * from './react';\nexport * from '@stacks/connect';\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}