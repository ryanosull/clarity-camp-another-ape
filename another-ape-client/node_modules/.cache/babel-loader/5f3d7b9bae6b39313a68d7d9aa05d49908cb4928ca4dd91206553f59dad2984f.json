{"ast":null,"code":"import { AppConfig, UserSession } from '@stacks/auth';\nexport * from '@stacks/auth';\nimport { decodeToken, SECP256K1Client, createUnsecuredToken, TokenSigner } from 'jsontokens';\nimport { StacksTestnet } from '@stacks/network';\nimport { ChainID, serializeCV, serializePostCondition, deserializeTransaction } from '@stacks/transactions';\nimport { defineCustomElements } from '@stacks/connect-ui/loader';\nvar X = Object.defineProperty,\n  M = Object.defineProperties;\nvar L = Object.getOwnPropertyDescriptors;\nvar T = Object.getOwnPropertySymbols;\nvar D = Object.prototype.hasOwnProperty,\n  R = Object.prototype.propertyIsEnumerable;\nvar b = (e, t, n) => t in e ? X(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: n\n  }) : e[t] = n,\n  a = (e, t) => {\n    for (var n in t || (t = {})) D.call(t, n) && b(e, n, t[n]);\n    if (T) for (var n of T(t)) R.call(t, n) && b(e, n, t[n]);\n    return e;\n  },\n  c = (e, t) => M(e, L(t));\nvar f = (e, t) => {\n  var n = {};\n  for (var r in e) D.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);\n  if (e != null && T) for (var r of T(e)) t.indexOf(r) < 0 && R.call(e, r) && (n[r] = e[r]);\n  return n;\n};\nfunction d() {\n  return window.StacksProvider || window.BlockstackProvider;\n}\nfunction zt() {\n  return !!d();\n}\nvar Ht = \"https://app.blockstack.org\",\n  B = \"7.4.0\";\ntypeof window != \"undefined\" && (window.__CONNECT_VERSION__ = B);\nvar z = () => {\n    let e = navigator.userAgent;\n    return /android/i.test(e) || /iPad|iPhone|iPod/.test(e) ? !0 : /windows phone/i.test(e);\n  },\n  Qt = () => !z(),\n  U = e => {\n    if (!e) {\n      let t = new AppConfig([\"store_write\"], document.location.href);\n      e = new UserSession({\n        appConfig: t\n      });\n    }\n    return e;\n  },\n  A = async (e, t = d()) => {\n    if (!t) throw new Error(\"[Connect] No installed Stacks wallet found\");\n    let {\n        redirectTo: n = \"/\",\n        manifestPath: r,\n        onFinish: s,\n        onCancel: o,\n        sendToSignIn: i = !1,\n        userSession: p,\n        appDetails: u\n      } = e,\n      l = U(p);\n    l.isUserSignedIn() && l.signUserOut();\n    let S = l.generateAndStoreTransitKey(),\n      F = l.makeAuthRequest(S, `${document.location.origin}${n}`, `${document.location.origin}${r}`, l.appConfig.scopes, void 0, void 0, {\n        sendToSignIn: i,\n        appDetails: u,\n        connectVersion: B\n      });\n    try {\n      let P = await t.authenticationRequest(F);\n      await l.handlePendingSignIn(P);\n      let h = decodeToken(P),\n        $ = h == null ? void 0 : h.payload;\n      s == null || s({\n        authResponse: P,\n        authResponsePayload: $,\n        userSession: l\n      });\n    } catch (P) {\n      console.error(\"[Connect] Error during auth request\", P), o == null || o();\n    }\n  },\n  Zt = async e => (e = U(e), e.isUserSignedIn() ? e.loadUserData() : e.isSignInPending() ? e.handlePendingSignIn() : null);\nvar Y = Array.from({\n  length: 256\n}, (e, t) => t.toString(16).padStart(2, \"0\"));\nfunction m(e) {\n  if (!(e instanceof Uint8Array)) throw new Error(\"Uint8Array expected\");\n  let t = \"\";\n  for (let n of e) t += Y[n];\n  return t;\n}\nfunction I(e) {\n  if (typeof e != \"string\") throw new TypeError(`hexToBytes: expected string, got ${typeof e}`);\n  let t = e.length % 2 ? `0${e}` : e,\n    n = new Uint8Array(t.length / 2);\n  for (let r = 0; r < n.length; r++) {\n    let s = r * 2,\n      o = t.slice(s, s + 2),\n      i = Number.parseInt(o, 16);\n    if (Number.isNaN(i) || i < 0) throw new Error(\"Invalid byte sequence\");\n    n[r] = i;\n  }\n  return n;\n}\nvar G = (r => (r.ContractCall = \"contract_call\", r.ContractDeploy = \"smart_contract\", r.STXTransfer = \"token_transfer\", r))(G || {}),\n  W = (o => (o.BUFFER = \"buffer\", o.UINT = \"uint\", o.INT = \"int\", o.PRINCIPAL = \"principal\", o.BOOL = \"bool\", o))(W || {});\nvar x = e => {\n  let t = e;\n  if (!t) {\n    let n = new AppConfig([\"store_write\"], document.location.href);\n    t = new UserSession({\n      appConfig: n\n    });\n  }\n  return t;\n};\nfunction g(e) {\n  try {\n    return x(e).loadUserData().appPrivateKey;\n  } catch (t) {\n    return !1;\n  }\n}\nvar y = e => {\n  let n = x(e).loadUserData().appPrivateKey,\n    r = SECP256K1Client.derivePublicKey(n);\n  return {\n    privateKey: n,\n    publicKey: r\n  };\n};\nfunction st(e) {\n  var p;\n  let {\n    stxAddress: t,\n    userSession: n,\n    network: r\n  } = e;\n  if (t) return t;\n  if (!n || !r) return;\n  let s = (p = n == null ? void 0 : n.loadUserData().profile) == null ? void 0 : p.stxAddress,\n    o = {\n      [ChainID.Mainnet]: \"mainnet\",\n      [ChainID.Testnet]: \"testnet\"\n    };\n  return s == null ? void 0 : s[o[r.chainId]];\n}\nfunction at(e) {\n  let t = e.network || new StacksTestnet(),\n    n = x(e.userSession),\n    r = c(a({}, e), {\n      network: t,\n      userSession: n\n    });\n  return a({\n    stxAddress: st(r)\n  }, r);\n}\nfunction E(e) {\n  return e.map(t => m(serializePostCondition(t)));\n}\nasync function C(e, t) {\n  let {\n    postConditions: n\n  } = e;\n  return n && typeof n[0] != \"string\" && (n = E(n)), new TokenSigner(\"ES256k\", t).signAsync(c(a({}, e), {\n    postConditions: n\n  }));\n}\nfunction w(e) {\n  let {\n    postConditions: t\n  } = e;\n  return t && typeof t[0] != \"string\" && (t = E(t)), createUnsecuredToken(c(a({}, e), {\n    postConditions: t\n  }));\n}\nvar it = async ({\n    token: e,\n    options: t\n  }, n) => {\n    var r, s, o;\n    try {\n      let i = await n.transactionRequest(e),\n        {\n          txRaw: p\n        } = i,\n        u = I(p.replace(/^0x/, \"\")),\n        l = deserializeTransaction(u);\n      if (\"sponsored\" in t && t.sponsored) {\n        (r = t.onFinish) == null || r.call(t, c(a({}, i), {\n          stacksTransaction: l\n        }));\n        return;\n      }\n      (s = t.onFinish) == null || s.call(t, c(a({}, i), {\n        stacksTransaction: l\n      }));\n    } catch (i) {\n      console.error(\"[Connect] Error during transaction request\", i), (o = t.onCancel) == null || o.call(t);\n    }\n  },\n  ct = async e => {\n    let p = e,\n      {\n        functionArgs: t,\n        appDetails: n,\n        userSession: r\n      } = p,\n      s = f(p, [\"functionArgs\", \"appDetails\", \"userSession\"]),\n      o = t.map(u => typeof u == \"string\" ? u : m(serializeCV(u)));\n    if (g(r)) {\n      let {\n          privateKey: u,\n          publicKey: l\n        } = y(r),\n        S = c(a({}, s), {\n          functionArgs: o,\n          txType: \"contract_call\",\n          publicKey: l\n        });\n      return n && (S.appDetails = n), C(S, u);\n    }\n    let i = c(a({}, s), {\n      functionArgs: o,\n      txType: \"contract_call\"\n    });\n    return n && (i.appDetails = n), w(i);\n  },\n  pt = async e => {\n    let o = e,\n      {\n        appDetails: t,\n        userSession: n\n      } = o,\n      r = f(o, [\"appDetails\", \"userSession\"]);\n    if (g(n)) {\n      let {\n          privateKey: i,\n          publicKey: p\n        } = y(n),\n        u = c(a({}, r), {\n          publicKey: p,\n          txType: \"smart_contract\"\n        });\n      return t && (u.appDetails = t), C(u, i);\n    }\n    let s = c(a({}, r), {\n      txType: \"smart_contract\"\n    });\n    return t && (s.appDetails = t), w(s);\n  },\n  ut = async e => {\n    let i = e,\n      {\n        amount: t,\n        appDetails: n,\n        userSession: r\n      } = i,\n      s = f(i, [\"amount\", \"appDetails\", \"userSession\"]);\n    if (g(r)) {\n      let {\n          privateKey: p,\n          publicKey: u\n        } = y(r),\n        l = c(a({}, s), {\n          amount: t.toString(10),\n          publicKey: u,\n          txType: \"token_transfer\"\n        });\n      return n && (l.appDetails = n), C(l, p);\n    }\n    let o = c(a({}, s), {\n      amount: t.toString(10),\n      txType: \"token_transfer\"\n    });\n    return n && (o.appDetails = n), w(o);\n  };\nasync function k(e, t, n) {\n  let r = await t(a(a({}, at(e)), e));\n  return it({\n    token: r,\n    options: e\n  }, n);\n}\nfunction le(e, t = d()) {\n  if (!t) throw new Error(\"[Connect] No installed Stacks wallet found\");\n  return k(e, ct, t);\n}\nfunction de(e, t = d()) {\n  if (!t) throw new Error(\"[Connect] No installed Stacks wallet found\");\n  return k(e, pt, t);\n}\nfunction fe(e, t = d()) {\n  if (!t) throw new Error(\"[Connect] No installed Stacks wallet found\");\n  return k(e, ut, t);\n}\nasync function gt(e, t) {\n  return new TokenSigner(\"ES256k\", t).signAsync(a({}, e));\n}\nfunction yt(e) {\n  let t = e.network || new StacksTestnet(),\n    n = x(e.userSession),\n    r = c(a({}, e), {\n      network: t,\n      userSession: n\n    });\n  return a({}, r);\n}\nasync function xt({\n  token: e,\n  options: t\n}, n) {\n  var r, s;\n  if (!n) throw new Error(\"[Connect] No installed Stacks wallet found\");\n  try {\n    let o = await n.psbtRequest(e);\n    (r = t.onFinish) == null || r.call(t, o);\n  } catch (o) {\n    console.error(\"[Connect] Error during psbt request\", o), (s = t.onCancel) == null || s.call(t);\n  }\n}\nvar St = async e => {\n  let p = e,\n    {\n      allowedSighash: t,\n      hex: n,\n      signAtIndex: r,\n      userSession: s\n    } = p,\n    o = f(p, [\"allowedSighash\", \"hex\", \"signAtIndex\", \"userSession\"]);\n  if (g(s)) {\n    let {\n        privateKey: u,\n        publicKey: l\n      } = y(s),\n      S = c(a({}, o), {\n        allowedSighash: t,\n        hex: n,\n        signAtIndex: r,\n        publicKey: l\n      });\n    return gt(S, u);\n  }\n  let i = a({}, o);\n  return createUnsecuredToken(i);\n};\nasync function mt(e, t, n) {\n  let r = await t(a(a({}, yt(e)), e));\n  return xt({\n    token: r,\n    options: e\n  }, n);\n}\nfunction he(e, t = d()) {\n  return mt(e, St, t);\n}\nfunction Ct(e) {\n  var i;\n  let {\n    userSession: t,\n    network: n\n  } = e;\n  if (!t || !n) return;\n  let r = (i = t == null ? void 0 : t.loadUserData().profile) == null ? void 0 : i.stxAddress,\n    s = {\n      [ChainID.Mainnet]: \"mainnet\",\n      [ChainID.Testnet]: \"testnet\"\n    };\n  return r == null ? void 0 : r[s[n.chainId]];\n}\nasync function wt(e, t) {\n  return new TokenSigner(\"ES256k\", t).signAsync(a({}, e));\n}\nfunction O(e) {\n  let t = e.network || new StacksTestnet(),\n    n = x(e.userSession),\n    r = c(a({}, e), {\n      network: t,\n      userSession: n\n    });\n  return a({\n    stxAddress: Ct(r)\n  }, r);\n}\nasync function kt({\n  token: e,\n  options: t\n}, n) {\n  var r, s;\n  try {\n    let o = await n.signatureRequest(e);\n    (r = t.onFinish) == null || r.call(t, o);\n  } catch (o) {\n    console.error(\"[Connect] Error during signature request\", o), (s = t.onCancel) == null || s.call(t);\n  }\n}\nvar Ot = async e => {\n  let s = e,\n    {\n      userSession: t\n    } = s,\n    n = f(s, [\"userSession\"]);\n  if (g(t)) {\n    let {\n        privateKey: o,\n        publicKey: i\n      } = y(t),\n      p = c(a({}, n), {\n        publicKey: i\n      });\n    return wt(p, o);\n  }\n  let r = a({}, n);\n  return createUnsecuredToken(r);\n};\nasync function bt(e, t, n) {\n  let r = await t(a(a({}, O(e)), e));\n  return kt({\n    token: r,\n    options: e\n  }, n);\n}\nfunction Be(e, t = d()) {\n  if (!t) throw new Error(\"[Connect] No installed Stacks wallet found\");\n  return bt(e, Ot, t);\n}\nasync function Bt(e, t, n) {\n  let r = await t(a(a({}, O(e)), e));\n  return It({\n    token: r,\n    options: e\n  }, n);\n}\nfunction N(e) {\n  return c(a({}, e), {\n    message: m(serializeCV(e.message)),\n    domain: m(serializeCV(e.domain))\n  });\n}\nasync function Ut(e, t) {\n  return new TokenSigner(\"ES256k\", t).signAsync(N(e));\n}\nasync function At(e) {\n  let r = e,\n    {\n      userSession: t\n    } = r,\n    n = f(r, [\"userSession\"]);\n  if (g(t)) {\n    let {\n        privateKey: s,\n        publicKey: o\n      } = y(t),\n      i = c(a({}, n), {\n        publicKey: o\n      });\n    return Ut(i, s);\n  }\n  return createUnsecuredToken(N(e));\n}\nasync function It({\n  token: e,\n  options: t\n}, n) {\n  var r, s;\n  try {\n    let o = await n.structuredDataSignatureRequest(e);\n    (r = t.onFinish) == null || r.call(t, o);\n  } catch (o) {\n    console.error(\"[Connect] Error during signature request\", o), (s = t.onCancel) == null || s.call(t);\n  }\n}\nfunction Fe(e, t = d()) {\n  if (!t) throw new Error(\"[Connect] No installed Stacks wallet found\");\n  return Bt(e, At, t);\n}\nasync function Kt(e, t) {\n  return new TokenSigner(\"ES256k\", t).signAsync(a({}, e));\n}\nfunction Nt(e) {\n  let t = e.network || new StacksTestnet(),\n    n = x(e.userSession),\n    r = c(a({}, e), {\n      network: t,\n      userSession: n\n    });\n  return a({}, r);\n}\nasync function Ft({\n  token: e,\n  options: t\n}, n) {\n  var r, s;\n  try {\n    let o = await n.profileUpdateRequest(e);\n    (r = t.onFinish) == null || r.call(t, o);\n  } catch (o) {\n    console.error(\"[Connect] Error during signature request\", o), (s = t.onCancel) == null || s.call(t);\n  }\n}\nvar $t = async e => {\n  let o = e,\n    {\n      userSession: t,\n      profile: n\n    } = o,\n    r = f(o, [\"userSession\", \"profile\"]);\n  if (g(t)) {\n    let {\n        privateKey: i,\n        publicKey: p\n      } = y(t),\n      u = c(a({}, r), {\n        profile: n,\n        publicKey: p\n      });\n    return Kt(u, i);\n  }\n  let s = a({}, r);\n  return createUnsecuredToken(s);\n};\nasync function Xt(e, t, n) {\n  let r = await t(a(a({}, Nt(e)), e));\n  return Ft({\n    token: r,\n    options: e\n  }, n);\n}\nfunction ze(e, t = d()) {\n  if (!t) throw new Error(\"[Connect] No installed Stacks wallet found\");\n  return Xt(e, $t, t);\n}\nvar Mt = (o => (o[o.DEFAULT = 0] = \"DEFAULT\", o[o.ALL = 1] = \"ALL\", o[o.NONE = 2] = \"NONE\", o[o.SINGLE = 3] = \"SINGLE\", o[o.ANYONECANPAY = 128] = \"ANYONECANPAY\", o))(Mt || {});\nvar _t = (e, t = d()) => {\n    if (t) {\n      A(e, t);\n      return;\n    }\n    if (typeof window !== void 0) {\n      defineCustomElements(window);\n      let n = document.createElement(\"connect-modal\");\n      n.authOptions = e, document.body.appendChild(n);\n      let r = s => {\n        s.key === \"Escape\" && (document.removeEventListener(\"keydown\", r), n.remove());\n      };\n      document.addEventListener(\"keydown\", r);\n    }\n  },\n  Ze = e => _t(e);\nexport { W as ContractCallArgumentType, Mt as SignatureHash, G as TransactionTypes, A as authenticate, Ht as defaultAuthURL, Nt as getDefaultProfileUpdateRequestOptions, yt as getDefaultPsbtRequestOptions, O as getDefaultSignatureRequestOptions, y as getKeys, U as getOrCreateUserSession, d as getStacksProvider, st as getStxAddress, Zt as getUserData, x as getUserSession, g as hasAppPrivateKey, z as isMobile, zt as isStacksWalletInstalled, ct as makeContractCallToken, pt as makeContractDeployToken, $t as makeProfileUpdateToken, St as makePsbtToken, ut as makeSTXTransferToken, le as openContractCall, de as openContractDeploy, ze as openProfileUpdateRequestPopup, he as openPsbtRequestPopup, fe as openSTXTransfer, Be as openSignatureRequestPopup, Fe as openStructuredDataSignatureRequestPopup, Qt as shouldUsePopup, Ze as showBlockstackConnect, _t as showConnect, Ot as signMessage, At as signStructuredMessage };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect/src/auth.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect/src/utils.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect/src/bitcoin/psbt.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect/src/transactions/index.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/node_modules/@stacks/common/src/utils.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect/src/types/transactions.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect/src/signature/index.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect/src/signature/structuredData.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect/src/profile/index.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect/src/types/bitcoin.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect/src/ui.ts","/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/connect/src/index.ts"],"sourcesContent":["import { AppConfig, UserSession } from '@stacks/auth';\nimport { decodeToken } from 'jsontokens';\nimport type { AuthOptions, AuthResponsePayload, StacksProvider } from './types';\n\nimport { getStacksProvider } from './utils';\n\nexport const defaultAuthURL = 'https://app.blockstack.org';\n\nconst version = __VERSION__; // replaced via tsup esbuildOptions\n\nif (typeof window !== 'undefined') {\n  window.__CONNECT_VERSION__ = version;\n}\n\nexport const isMobile = () => {\n  const ua = navigator.userAgent;\n  if (/android/i.test(ua)) {\n    return true;\n  }\n  if (/iPad|iPhone|iPod/.test(ua)) {\n    return true;\n  }\n  return /windows phone/i.test(ua);\n};\n\n/**\n * mobile should not use a 'popup' type of window.\n */\nexport const shouldUsePopup = () => {\n  return !isMobile();\n};\n\nexport const getOrCreateUserSession = (userSession?: UserSession): UserSession => {\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nexport const authenticate = async (\n  authOptions: AuthOptions,\n  provider: StacksProvider = getStacksProvider()\n) => {\n  if (!provider) throw new Error('[Connect] No installed Stacks wallet found');\n\n  const {\n    redirectTo = '/',\n    manifestPath,\n    onFinish,\n    onCancel,\n    sendToSignIn = false,\n    userSession: _userSession,\n    appDetails,\n  } = authOptions;\n  const userSession = getOrCreateUserSession(_userSession);\n  if (userSession.isUserSignedIn()) {\n    userSession.signUserOut();\n  }\n  const transitKey = userSession.generateAndStoreTransitKey();\n  const authRequest = userSession.makeAuthRequest(\n    transitKey,\n    `${document.location.origin}${redirectTo}`,\n    `${document.location.origin}${manifestPath}`,\n    userSession.appConfig.scopes,\n    undefined,\n    undefined,\n    {\n      sendToSignIn,\n      appDetails,\n      connectVersion: version,\n    }\n  );\n\n  try {\n    const authResponse = await provider.authenticationRequest(authRequest);\n    await userSession.handlePendingSignIn(authResponse);\n    const token = decodeToken(authResponse);\n    const payload = token?.payload;\n    const authResponsePayload = payload as unknown as AuthResponsePayload;\n    onFinish?.({\n      authResponse,\n      authResponsePayload,\n      userSession,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during auth request', error);\n    onCancel?.();\n  }\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const getUserData = async (userSession?: UserSession) => {\n  userSession = getOrCreateUserSession(userSession);\n  if (userSession.isUserSignedIn()) {\n    return userSession.loadUserData();\n  }\n  if (userSession.isSignInPending()) {\n    return userSession.handlePendingSignIn();\n  }\n  return null;\n};\n","export function getStacksProvider() {\n  return window.StacksProvider || window.BlockstackProvider;\n}\n\nexport function isStacksWalletInstalled() {\n  return !!getStacksProvider();\n}\n","import { StacksTestnet } from '@stacks/network';\nimport { createUnsecuredToken, Json, TokenSigner } from 'jsontokens';\n\nimport { getKeys, getUserSession, hasAppPrivateKey } from '../transactions';\nimport { PsbtPayload, PsbtPopup, PsbtRequestOptions } from '../types/bitcoin';\nimport { getStacksProvider } from '../utils';\nimport { StacksProvider } from '../types';\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: PsbtPayload, privateKey: string) {\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return tokenSigner.signAsync({ ...payload } as any);\n}\n\nexport function getDefaultPsbtRequestOptions(options: PsbtRequestOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: PsbtRequestOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    ...defaults,\n  };\n}\n\nasync function openPsbtPopup({ token, options }: PsbtPopup, provider: StacksProvider) {\n  if (!provider) throw new Error('[Connect] No installed Stacks wallet found');\n\n  try {\n    const psbtResponse = await provider.psbtRequest(token);\n    options.onFinish?.(psbtResponse);\n  } catch (error) {\n    console.error('[Connect] Error during psbt request', error);\n    options.onCancel?.();\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makePsbtToken = async (options: PsbtRequestOptions) => {\n  const { allowedSighash, hex, signAtIndex, userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n\n    const payload: PsbtPayload = {\n      ..._options,\n      allowedSighash,\n      hex,\n      signAtIndex,\n      publicKey,\n    };\n\n    return signPayload(payload, privateKey);\n  }\n  const payload = { ..._options };\n  return createUnsecuredToken(payload as Json);\n};\n\nasync function generateTokenAndOpenPopup<T extends PsbtRequestOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>,\n  provider: StacksProvider\n) {\n  const token = await makeTokenFn({\n    ...getDefaultPsbtRequestOptions(options),\n    ...options,\n  } as T);\n  return openPsbtPopup({ token, options }, provider);\n}\n\n/**\n * @experimental\n */\nexport function openPsbtRequestPopup(\n  options: PsbtRequestOptions,\n  provider: StacksProvider = getStacksProvider()\n) {\n  return generateTokenAndOpenPopup(options, makePsbtToken, provider);\n}\n","import { AppConfig, UserSession } from '@stacks/auth';\nimport { bytesToHex, hexToBytes } from '@stacks/common';\nimport { StacksTestnet } from '@stacks/network';\nimport {\n  ChainID,\n  deserializeTransaction,\n  PostCondition,\n  serializeCV,\n  serializePostCondition,\n} from '@stacks/transactions';\nimport { createUnsecuredToken, Json, SECP256K1Client, TokenSigner } from 'jsontokens';\nimport {\n  ContractCallOptions,\n  ContractCallPayload,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  ContractDeployOptions,\n  ContractDeployPayload,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  FinishedTxPayload,\n  SponsoredFinishedTxPayload,\n  STXTransferOptions,\n  STXTransferPayload,\n  STXTransferRegularOptions,\n  STXTransferSponsoredOptions,\n  TransactionOptions,\n  TransactionPayload,\n  TransactionPopup,\n  TransactionTypes,\n} from '../types/transactions';\nimport { getStacksProvider } from '../utils';\nimport { StacksProvider } from '../types';\n\n// TODO extract out of transactions\nexport const getUserSession = (_userSession?: UserSession) => {\n  let userSession = _userSession;\n\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nexport function hasAppPrivateKey(userSession?: UserSession) {\n  try {\n    const session = getUserSession(userSession).loadUserData();\n    return session.appPrivateKey;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport const getKeys = (_userSession?: UserSession) => {\n  const userSession = getUserSession(_userSession);\n  const privateKey = userSession.loadUserData().appPrivateKey;\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  return { privateKey, publicKey };\n};\n\n// TODO extract out of transactions\nexport function getStxAddress(options: TransactionOptions) {\n  const { stxAddress, userSession, network } = options;\n\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options: TransactionOptions) {\n  const network = options.network || new StacksTestnet();\n\n  const userSession = getUserSession(options.userSession);\n  const defaults: TransactionOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nfunction encodePostConditions(postConditions: PostCondition[]) {\n  return postConditions.map(pc => bytesToHex(serializePostCondition(pc)));\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: TransactionPayload, privateKey: string) {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = encodePostConditions(postConditions as PostCondition[]);\n  }\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return tokenSigner.signAsync({ ...payload, postConditions } as any);\n}\n\nfunction createUnsignedTransactionPayload(payload: Partial<TransactionPayload>) {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = encodePostConditions(postConditions as PostCondition[]);\n  }\n  return createUnsecuredToken({ ...payload, postConditions } as unknown as Json);\n}\n\nconst openTransactionPopup = async (\n  { token, options }: TransactionPopup,\n  provider: StacksProvider\n) => {\n  try {\n    const txResponse = await provider.transactionRequest(token);\n    const { txRaw } = txResponse;\n    const txBytes = hexToBytes(txRaw.replace(/^0x/, ''));\n    const stacksTransaction = deserializeTransaction(txBytes);\n\n    if ('sponsored' in options && options.sponsored) {\n      options.onFinish?.({\n        ...(txResponse as SponsoredFinishedTxPayload),\n        stacksTransaction,\n      });\n      return;\n    }\n    options.onFinish?.({\n      ...(txResponse as FinishedTxPayload),\n      stacksTransaction,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during transaction request', error);\n    options.onCancel?.();\n  }\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeContractCallToken = async (options: ContractCallOptions) => {\n  const { functionArgs, appDetails, userSession, ..._options } = options;\n\n  const args: string[] = functionArgs.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    }\n    return bytesToHex(serializeCV(arg));\n  });\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: ContractCallPayload = {\n      ..._options,\n      functionArgs: args,\n      txType: TransactionTypes.ContractCall,\n      publicKey,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n  const payload: Partial<ContractCallPayload> = {\n    ..._options,\n    functionArgs: args,\n    txType: TransactionTypes.ContractCall,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeContractDeployToken = async (options: ContractDeployOptions) => {\n  const { appDetails, userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: ContractDeployPayload = {\n      ..._options,\n      publicKey,\n      txType: TransactionTypes.ContractDeploy,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n\n  const payload: Partial<ContractDeployPayload> = {\n    ..._options,\n    txType: TransactionTypes.ContractDeploy,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeSTXTransferToken = async (options: STXTransferOptions) => {\n  const { amount, appDetails, userSession, ..._options } = options;\n\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: STXTransferPayload = {\n      ..._options,\n      amount: amount.toString(10),\n      publicKey,\n      txType: TransactionTypes.STXTransfer,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n\n  const payload: Partial<STXTransferPayload> = {\n    ..._options,\n    amount: amount.toString(10),\n    txType: TransactionTypes.STXTransfer,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\nasync function generateTokenAndOpenPopup<T extends TransactionOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>,\n  provider: StacksProvider\n) {\n  const token = await makeTokenFn({\n    ...getDefaults(options),\n    ...options,\n  } as T);\n  return openTransactionPopup({ token, options }, provider);\n}\n\nexport function openContractCall(\n  options: ContractCallOptions | ContractCallRegularOptions | ContractCallSponsoredOptions,\n  provider: StacksProvider = getStacksProvider()\n) {\n  if (!provider) throw new Error('[Connect] No installed Stacks wallet found');\n  return generateTokenAndOpenPopup(options, makeContractCallToken, provider);\n}\n\nexport function openContractDeploy(\n  options: ContractDeployOptions | ContractDeployRegularOptions | ContractDeploySponsoredOptions,\n  provider: StacksProvider = getStacksProvider()\n) {\n  if (!provider) throw new Error('[Connect] No installed Stacks wallet found');\n  return generateTokenAndOpenPopup(options, makeContractDeployToken, provider);\n}\n\nexport function openSTXTransfer(\n  options: STXTransferOptions | STXTransferRegularOptions | STXTransferSponsoredOptions,\n  provider: StacksProvider = getStacksProvider()\n) {\n  if (!provider) throw new Error('[Connect] No installed Stacks wallet found');\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken, provider);\n}\n","import { Logger } from './logger';\n\n/**\n *  @ignore\n */\nexport const BLOCKSTACK_HANDLER = 'blockstack';\n\n/**\n * Time\n * @private\n * @ignore\n */\nexport function nextYear() {\n  return new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n}\n\n/**\n * Time\n * @private\n * @ignore\n */\nexport function nextMonth() {\n  return new Date(new Date().setMonth(new Date().getMonth() + 1));\n}\n\n/**\n * Time\n * @private\n * @ignore\n */\nexport function nextHour() {\n  return new Date(new Date().setHours(new Date().getHours() + 1));\n}\n\n/**\n * Converts megabytes to bytes. Returns 0 if the input is not a finite number.\n * @ignore\n */\nexport function megabytesToBytes(megabytes: number): number {\n  if (!Number.isFinite(megabytes)) {\n    return 0;\n  }\n  return Math.floor(megabytes * 1024 * 1024);\n}\n\n/**\n * Calculate the AES-CBC ciphertext output byte length a given input length.\n * AES has a fixed block size of 16-bytes regardless key size.\n * @ignore\n */\nexport function getAesCbcOutputLength(inputByteLength: number) {\n  // AES-CBC block mode rounds up to the next block size.\n  const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n  return cipherTextLength;\n}\n\n/**\n * Calculate the base64 encoded string length for a given input length.\n * This is equivalent to the byte length when the string is ASCII or UTF8-8\n * encoded.\n * @param number\n */\nexport function getBase64OutputLength(inputByteLength: number) {\n  const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n  return encodedLength;\n}\n\n/**\n * Query Strings\n * @private\n * @ignore\n */\n\nexport function updateQueryStringParameter(uri: string, key: string, value: string) {\n  const re = new RegExp(`([?&])${key}=.*?(&|$)`, 'i');\n  const separator = uri.indexOf('?') !== -1 ? '&' : '?';\n  if (uri.match(re)) {\n    return uri.replace(re, `$1${key}=${value}$2`);\n  } else {\n    return `${uri}${separator}${key}=${value}`;\n  }\n}\n\n/**\n * Versioning\n * @param {string} v1 - the left half of the version inequality\n * @param {string} v2 - right half of the version inequality\n * @returns {bool} iff v1 >= v2\n * @private\n * @ignore\n */\n\nexport function isLaterVersion(v1: string, v2: string) {\n  if (v1 === undefined || v1 === '') {\n    v1 = '0.0.0';\n  }\n\n  if (v2 === undefined || v1 === '') {\n    v2 = '0.0.0';\n  }\n\n  const v1tuple = v1.split('.').map(x => parseInt(x, 10));\n  const v2tuple = v2.split('.').map(x => parseInt(x, 10));\n\n  for (let index = 0; index < v2.length; index++) {\n    if (index >= v1.length) {\n      v2tuple.push(0);\n    }\n    if (v1tuple[index] < v2tuple[index]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * UUIDs\n * @private\n * @ignore\n */\nexport function makeUUID4() {\n  let d = new Date().getTime();\n  if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n    d += performance.now(); // use high-precision timer if available\n  }\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n\n/**\n * Checks if both urls pass the same origin check & are absolute\n * @param  {[type]}  uri1 first uri to check\n * @param  {[type]}  uri2 second uri to check\n * @return {Boolean} true if they pass the same origin check\n * @private\n * @ignore\n */\nexport function isSameOriginAbsoluteUrl(uri1: string, uri2: string) {\n  try {\n    const parsedUri1 = new URL(uri1);\n    const parsedUri2 = new URL(uri2);\n\n    const port1 =\n      parseInt(parsedUri1.port || '0', 10) | 0 || (parsedUri1.protocol === 'https:' ? 443 : 80);\n    const port2 =\n      parseInt(parsedUri2.port || '0', 10) | 0 || (parsedUri2.protocol === 'https:' ? 443 : 80);\n\n    const match = {\n      scheme: parsedUri1.protocol === parsedUri2.protocol,\n      hostname: parsedUri1.hostname === parsedUri2.hostname,\n      port: port1 === port2,\n      absolute:\n        (uri1.includes('http://') || uri1.includes('https://')) &&\n        (uri2.includes('http://') || uri2.includes('https://')),\n    };\n\n    return match.scheme && match.hostname && match.port && match.absolute;\n  } catch (error) {\n    console.log(error);\n    console.log('Parsing error in same URL origin check');\n    // Parse error\n    return false;\n  }\n}\n\n/**\n * Returns the global scope `Window`, `WorkerGlobalScope`, or `NodeJS.Global` if available in the\n * currently executing environment.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope\n *\n * This could be switched to `globalThis` once it is standardized and widely available.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\n * @ignore\n */\nexport function getGlobalScope(): Window {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  // This function is meant to be called when accessing APIs that are typically only available in\n  // web-browser/DOM environments, but we also want to support situations where running in Node.js\n  // environment, and a polyfill was added to the Node.js `global` object scope without adding the\n  // `window` global object as well.\n  if (typeof global !== 'undefined') {\n    return global as unknown as Window;\n  }\n  throw new Error(\n    'Unexpected runtime environment - no supported global scope (`window`, `self`, `global`) available'\n  );\n}\n\nfunction getAPIUsageErrorMessage(\n  scopeObject: unknown,\n  apiName: string,\n  usageDesc?: string\n): string {\n  if (usageDesc) {\n    return `Use of '${usageDesc}' requires \\`${apiName}\\` which is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n  } else {\n    return `\\`${apiName}\\` is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n  }\n}\n\ninterface GetGlobalObjectOptions {\n  /**\n   * Throw an error if the object is not found.\n   * @default false\n   */\n  throwIfUnavailable?: boolean;\n  /**\n   * Additional information to include in an error if thrown.\n   */\n  usageDesc?: string;\n  /**\n   * If the object is not found, return an new empty object instead of undefined.\n   * Requires [[throwIfUnavailable]] to be falsey.\n   * @default false\n   */\n  returnEmptyObject?: boolean;\n}\n\n/**\n * Returns an object from the global scope (`Window` or `WorkerGlobalScope`) if it\n * is available within the currently executing environment.\n * When executing within the Node.js runtime these APIs are unavailable and will be\n * `undefined` unless the API is provided via polyfill.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @ignore\n */\nexport function getGlobalObject<K extends Extract<keyof Window, string>>(\n  name: K,\n  { throwIfUnavailable, usageDesc, returnEmptyObject }: GetGlobalObjectOptions = {}\n): Window[K] | undefined {\n  let globalScope: Window | undefined = undefined;\n  try {\n    globalScope = getGlobalScope();\n    if (globalScope) {\n      const obj = globalScope[name];\n      if (obj) {\n        return obj;\n      }\n    }\n  } catch (error) {\n    Logger.error(`Error getting object '${name}' from global scope '${globalScope}': ${error}`);\n  }\n  if (throwIfUnavailable) {\n    const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n    Logger.error(errMsg);\n    throw new Error(errMsg);\n  }\n  if (returnEmptyObject) {\n    return {} as any;\n  }\n  return undefined;\n}\n\n/**\n * Returns a specified subset of objects from the global scope (`Window` or `WorkerGlobalScope`)\n * if they are available within the currently executing environment.\n * When executing within the Node.js runtime these APIs are unavailable will be `undefined`\n * unless the API is provided via polyfill.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @ignore\n */\nexport function getGlobalObjects<K extends Extract<keyof Window, string>>(\n  names: K[],\n  { throwIfUnavailable, usageDesc, returnEmptyObject }: GetGlobalObjectOptions = {}\n): Pick<Window, K> {\n  let globalScope: Window | undefined;\n  try {\n    globalScope = getGlobalScope();\n  } catch (error) {\n    Logger.error(`Error getting global scope: ${error}`);\n    if (throwIfUnavailable) {\n      const errMsg = getAPIUsageErrorMessage(globalScope, names[0].toString(), usageDesc);\n      Logger.error(errMsg);\n      throw errMsg;\n    } else if (returnEmptyObject) {\n      globalScope = {} as any;\n    }\n  }\n\n  const result: Pick<Window, K> = {} as any;\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    try {\n      if (globalScope) {\n        const obj = globalScope[name];\n        if (obj) {\n          result[name] = obj;\n        } else if (throwIfUnavailable) {\n          const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n          Logger.error(errMsg);\n          throw new Error(errMsg);\n        } else if (returnEmptyObject) {\n          result[name] = {} as any;\n        }\n      }\n    } catch (error) {\n      if (throwIfUnavailable) {\n        const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n        Logger.error(errMsg);\n        throw new Error(errMsg);\n      }\n    }\n  }\n  return result;\n}\n// After removing bn.js library provide backward compatibility for users passing bn.js instance\ntype BN = import('bn.js'); // Type only import from @types/bn.js\nexport type IntegerType = number | string | bigint | Uint8Array | BN;\n\nexport function intToBytes(value: IntegerType, signed: boolean, byteLength: number): Uint8Array {\n  return bigIntToBytes(intToBigInt(value, signed), byteLength);\n}\n\nexport function intToBigInt(value: IntegerType, signed: boolean): bigint {\n  let parsedValue = value;\n\n  if (typeof parsedValue === 'number') {\n    if (!Number.isInteger(parsedValue)) {\n      throw new RangeError(`Invalid value. Values of type 'number' must be an integer.`);\n    }\n    return BigInt(parsedValue);\n  }\n  if (typeof parsedValue === 'string') {\n    // If hex string then convert to bytes then fall through to the bytes condition\n    if (parsedValue.toLowerCase().startsWith('0x')) {\n      // Trim '0x' hex-prefix\n      let hex = parsedValue.slice(2);\n\n      // Allow odd-length strings like `0xf` -- some libs output these, or even just `0x${num.toString(16)}`\n      hex = hex.padStart(hex.length + (hex.length % 2), '0');\n\n      parsedValue = hexToBytes(hex);\n    } else {\n      try {\n        return BigInt(parsedValue);\n      } catch (error) {\n        if (error instanceof SyntaxError) {\n          throw new RangeError(`Invalid value. String integer '${parsedValue}' is not finite.`);\n        }\n      }\n    }\n  }\n  if (typeof parsedValue === 'bigint') {\n    return parsedValue;\n  }\n  if (parsedValue instanceof Uint8Array) {\n    if (signed) {\n      // Allow byte arrays smaller than 128-bits to be passed.\n      // This allows positive signed ints like `0x08` (8) or negative signed\n      // ints like `0xf8` (-8) to be passed without having to pad to 16 bytes.\n      const bn = fromTwos(\n        BigInt(`0x${bytesToHex(parsedValue)}`),\n        BigInt(parsedValue.byteLength * 8)\n      );\n      return BigInt(bn.toString());\n    } else {\n      return BigInt(`0x${bytesToHex(parsedValue)}`);\n    }\n  }\n  // After removing bn.js library provide backward compatibility for users passing bn.js instance\n  // For backward compatibility with bn.js check if it's a bn.js instance\n  if (\n    parsedValue != null &&\n    typeof parsedValue === 'object' &&\n    parsedValue.constructor.name === 'BN'\n  ) {\n    return BigInt(parsedValue.toString());\n  }\n  throw new TypeError(\n    `Invalid value type. Must be a number, bigint, integer-string, hex-string, or Uint8Array.`\n  );\n}\n\nexport function with0x(value: string): string {\n  return value.startsWith('0x') ? value : `0x${value}`;\n}\n\n/**\n * Converts hex input string to bigint\n * @param hex - hex input string without 0x prefix and in big endian format\n * @example \"6c7cde4d702830c1db34ef7c19e2776f59107afef39084776fc88bc78dbb9656\"\n * @ignore\n */\nexport function hexToBigInt(hex: string): bigint {\n  if (typeof hex !== 'string')\n    throw new TypeError(`hexToBigInt: expected string, got ${typeof hex}`);\n  // Big Endian\n  return BigInt(`0x${hex}`);\n}\n\n/**\n * Converts IntegerType to hex string\n * @ignore\n */\nexport function intToHex(integer: IntegerType, lengthBytes = 8): string {\n  const value = typeof integer === 'bigint' ? integer : intToBigInt(integer, false);\n  return value.toString(16).padStart(lengthBytes * 2, '0');\n}\n\n/**\n * Converts hex string to integer\n * @ignore\n */\nexport function hexToInt(hex: string): number {\n  return parseInt(hex, 16);\n}\n\n/**\n * Converts bigint to byte array\n * @param value bigint value to be converted\n * @param length byte array optional length\n * @return {Uint8Array} byte array\n */\nexport function bigIntToBytes(value: bigint, length: number = 16): Uint8Array {\n  const hex = intToHex(value, length);\n  return hexToBytes(hex);\n}\n\n/**\n * Converts from signed number to two's complement\n * MIN_VALUE = -(1 << (width - 1))\n * MAX_VALUE =  (1 << (width - 1)) - 1\n * @ignore\n */\nexport function toTwos(value: bigint, width: bigint): bigint {\n  if (\n    value < -(BigInt(1) << (width - BigInt(1))) ||\n    (BigInt(1) << (width - BigInt(1))) - BigInt(1) < value\n  ) {\n    throw `Unable to represent integer in width: ${width}`;\n  }\n  if (value >= BigInt(0)) {\n    return BigInt(value);\n  }\n  return value + (BigInt(1) << width);\n}\n\n/**\n * Returns nth bit (right-to-left, zero-indexed)\n */\nfunction nthBit(value: bigint, n: bigint) {\n  return value & (BigInt(1) << n);\n}\n\n/**\n * Converts from two's complement to signed number\n * @ignore\n */\nexport function fromTwos(value: bigint, width: bigint) {\n  if (nthBit(value, width - BigInt(1))) {\n    return value - (BigInt(1) << width);\n  }\n  return value;\n}\n\n// The following methods are based on `@noble/hashes` implementation\n// https://github.com/paulmillr/noble-hashes\n// Copyright (c) 2022 Paul Miller (https://paulmillr.com)\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the “Software”), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\nconst hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n\n/**\n * Converts bytes to the equivalent hex string\n * @example\n * ```\n * bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'\n * ```\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (const u of uint8a) {\n    hex += hexes[u];\n  }\n  return hex;\n}\n\n/**\n * Converts a hex string to the equivalent bytes\n * @example\n * ```\n * hexToBytes('deadbeef') // Uint8Array(4) [ 222, 173, 190, 239 ]\n * ```\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError(`hexToBytes: expected string, got ${typeof hex}`);\n  }\n  const paddedHex = hex.length % 2 ? `0${hex}` : hex; // left pad with a zero if odd length\n  const array = new Uint8Array(paddedHex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = paddedHex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts a UTF-8 string to the equivalent bytes\n * @example\n * ```\n * utf8ToBytes('stacks Ӿ'); // Uint8Array(9) [ 115, 116, 97, 99, 107, 115, 32, 211, 190 ];\n * ```\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  return new TextEncoder().encode(str);\n}\n\n/**\n * Converts bytes to the equivalent UTF-8 string\n * @example\n * ```\n * bytesToUtf8(Uint8Array.from([115, 116, 97, 99, 107, 115, 32, 211, 190])); // 'stacks Ӿ'\n * ```\n */\nexport function bytesToUtf8(arr: Uint8Array): string {\n  return new TextDecoder().decode(arr);\n}\n\n/**\n * Converts an ASCII string to the equivalent bytes\n * @example\n * ```\n * asciiToBytes('stacks $'); // Uint8Array(8) [ 115, 116, 97, 99, 107, 115, 32, 36 ]\n * ```\n */\nexport function asciiToBytes(str: string) {\n  const byteArray = [];\n  for (let i = 0; i < str.length; i++) {\n    byteArray.push(str.charCodeAt(i) & 0xff); // ignore second bytes of UTF-16 character\n  }\n  return new Uint8Array(byteArray);\n}\n\n/**\n * Converts bytes to the equivalent ASCII string\n * @example\n * ```\n * bytesToAscii(Uint8Array.from([115, 116, 97, 99, 107, 115, 32, 36])); // 'stacks $'\n * ```\n */\nexport function bytesToAscii(arr: Uint8Array) {\n  return String.fromCharCode.apply(null, arr as any as number[]);\n}\n\nfunction isNotOctet(octet: number) {\n  return !Number.isInteger(octet) || octet < 0 || octet > 255;\n}\n\n/** @ignore */\nexport function octetsToBytes(numbers: number[]) {\n  if (numbers.some(isNotOctet)) throw new Error('Some values are invalid bytes.');\n  return new Uint8Array(numbers);\n}\n\n/** @ignore */\nexport function toBytes(data: Uint8Array | string): Uint8Array {\n  if (typeof data === 'string') return utf8ToBytes(data);\n  if (data instanceof Uint8Array) return data;\n  throw new TypeError(`Expected input type is (Uint8Array | string) but got (${typeof data})`);\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n * @ignore\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every(a => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n/** @ignore */\nexport function concatArray(elements: (Uint8Array | number[] | number)[]) {\n  return concatBytes(\n    ...elements.map(e => {\n      if (typeof e === 'number') return octetsToBytes([e]);\n      if (e instanceof Array) return octetsToBytes(e);\n      return e;\n    })\n  );\n}\n\n/**\n * Better `instanceof` check for ArrayBuffer types in different environments\n * @ignore\n */\nexport function isInstance(object: any, type: any) {\n  return (\n    object instanceof type ||\n    (object?.constructor?.name != null && object.constructor.name === type.name)\n  );\n}\n","import { UserSession } from '@stacks/auth';\nimport type { AuthOptions } from '../types/auth';\nimport {\n  PostConditionMode,\n  PostCondition,\n  AnchorMode,\n  ClarityValue,\n  StacksTransaction,\n} from '@stacks/transactions';\nimport { StacksNetwork } from '@stacks/network';\n\nexport interface TxBase {\n  appDetails?: AuthOptions['appDetails'];\n  postConditionMode?: PostConditionMode;\n  postConditions?: (string | PostCondition)[];\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  attachment?: string;\n  fee?: number | string;\n  /**\n   * Provide the Hiro Wallet with a suggested account to sign this transaction with.\n   * This is set by default if a `userSession` option is provided.\n   */\n  stxAddress?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  senderKey?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  nonce?: number;\n}\n\nexport interface SponsoredFinishedTxPayload {\n  txRaw: string;\n}\n\nexport interface SponsoredFinishedTxData extends SponsoredFinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport interface FinishedTxPayload extends SponsoredFinishedTxPayload {\n  txId: string;\n}\n\nexport interface FinishedTxData extends FinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport enum TransactionTypes {\n  ContractCall = 'contract_call',\n  ContractDeploy = 'smart_contract',\n  STXTransfer = 'token_transfer',\n}\n\n/**\n * Contract Call\n */\n\nexport enum ContractCallArgumentType {\n  BUFFER = 'buffer',\n  UINT = 'uint',\n  INT = 'int',\n  PRINCIPAL = 'principal',\n  BOOL = 'bool',\n}\n\nexport interface ContractCallBase extends TxBase {\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: (string | ClarityValue)[];\n}\n\nexport interface OptionsBase {\n  /**\n   * @deprecated Authentication is no longer supported through a hosted\n   * version. Users must install an extension.\n   */\n  authOrigin?: string;\n  userSession?: UserSession;\n}\n\nexport type SponsoredFinished = (data: SponsoredFinishedTxData) => void;\nexport type Finished = (data: FinishedTxData) => void;\nexport type Canceled = () => void;\n\nexport interface SponsoredOptionsBase extends TxBase, OptionsBase {\n  sponsored: true;\n  onFinish?: SponsoredFinished;\n  onCancel?: Canceled;\n}\n\nexport interface RegularOptionsBase extends TxBase, OptionsBase {\n  sponsored?: false;\n  onFinish?: Finished;\n  onCancel?: Canceled;\n}\n\nexport type ContractCallRegularOptions = ContractCallBase & RegularOptionsBase;\nexport type ContractCallSponsoredOptions = ContractCallBase & SponsoredOptionsBase;\nexport type ContractCallOptions = ContractCallRegularOptions | ContractCallSponsoredOptions;\n\nexport interface ContractCallArgument {\n  type: ContractCallArgumentType;\n  value: string;\n}\n\nexport interface ContractCallPayload extends ContractCallBase {\n  txType: TransactionTypes.ContractCall;\n  publicKey: string;\n  functionArgs: string[];\n  sponsored?: boolean;\n}\n\n/**\n * Contract Deploy\n */\nexport interface ContractDeployBase extends TxBase {\n  contractName: string;\n  codeBody: string;\n}\n\nexport type ContractDeployRegularOptions = ContractDeployBase & RegularOptionsBase;\nexport type ContractDeploySponsoredOptions = ContractDeployBase & SponsoredOptionsBase;\nexport type ContractDeployOptions = ContractDeployRegularOptions | ContractDeploySponsoredOptions;\n\nexport interface ContractDeployPayload extends ContractDeployBase {\n  publicKey: string;\n  txType: TransactionTypes.ContractDeploy;\n  sponsored?: boolean;\n}\n\n/**\n * STX Transfer\n */\n\nexport interface STXTransferBase extends TxBase {\n  recipient: string;\n  amount: BigInt | string;\n  memo?: string;\n}\n\nexport type STXTransferRegularOptions = STXTransferBase & RegularOptionsBase;\nexport type STXTransferSponsoredOptions = STXTransferBase & SponsoredOptionsBase;\nexport type STXTransferOptions = STXTransferRegularOptions | STXTransferSponsoredOptions;\n\nexport interface STXTransferPayload extends STXTransferBase {\n  publicKey: string;\n  txType: TransactionTypes.STXTransfer;\n  amount: string;\n  sponsored?: boolean;\n}\n\n/**\n * Transaction Popup\n */\n\nexport type TransactionOptions = ContractCallOptions | ContractDeployOptions | STXTransferOptions;\nexport type TransactionPayload = ContractCallPayload | ContractDeployPayload | STXTransferPayload;\n\nexport interface TransactionPopup {\n  token: string;\n  options: TransactionOptions;\n}\n","import { StacksTestnet } from '@stacks/network';\nimport { ChainID } from '@stacks/transactions';\nimport { createUnsecuredToken, TokenSigner } from 'jsontokens';\nimport { getKeys, getUserSession, hasAppPrivateKey } from '../transactions';\nimport {\n  CommonSignatureRequestOptions,\n  SignatureOptions,\n  SignaturePayload,\n  SignaturePopup,\n  SignatureRequestOptions,\n} from '../types/signature';\nimport { getStacksProvider } from '../utils';\nimport { StacksProvider } from '../types';\n\nfunction getStxAddress(options: CommonSignatureRequestOptions) {\n  const { userSession, network } = options;\n\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: SignaturePayload, privateKey: string) {\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return tokenSigner.signAsync({ ...payload } as any);\n}\n\nexport function getDefaultSignatureRequestOptions(options: CommonSignatureRequestOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: CommonSignatureRequestOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nasync function openSignaturePopup({ token, options }: SignaturePopup, provider: StacksProvider) {\n  try {\n    const signatureResponse = await provider.signatureRequest(token);\n    options.onFinish?.(signatureResponse);\n  } catch (error) {\n    console.error('[Connect] Error during signature request', error);\n    options.onCancel?.();\n  }\n}\n\nexport interface SignatureRequestPayload {\n  message: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const signMessage = async (options: SignatureRequestOptions) => {\n  const { userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n\n    const payload: SignaturePayload = {\n      ..._options,\n      publicKey,\n    };\n\n    return signPayload(payload, privateKey);\n  }\n  const payload = { ..._options };\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return createUnsecuredToken(payload as any);\n};\n\nasync function generateTokenAndOpenPopup<T extends SignatureOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>,\n  provider: StacksProvider\n) {\n  const token = await makeTokenFn({\n    ...getDefaultSignatureRequestOptions(options),\n    ...options,\n  } as T);\n  return openSignaturePopup({ token, options }, provider);\n}\n\nexport function openSignatureRequestPopup(\n  options: SignatureRequestOptions,\n  provider: StacksProvider = getStacksProvider()\n) {\n  if (!provider) throw new Error('[Connect] No installed Stacks wallet found');\n  return generateTokenAndOpenPopup(options, signMessage, provider);\n}\n","import { bytesToHex } from '@stacks/common';\nimport { serializeCV } from '@stacks/transactions';\nimport { createUnsecuredToken, TokenSigner } from 'jsontokens';\nimport { getDefaultSignatureRequestOptions } from '.';\nimport { getKeys, hasAppPrivateKey } from '../transactions';\nimport {\n  StructuredDataSignatureOptions,\n  StructuredDataSignaturePayload,\n  StructuredDataSignaturePopup,\n  StructuredDataSignatureRequestOptions,\n} from '../types/structuredDataSignature';\nimport { getStacksProvider } from '../utils';\nimport { StacksProvider } from '../types';\n\nasync function generateTokenAndOpenPopup<T extends StructuredDataSignatureOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>,\n  provider: StacksProvider\n) {\n  const token = await makeTokenFn({\n    ...getDefaultSignatureRequestOptions(options),\n    ...options,\n  } as T);\n  return openStructuredDataSignaturePopup({ token, options }, provider);\n}\n\nfunction parseUnserializableBigIntValues(payload: any) {\n  return {\n    ...payload,\n    message: bytesToHex(serializeCV(payload.message)),\n    domain: bytesToHex(serializeCV(payload.domain)),\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: StructuredDataSignaturePayload, privateKey: string) {\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync(parseUnserializableBigIntValues(payload));\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function signStructuredMessage(options: StructuredDataSignatureRequestOptions) {\n  const { userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: StructuredDataSignaturePayload = {\n      ..._options,\n      publicKey,\n    };\n    return signPayload(payload, privateKey);\n  }\n  // Type casting `any` as payload contains non-serialisable content,\n  // such as `StacksNetwork`\n  return createUnsecuredToken(parseUnserializableBigIntValues(options));\n}\n\nasync function openStructuredDataSignaturePopup(\n  { token, options }: StructuredDataSignaturePopup,\n  provider: StacksProvider\n) {\n  try {\n    const signatureResponse = await provider.structuredDataSignatureRequest(token);\n\n    options.onFinish?.(signatureResponse);\n  } catch (error) {\n    console.error('[Connect] Error during signature request', error);\n    options.onCancel?.();\n  }\n}\n\nexport function openStructuredDataSignatureRequestPopup(\n  options: StructuredDataSignatureRequestOptions,\n  provider: StacksProvider = getStacksProvider()\n) {\n  if (!provider) throw new Error('[Connect] No installed Stacks wallet found');\n  return generateTokenAndOpenPopup(options, signStructuredMessage, provider);\n}\n","import { StacksTestnet } from '@stacks/network';\nimport { createUnsecuredToken, Json, TokenSigner } from 'jsontokens';\nimport { getKeys, getUserSession, hasAppPrivateKey } from '../transactions';\nimport {\n  ProfileUpdatePayload,\n  ProfileUpdatePopup,\n  ProfileUpdateRequestOptions,\n  StacksProvider,\n} from '../types';\n\nimport { getStacksProvider } from '../utils';\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: ProfileUpdatePayload, privateKey: string) {\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return tokenSigner.signAsync({ ...payload } as any);\n}\n\nexport function getDefaultProfileUpdateRequestOptions(options: ProfileUpdateRequestOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: ProfileUpdateRequestOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    ...defaults,\n  };\n}\n\nasync function openProfileUpdatePopup(\n  { token, options }: ProfileUpdatePopup,\n  provider: StacksProvider\n) {\n  try {\n    const profileUpdateResponse = await provider.profileUpdateRequest(token);\n    options.onFinish?.(profileUpdateResponse);\n  } catch (error) {\n    console.error('[Connect] Error during signature request', error);\n    options.onCancel?.();\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeProfileUpdateToken = async (options: ProfileUpdateRequestOptions) => {\n  const { userSession, profile, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n\n    const payload: ProfileUpdatePayload = {\n      ..._options,\n      profile,\n      publicKey,\n    };\n\n    return signPayload(payload, privateKey);\n  }\n  const payload = { ..._options };\n  return createUnsecuredToken(payload as Json);\n};\n\nasync function generateTokenAndOpenPopup<T extends ProfileUpdateRequestOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>,\n  provider: StacksProvider\n) {\n  const token = await makeTokenFn({\n    ...getDefaultProfileUpdateRequestOptions(options),\n    ...options,\n  } as T);\n  return openProfileUpdatePopup({ token, options }, provider);\n}\n\nexport function openProfileUpdateRequestPopup(\n  options: ProfileUpdateRequestOptions,\n  provider: StacksProvider = getStacksProvider()\n) {\n  if (!provider) throw new Error('[Connect] No installed Stacks wallet found');\n  return generateTokenAndOpenPopup(options, makeProfileUpdateToken, provider);\n}\n","import { UserSession } from '@stacks/auth';\nimport { StacksNetwork } from '@stacks/network';\n\nimport { AuthOptions } from './auth';\n\n// Taken from @scure/btc-signer\n// https://github.com/paulmillr/scure-btc-signer\nexport enum SignatureHash {\n  DEFAULT = 0,\n  ALL = 1,\n  NONE = 2,\n  SINGLE = 3,\n  ANYONECANPAY = 0x80,\n}\n\nexport interface PsbtData {\n  hex: string;\n}\n\nexport type PsbtCanceled = () => void;\nexport type PsbtFinished = (data: PsbtData) => void;\n\nexport interface PsbtBase {\n  appDetails?: AuthOptions['appDetails'];\n  authOrigin?: string;\n  network?: StacksNetwork;\n  onCancel?: PsbtCanceled;\n  onFinish?: PsbtFinished;\n  stxAddress?: string;\n  userSession?: UserSession;\n}\n\nexport interface PsbtRequestOptions extends PsbtBase {\n  allowedSighash?: SignatureHash[];\n  hex: string;\n  signAtIndex?: number | number[];\n}\n\nexport interface CommonPsbtPayload extends PsbtBase {\n  publicKey: string;\n}\n\nexport interface PsbtPayload extends CommonPsbtPayload {\n  allowedSighash?: SignatureHash[];\n  hex: string;\n  signAtIndex?: number | number[];\n}\n\n/**\n * Psbt Popup\n */\nexport interface PsbtPopup {\n  token: string;\n  options: PsbtRequestOptions;\n}\n","import { authenticate } from './auth';\nimport type { AuthOptions } from './types/auth';\nimport { defineCustomElements } from '@stacks/connect-ui/loader';\nimport { getStacksProvider } from './utils';\nimport { StacksProvider } from './types';\n\nexport const showConnect = (\n  authOptions: AuthOptions,\n  provider: StacksProvider = getStacksProvider()\n) => {\n  if (provider) {\n    void authenticate(authOptions, provider);\n    return;\n  }\n\n  if (typeof window !== undefined) {\n    void defineCustomElements(window);\n    const element = document.createElement('connect-modal');\n    element.authOptions = authOptions;\n    document.body.appendChild(element);\n    const handleEsc = (ev: KeyboardEvent) => {\n      if (ev.key === 'Escape') {\n        document.removeEventListener('keydown', handleEsc);\n        element.remove();\n      }\n    };\n    document.addEventListener('keydown', handleEsc);\n  }\n};\n\n/**\n * @deprecated Use the renamed `showConnect` method\n */\nexport const showBlockstackConnect = (authOptions: AuthOptions) => showConnect(authOptions);\n","export * from './auth';\nexport * from './bitcoin';\nexport * from './transactions';\nexport * from './signature';\nexport * from './signature/structuredData';\nexport * from './profile';\nexport * from './types';\nexport * from './utils';\nexport * from './ui';\nexport * from '@stacks/auth';\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}