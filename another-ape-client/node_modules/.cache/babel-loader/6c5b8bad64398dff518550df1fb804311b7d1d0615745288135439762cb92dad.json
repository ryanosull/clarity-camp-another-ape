{"ast":null,"code":"var AWS = require('../core');\nvar os = require('os');\nvar path = require('path');\nfunction parseFile(filename) {\n  return AWS.util.ini.parse(AWS.util.readFileSync(filename));\n}\nfunction getProfiles(fileContent) {\n  var tmpContent = {};\n  Object.keys(fileContent).forEach(function (sectionName) {\n    if (/^sso-session\\s/.test(sectionName)) return;\n    Object.defineProperty(tmpContent, sectionName.replace(/^profile\\s/, ''), {\n      value: fileContent[sectionName],\n      enumerable: true\n    });\n  });\n  return tmpContent;\n}\nfunction getSsoSessions(fileContent) {\n  var tmpContent = {};\n  Object.keys(fileContent).forEach(function (sectionName) {\n    if (!/^sso-session\\s/.test(sectionName)) return;\n    Object.defineProperty(tmpContent, sectionName.replace(/^sso-session\\s/, ''), {\n      value: fileContent[sectionName],\n      enumerable: true\n    });\n  });\n  return tmpContent;\n}\n\n/**\n * Ini file loader class the same as that used in the SDK. It loads and\n * parses config and credentials files in .ini format and cache the content\n * to assure files are only read once.\n * Note that calling operations on the instance instantiated from this class\n * won't affect the behavior of SDK since SDK uses an internal singleton of\n * this class.\n * @!macro nobrowser\n */\nAWS.IniLoader = AWS.util.inherit({\n  constructor: function IniLoader() {\n    this.resolvedProfiles = {};\n    this.resolvedSsoSessions = {};\n  },\n  /** Remove all cached files. Used after config files are updated. */\n  clearCachedFiles: function clearCachedFiles() {\n    this.resolvedProfiles = {};\n    this.resolvedSsoSessions = {};\n  },\n  /**\n   * Load configurations from config/credentials files and cache them\n   * for later use. If no file is specified it will try to load default files.\n   *\n   * @param options [map] information describing the file\n   * @option options filename [String] ('~/.aws/credentials' or defined by\n   *   AWS_SHARED_CREDENTIALS_FILE process env var or '~/.aws/config' if\n   *   isConfig is set to true)\n   *   path to the file to be read.\n   * @option options isConfig [Boolean] (false) True to read config file.\n   * @return [map<String,String>] object containing contents from file in key-value\n   *   pairs.\n   */\n  loadFrom: function loadFrom(options) {\n    options = options || {};\n    var isConfig = options.isConfig === true;\n    var filename = options.filename || this.getDefaultFilePath(isConfig);\n    if (!this.resolvedProfiles[filename]) {\n      var fileContent = parseFile(filename);\n      if (isConfig) {\n        Object.defineProperty(this.resolvedProfiles, filename, {\n          value: getProfiles(fileContent)\n        });\n      } else {\n        Object.defineProperty(this.resolvedProfiles, filename, {\n          value: fileContent\n        });\n      }\n    }\n    return this.resolvedProfiles[filename];\n  },\n  /**\n   * Load sso sessions from config/credentials files and cache them\n   * for later use. If no file is specified it will try to load default file.\n   *\n   * @param options [map] information describing the file\n   * @option options filename [String] ('~/.aws/config' or defined by\n   *   AWS_CONFIG_FILE process env var)\n   * @return [map<String,String>] object containing contents from file in key-value\n   *   pairs.\n   */\n  loadSsoSessionsFrom: function loadSsoSessionsFrom(options) {\n    options = options || {};\n    var filename = options.filename || this.getDefaultFilePath(true);\n    if (!this.resolvedSsoSessions[filename]) {\n      var fileContent = parseFile(filename);\n      Object.defineProperty(this.resolvedSsoSessions, filename, {\n        value: getSsoSessions(fileContent)\n      });\n    }\n    return this.resolvedSsoSessions[filename];\n  },\n  /**\n   * @api private\n   */\n  getDefaultFilePath: function getDefaultFilePath(isConfig) {\n    return path.join(this.getHomeDir(), '.aws', isConfig ? 'config' : 'credentials');\n  },\n  /**\n   * @api private\n   */\n  getHomeDir: function getHomeDir() {\n    var env = process.env;\n    var home = env.HOME || env.USERPROFILE || (env.HOMEPATH ? (env.HOMEDRIVE || 'C:/') + env.HOMEPATH : null);\n    if (home) {\n      return home;\n    }\n    if (typeof os.homedir === 'function') {\n      return os.homedir();\n    }\n    throw AWS.util.error(new Error('Cannot load credentials, HOME path not set'));\n  }\n});\nvar IniLoader = AWS.IniLoader;\nmodule.exports = {\n  IniLoader: IniLoader\n};","map":{"version":3,"names":["AWS","require","os","path","parseFile","filename","util","ini","parse","readFileSync","getProfiles","fileContent","tmpContent","Object","keys","forEach","sectionName","test","defineProperty","replace","value","enumerable","getSsoSessions","IniLoader","inherit","constructor","resolvedProfiles","resolvedSsoSessions","clearCachedFiles","loadFrom","options","isConfig","getDefaultFilePath","loadSsoSessionsFrom","join","getHomeDir","env","process","home","HOME","USERPROFILE","HOMEPATH","HOMEDRIVE","homedir","error","Error","module","exports"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/shared-ini/ini-loader.js"],"sourcesContent":["var AWS = require('../core');\nvar os = require('os');\nvar path = require('path');\n\nfunction parseFile(filename) {\n  return AWS.util.ini.parse(AWS.util.readFileSync(filename));\n}\n\nfunction getProfiles(fileContent) {\n  var tmpContent = {};\n  Object.keys(fileContent).forEach(function(sectionName) {\n    if (/^sso-session\\s/.test(sectionName)) return;\n    Object.defineProperty(tmpContent, sectionName.replace(/^profile\\s/, ''), {\n      value: fileContent[sectionName],\n      enumerable: true\n    });\n  });\n  return tmpContent;\n}\n\nfunction getSsoSessions(fileContent) {\n  var tmpContent = {};\n  Object.keys(fileContent).forEach(function(sectionName) {\n    if (!/^sso-session\\s/.test(sectionName)) return;\n    Object.defineProperty(tmpContent, sectionName.replace(/^sso-session\\s/, ''), {\n      value: fileContent[sectionName],\n      enumerable: true\n    });\n  });\n  return tmpContent;\n}\n\n/**\n * Ini file loader class the same as that used in the SDK. It loads and\n * parses config and credentials files in .ini format and cache the content\n * to assure files are only read once.\n * Note that calling operations on the instance instantiated from this class\n * won't affect the behavior of SDK since SDK uses an internal singleton of\n * this class.\n * @!macro nobrowser\n */\nAWS.IniLoader = AWS.util.inherit({\n  constructor: function IniLoader() {\n    this.resolvedProfiles = {};\n    this.resolvedSsoSessions = {};\n  },\n\n  /** Remove all cached files. Used after config files are updated. */\n  clearCachedFiles: function clearCachedFiles() {\n    this.resolvedProfiles = {};\n    this.resolvedSsoSessions = {};\n  },\n\n  /**\n   * Load configurations from config/credentials files and cache them\n   * for later use. If no file is specified it will try to load default files.\n   *\n   * @param options [map] information describing the file\n   * @option options filename [String] ('~/.aws/credentials' or defined by\n   *   AWS_SHARED_CREDENTIALS_FILE process env var or '~/.aws/config' if\n   *   isConfig is set to true)\n   *   path to the file to be read.\n   * @option options isConfig [Boolean] (false) True to read config file.\n   * @return [map<String,String>] object containing contents from file in key-value\n   *   pairs.\n   */\n  loadFrom: function loadFrom(options) {\n    options = options || {};\n    var isConfig = options.isConfig === true;\n    var filename = options.filename || this.getDefaultFilePath(isConfig);\n    if (!this.resolvedProfiles[filename]) {\n      var fileContent = parseFile(filename);\n      if (isConfig) {\n        Object.defineProperty(this.resolvedProfiles, filename, {\n          value: getProfiles(fileContent)\n        });\n      } else {\n        Object.defineProperty(this.resolvedProfiles, filename, { value: fileContent });\n      }\n    }\n    return this.resolvedProfiles[filename];\n  },\n\n  /**\n   * Load sso sessions from config/credentials files and cache them\n   * for later use. If no file is specified it will try to load default file.\n   *\n   * @param options [map] information describing the file\n   * @option options filename [String] ('~/.aws/config' or defined by\n   *   AWS_CONFIG_FILE process env var)\n   * @return [map<String,String>] object containing contents from file in key-value\n   *   pairs.\n   */\n  loadSsoSessionsFrom: function loadSsoSessionsFrom(options) {\n    options = options || {};\n    var filename = options.filename || this.getDefaultFilePath(true);\n    if (!this.resolvedSsoSessions[filename]) {\n      var fileContent = parseFile(filename);\n      Object.defineProperty(this.resolvedSsoSessions, filename, {\n        value: getSsoSessions(fileContent)\n      });\n    }\n    return this.resolvedSsoSessions[filename];\n  },\n\n  /**\n   * @api private\n   */\n  getDefaultFilePath: function getDefaultFilePath(isConfig) {\n    return path.join(\n      this.getHomeDir(),\n      '.aws',\n      isConfig ? 'config' : 'credentials'\n    );\n  },\n\n  /**\n   * @api private\n   */\n  getHomeDir: function getHomeDir() {\n    var env = process.env;\n    var home = env.HOME ||\n      env.USERPROFILE ||\n      (env.HOMEPATH ? ((env.HOMEDRIVE || 'C:/') + env.HOMEPATH) : null);\n\n    if (home) {\n      return home;\n    }\n\n    if (typeof os.homedir === 'function') {\n      return os.homedir();\n    }\n\n    throw AWS.util.error(\n      new Error('Cannot load credentials, HOME path not set')\n    );\n  }\n});\n\nvar IniLoader = AWS.IniLoader;\n\nmodule.exports = {\n  IniLoader: IniLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}