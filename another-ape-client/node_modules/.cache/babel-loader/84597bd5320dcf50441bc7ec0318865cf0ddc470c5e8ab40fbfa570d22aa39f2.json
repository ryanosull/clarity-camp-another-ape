{"ast":null,"code":"var AWS = require('../core');\n\n/**\n * Represents credentials from a JSON file on disk.\n * If the credentials expire, the SDK can {refresh} the credentials\n * from the file.\n *\n * The format of the file should be similar to the options passed to\n * {AWS.Config}:\n *\n * ```javascript\n * {accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'optional'}\n * ```\n *\n * @example Loading credentials from disk\n *   var creds = new AWS.FileSystemCredentials('./configuration.json');\n *   creds.accessKeyId == 'AKID'\n *\n * @!attribute filename\n *   @readonly\n *   @return [String] the path to the JSON file on disk containing the\n *     credentials.\n * @!macro nobrowser\n */\nAWS.FileSystemCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * @overload AWS.FileSystemCredentials(filename)\n   *   Creates a new FileSystemCredentials object from a filename\n   *\n   *   @param filename [String] the path on disk to the JSON file to load.\n   */\n  constructor: function FileSystemCredentials(filename) {\n    AWS.Credentials.call(this);\n    this.filename = filename;\n    this.get(function () {});\n  },\n  /**\n   * Loads the credentials from the {filename} on disk.\n   *\n   * @callback callback function(err)\n   *   Called after the JSON file on disk is read and parsed. When this callback\n   *   is called with no error, it means that the credentials information\n   *   has been loaded into the object (as the `accessKeyId`, `secretAccessKey`,\n   *   and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    if (!callback) callback = AWS.util.fn.callback;\n    try {\n      var creds = JSON.parse(AWS.util.readFileSync(this.filename));\n      AWS.Credentials.call(this, creds);\n      if (!this.accessKeyId || !this.secretAccessKey) {\n        throw AWS.util.error(new Error('Credentials not set in ' + this.filename), {\n          code: 'FileSystemCredentialsProviderFailure'\n        });\n      }\n      this.expired = false;\n      callback();\n    } catch (err) {\n      callback(err);\n    }\n  }\n});","map":{"version":3,"names":["AWS","require","FileSystemCredentials","util","inherit","Credentials","constructor","filename","call","get","refresh","callback","fn","creds","JSON","parse","readFileSync","accessKeyId","secretAccessKey","error","Error","code","expired","err"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/credentials/file_system_credentials.js"],"sourcesContent":["var AWS = require('../core');\n\n/**\n * Represents credentials from a JSON file on disk.\n * If the credentials expire, the SDK can {refresh} the credentials\n * from the file.\n *\n * The format of the file should be similar to the options passed to\n * {AWS.Config}:\n *\n * ```javascript\n * {accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'optional'}\n * ```\n *\n * @example Loading credentials from disk\n *   var creds = new AWS.FileSystemCredentials('./configuration.json');\n *   creds.accessKeyId == 'AKID'\n *\n * @!attribute filename\n *   @readonly\n *   @return [String] the path to the JSON file on disk containing the\n *     credentials.\n * @!macro nobrowser\n */\nAWS.FileSystemCredentials = AWS.util.inherit(AWS.Credentials, {\n\n  /**\n   * @overload AWS.FileSystemCredentials(filename)\n   *   Creates a new FileSystemCredentials object from a filename\n   *\n   *   @param filename [String] the path on disk to the JSON file to load.\n   */\n  constructor: function FileSystemCredentials(filename) {\n    AWS.Credentials.call(this);\n    this.filename = filename;\n    this.get(function() {});\n  },\n\n  /**\n   * Loads the credentials from the {filename} on disk.\n   *\n   * @callback callback function(err)\n   *   Called after the JSON file on disk is read and parsed. When this callback\n   *   is called with no error, it means that the credentials information\n   *   has been loaded into the object (as the `accessKeyId`, `secretAccessKey`,\n   *   and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    if (!callback) callback = AWS.util.fn.callback;\n    try {\n      var creds = JSON.parse(AWS.util.readFileSync(this.filename));\n      AWS.Credentials.call(this, creds);\n      if (!this.accessKeyId || !this.secretAccessKey) {\n        throw AWS.util.error(\n          new Error('Credentials not set in ' + this.filename),\n        { code: 'FileSystemCredentialsProviderFailure' }\n        );\n      }\n      this.expired = false;\n      callback();\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n});\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,GAAG,CAACE,qBAAqB,GAAGF,GAAG,CAACG,IAAI,CAACC,OAAO,CAACJ,GAAG,CAACK,WAAW,EAAE;EAE5D;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,SAASJ,qBAAqBA,CAACK,QAAQ,EAAE;IACpDP,GAAG,CAACK,WAAW,CAACG,IAAI,CAAC,IAAI,CAAC;IAC1B,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,GAAG,CAAC,YAAW,CAAC,CAAC,CAAC;EACzB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO,EAAE,SAASA,OAAOA,CAACC,QAAQ,EAAE;IAClC,IAAI,CAACA,QAAQ,EAAEA,QAAQ,GAAGX,GAAG,CAACG,IAAI,CAACS,EAAE,CAACD,QAAQ;IAC9C,IAAI;MACF,IAAIE,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACf,GAAG,CAACG,IAAI,CAACa,YAAY,CAAC,IAAI,CAACT,QAAQ,CAAC,CAAC;MAC5DP,GAAG,CAACK,WAAW,CAACG,IAAI,CAAC,IAAI,EAAEK,KAAK,CAAC;MACjC,IAAI,CAAC,IAAI,CAACI,WAAW,IAAI,CAAC,IAAI,CAACC,eAAe,EAAE;QAC9C,MAAMlB,GAAG,CAACG,IAAI,CAACgB,KAAK,CAClB,IAAIC,KAAK,CAAC,yBAAyB,GAAG,IAAI,CAACb,QAAQ,CAAC,EACtD;UAAEc,IAAI,EAAE;QAAuC,CAC/C,CAAC;MACH;MACA,IAAI,CAACC,OAAO,GAAG,KAAK;MACpBX,QAAQ,CAAC,CAAC;IACZ,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZZ,QAAQ,CAACY,GAAG,CAAC;IACf;EACF;AAEF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}