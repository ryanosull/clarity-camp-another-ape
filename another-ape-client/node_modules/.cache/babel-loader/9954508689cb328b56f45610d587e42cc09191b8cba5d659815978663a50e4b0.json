{"ast":null,"code":"var AWS = require('../core');\n\n/**\n * Creates a token provider chain that searches for token in a list of\n * token providers specified by the {providers} property.\n *\n * By default, the chain will use the {defaultProviders} to resolve token.\n *\n * ## Setting Providers\n *\n * Each provider in the {providers} list should be a function that returns\n * a {AWS.Token} object, or a hardcoded token object. The function\n * form allows for delayed execution of the Token construction.\n *\n * ## Resolving Token from a Chain\n *\n * Call {resolve} to return the first valid token object that can be\n * loaded by the provider chain.\n *\n * For example, to resolve a chain with a custom provider that checks a file\n * on disk after the set of {defaultProviders}:\n *\n * ```javascript\n * var diskProvider = new FileTokenProvider('./token.json');\n * var chain = new AWS.TokenProviderChain();\n * chain.providers.push(diskProvider);\n * chain.resolve();\n * ```\n *\n * The above code will return the `diskProvider` object if the\n * file contains token and the `defaultProviders` do not contain\n * any token.\n *\n * @!attribute providers\n *   @return [Array<AWS.Token, Function>]\n *     a list of token objects or functions that return token\n *     objects. If the provider is a function, the function will be\n *     executed lazily when the provider needs to be checked for valid\n *     token. By default, this object will be set to the {defaultProviders}.\n *   @see defaultProviders\n */\nAWS.TokenProviderChain = AWS.util.inherit(AWS.Token, {\n  /**\n   * Creates a new TokenProviderChain with a default set of providers\n   * specified by {defaultProviders}.\n   */\n  constructor: function TokenProviderChain(providers) {\n    if (providers) {\n      this.providers = providers;\n    } else {\n      this.providers = AWS.TokenProviderChain.defaultProviders.slice(0);\n    }\n    this.resolveCallbacks = [];\n  },\n  /**\n   * @!method  resolvePromise()\n   *   Returns a 'thenable' promise.\n   *   Resolves the provider chain by searching for the first token in {providers}.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @callback fulfilledCallback function(token)\n   *     Called if the promise is fulfilled and the provider resolves the chain\n   *     to a token object\n   *     @param token [AWS.Token] the token object resolved by the provider chain.\n   *   @callback rejectedCallback function(error)\n   *     Called if the promise is rejected.\n   *     @param err [Error] the error object returned if no token is found.\n   *   @return [Promise] A promise that represents the state of the `resolve` method call.\n   *   @example Calling the `resolvePromise` method.\n   *     var promise = chain.resolvePromise();\n   *     promise.then(function(token) { ... }, function(err) { ... });\n   */\n\n  /**\n   * Resolves the provider chain by searching for the first token in {providers}.\n   *\n   * @callback callback function(err, token)\n   *   Called when the provider resolves the chain to a token object\n   *   or null if no token can be found.\n   *\n   *   @param err [Error] the error object returned if no token is found.\n   *   @param token [AWS.Token] the token object resolved by the provider chain.\n   * @return [AWS.TokenProviderChain] the provider, for chaining.\n   */\n  resolve: function resolve(callback) {\n    var self = this;\n    if (self.providers.length === 0) {\n      callback(new Error('No providers'));\n      return self;\n    }\n    if (self.resolveCallbacks.push(callback) === 1) {\n      var index = 0;\n      var providers = self.providers.slice(0);\n      function resolveNext(err, token) {\n        if (!err && token || index === providers.length) {\n          AWS.util.arrayEach(self.resolveCallbacks, function (callback) {\n            callback(err, token);\n          });\n          self.resolveCallbacks.length = 0;\n          return;\n        }\n        var provider = providers[index++];\n        if (typeof provider === 'function') {\n          token = provider.call();\n        } else {\n          token = provider;\n        }\n        if (token.get) {\n          token.get(function (getErr) {\n            resolveNext(getErr, getErr ? null : token);\n          });\n        } else {\n          resolveNext(null, token);\n        }\n      }\n      resolveNext();\n    }\n    return self;\n  }\n});\n\n/**\n * The default set of providers used by a vanilla TokenProviderChain.\n *\n * In the browser:\n *\n * ```javascript\n * AWS.TokenProviderChain.defaultProviders = []\n * ```\n *\n * In Node.js:\n *\n * ```javascript\n * AWS.TokenProviderChain.defaultProviders = [\n *   function () { return new AWS.SSOTokenProvider(); },\n * ]\n * ```\n */\nAWS.TokenProviderChain.defaultProviders = [];\n\n/**\n * @api private\n */\nAWS.TokenProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);\n};\n\n/**\n * @api private\n */\nAWS.TokenProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.resolvePromise;\n};\nAWS.util.addPromises(AWS.TokenProviderChain);","map":{"version":3,"names":["AWS","require","TokenProviderChain","util","inherit","Token","constructor","providers","defaultProviders","slice","resolveCallbacks","resolve","callback","self","length","Error","push","index","resolveNext","err","token","arrayEach","provider","call","get","getErr","addPromisesToClass","PromiseDependency","prototype","resolvePromise","promisifyMethod","deletePromisesFromClass","addPromises"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/token/token_provider_chain.js"],"sourcesContent":["var AWS = require('../core');\n\n/**\n * Creates a token provider chain that searches for token in a list of\n * token providers specified by the {providers} property.\n *\n * By default, the chain will use the {defaultProviders} to resolve token.\n *\n * ## Setting Providers\n *\n * Each provider in the {providers} list should be a function that returns\n * a {AWS.Token} object, or a hardcoded token object. The function\n * form allows for delayed execution of the Token construction.\n *\n * ## Resolving Token from a Chain\n *\n * Call {resolve} to return the first valid token object that can be\n * loaded by the provider chain.\n *\n * For example, to resolve a chain with a custom provider that checks a file\n * on disk after the set of {defaultProviders}:\n *\n * ```javascript\n * var diskProvider = new FileTokenProvider('./token.json');\n * var chain = new AWS.TokenProviderChain();\n * chain.providers.push(diskProvider);\n * chain.resolve();\n * ```\n *\n * The above code will return the `diskProvider` object if the\n * file contains token and the `defaultProviders` do not contain\n * any token.\n *\n * @!attribute providers\n *   @return [Array<AWS.Token, Function>]\n *     a list of token objects or functions that return token\n *     objects. If the provider is a function, the function will be\n *     executed lazily when the provider needs to be checked for valid\n *     token. By default, this object will be set to the {defaultProviders}.\n *   @see defaultProviders\n */\nAWS.TokenProviderChain = AWS.util.inherit(AWS.Token, {\n\n  /**\n   * Creates a new TokenProviderChain with a default set of providers\n   * specified by {defaultProviders}.\n   */\n  constructor: function TokenProviderChain(providers) {\n    if (providers) {\n      this.providers = providers;\n    } else {\n      this.providers = AWS.TokenProviderChain.defaultProviders.slice(0);\n    }\n    this.resolveCallbacks = [];\n  },\n\n  /**\n   * @!method  resolvePromise()\n   *   Returns a 'thenable' promise.\n   *   Resolves the provider chain by searching for the first token in {providers}.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @callback fulfilledCallback function(token)\n   *     Called if the promise is fulfilled and the provider resolves the chain\n   *     to a token object\n   *     @param token [AWS.Token] the token object resolved by the provider chain.\n   *   @callback rejectedCallback function(error)\n   *     Called if the promise is rejected.\n   *     @param err [Error] the error object returned if no token is found.\n   *   @return [Promise] A promise that represents the state of the `resolve` method call.\n   *   @example Calling the `resolvePromise` method.\n   *     var promise = chain.resolvePromise();\n   *     promise.then(function(token) { ... }, function(err) { ... });\n   */\n\n  /**\n   * Resolves the provider chain by searching for the first token in {providers}.\n   *\n   * @callback callback function(err, token)\n   *   Called when the provider resolves the chain to a token object\n   *   or null if no token can be found.\n   *\n   *   @param err [Error] the error object returned if no token is found.\n   *   @param token [AWS.Token] the token object resolved by the provider chain.\n   * @return [AWS.TokenProviderChain] the provider, for chaining.\n   */\n  resolve: function resolve(callback) {\n    var self = this;\n    if (self.providers.length === 0) {\n      callback(new Error('No providers'));\n      return self;\n    }\n\n    if (self.resolveCallbacks.push(callback) === 1) {\n      var index = 0;\n      var providers = self.providers.slice(0);\n\n      function resolveNext(err, token) {\n        if ((!err && token) || index === providers.length) {\n          AWS.util.arrayEach(self.resolveCallbacks, function (callback) {\n            callback(err, token);\n          });\n          self.resolveCallbacks.length = 0;\n          return;\n        }\n\n        var provider = providers[index++];\n        if (typeof provider === 'function') {\n          token = provider.call();\n        } else {\n          token = provider;\n        }\n\n        if (token.get) {\n          token.get(function (getErr) {\n            resolveNext(getErr, getErr ? null : token);\n          });\n        } else {\n          resolveNext(null, token);\n        }\n      }\n\n      resolveNext();\n    }\n\n    return self;\n  }\n});\n\n/**\n * The default set of providers used by a vanilla TokenProviderChain.\n *\n * In the browser:\n *\n * ```javascript\n * AWS.TokenProviderChain.defaultProviders = []\n * ```\n *\n * In Node.js:\n *\n * ```javascript\n * AWS.TokenProviderChain.defaultProviders = [\n *   function () { return new AWS.SSOTokenProvider(); },\n * ]\n * ```\n */\nAWS.TokenProviderChain.defaultProviders = [];\n\n/**\n * @api private\n */\nAWS.TokenProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);\n};\n\n/**\n * @api private\n */\nAWS.TokenProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.resolvePromise;\n};\n\nAWS.util.addPromises(AWS.TokenProviderChain);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}