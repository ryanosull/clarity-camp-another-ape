{"ast":null,"code":"import { bytesToHex } from '@stacks/common';\nimport { ClarityType, principalToString } from '.';\nfunction formatSpace(space, depth, end = false) {\n  if (!space) return ' ';\n  return `\\n${' '.repeat(space * (depth - (end ? 1 : 0)))}`;\n}\nfunction formatList(cv, space, depth = 1) {\n  if (cv.list.length === 0) return '(list)';\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = space ? formatSpace(space, depth, true) : '';\n  const items = cv.list.map(v => prettyPrintWithDepth(v, space, depth)).join(spaceBefore);\n  return `(list${spaceBefore}${items}${endSpace})`;\n}\nfunction formatTuple(cv, space, depth = 1) {\n  if (Object.keys(cv.data).length === 0) return '{}';\n  const items = [];\n  for (const [key, value] of Object.entries(cv.data)) {\n    items.push(`${key}: ${prettyPrintWithDepth(value, space, depth)}`);\n  }\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = formatSpace(space, depth, true);\n  return `{${spaceBefore}${items.join(`,${spaceBefore}`)}${endSpace}}`;\n}\nfunction exhaustiveCheck(param) {\n  throw new Error(`invalid clarity value type: ${param}`);\n}\nfunction prettyPrintWithDepth(cv, space = 0, depth) {\n  if (cv.type === ClarityType.BoolFalse) return 'false';\n  if (cv.type === ClarityType.BoolTrue) return 'true';\n  if (cv.type === ClarityType.Int) return cv.value.toString();\n  if (cv.type === ClarityType.UInt) return `u${cv.value.toString()}`;\n  if (cv.type === ClarityType.StringASCII) return `\"${cv.data}\"`;\n  if (cv.type === ClarityType.StringUTF8) return `u\"${cv.data}\"`;\n  if (cv.type === ClarityType.PrincipalContract) return `'${principalToString(cv)}`;\n  if (cv.type === ClarityType.PrincipalStandard) return `'${principalToString(cv)}`;\n  if (cv.type === ClarityType.Buffer) return `0x${bytesToHex(cv.buffer)}`;\n  if (cv.type === ClarityType.OptionalNone) return 'none';\n  if (cv.type === ClarityType.OptionalSome) return `(some ${prettyPrintWithDepth(cv.value, space, depth)})`;\n  if (cv.type === ClarityType.ResponseOk) return `(ok ${prettyPrintWithDepth(cv.value, space, depth)})`;\n  if (cv.type === ClarityType.ResponseErr) return `(err ${prettyPrintWithDepth(cv.value, space, depth)})`;\n  if (cv.type === ClarityType.List) {\n    return formatList(cv, space, depth + 1);\n  }\n  if (cv.type === ClarityType.Tuple) {\n    return formatTuple(cv, space, depth + 1);\n  }\n  exhaustiveCheck(cv);\n}\nexport function prettyPrint(cv, space = 0) {\n  return prettyPrintWithDepth(cv, space, 0);\n}","map":{"version":3,"names":["bytesToHex","ClarityType","principalToString","formatSpace","space","depth","end","repeat","formatList","cv","list","length","spaceBefore","endSpace","items","map","v","prettyPrintWithDepth","join","formatTuple","Object","keys","data","key","value","entries","push","exhaustiveCheck","param","Error","type","BoolFalse","BoolTrue","Int","toString","UInt","StringASCII","StringUTF8","PrincipalContract","PrincipalStandard","Buffer","buffer","OptionalNone","OptionalSome","ResponseOk","ResponseErr","List","Tuple","prettyPrint"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/transactions/src/clarity/prettyPrint.ts"],"sourcesContent":["/*\n  Format Clarity Values into Clarity style readable strings\n  eg:\n  `Cl.uint(1)` => u1\n  `Cl.list(Cl.uint(1))` => (list u1)\n  `Cl.tuple({ id: u1 })` => { id: u1 }\n*/\n\nimport { bytesToHex } from '@stacks/common';\nimport { ClarityType, ClarityValue, ListCV, TupleCV, principalToString } from '.';\n\nfunction formatSpace(space: number, depth: number, end = false) {\n  if (!space) return ' ';\n  return `\\n${' '.repeat(space * (depth - (end ? 1 : 0)))}`;\n}\n\n/**\n * @description format List clarity values in clarity style strings\n * with the ability to prettify the result with line break end space indentation\n * @example\n * ```ts\n * formatList(Cl.list([Cl.uint(1)]))\n * // (list u1)\n *\n * formatList(Cl.list([Cl.uint(1)]), 2)\n * // (list\n * //   u1\n * // )\n * ```\n */\nfunction formatList(cv: ListCV, space: number, depth = 1): string {\n  if (cv.list.length === 0) return '(list)';\n\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = space ? formatSpace(space, depth, true) : '';\n\n  const items = cv.list.map(v => prettyPrintWithDepth(v, space, depth)).join(spaceBefore);\n\n  return `(list${spaceBefore}${items}${endSpace})`;\n}\n\n/**\n * @description format Tuple clarity values in clarity style strings\n * with the ability to prettify the result with line break end space indentation\n * @example\n * ```ts\n * formatTuple(Cl.tuple({ id: Cl.uint(1) }))\n * // { id: u1 }\n *\n * formatTuple(Cl.tuple({ id: Cl.uint(1) }, 2))\n * // {\n * //   id: u1\n * // }\n * ```\n */\nfunction formatTuple(cv: TupleCV, space: number, depth = 1): string {\n  if (Object.keys(cv.data).length === 0) return '{}';\n\n  const items: string[] = [];\n  for (const [key, value] of Object.entries(cv.data)) {\n    items.push(`${key}: ${prettyPrintWithDepth(value, space, depth)}`);\n  }\n\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = formatSpace(space, depth, true);\n\n  return `{${spaceBefore}${items.join(`,${spaceBefore}`)}${endSpace}}`;\n}\n\nfunction exhaustiveCheck(param: never): never {\n  throw new Error(`invalid clarity value type: ${param}`);\n}\n\n// the exported function should not expose the `depth` argument\nfunction prettyPrintWithDepth(cv: ClarityValue, space = 0, depth: number): string {\n  if (cv.type === ClarityType.BoolFalse) return 'false';\n  if (cv.type === ClarityType.BoolTrue) return 'true';\n\n  if (cv.type === ClarityType.Int) return cv.value.toString();\n  if (cv.type === ClarityType.UInt) return `u${cv.value.toString()}`;\n\n  if (cv.type === ClarityType.StringASCII) return `\"${cv.data}\"`;\n  if (cv.type === ClarityType.StringUTF8) return `u\"${cv.data}\"`;\n\n  if (cv.type === ClarityType.PrincipalContract) return `'${principalToString(cv)}`;\n  if (cv.type === ClarityType.PrincipalStandard) return `'${principalToString(cv)}`;\n\n  if (cv.type === ClarityType.Buffer) return `0x${bytesToHex(cv.buffer)}`;\n\n  if (cv.type === ClarityType.OptionalNone) return 'none';\n  if (cv.type === ClarityType.OptionalSome)\n    return `(some ${prettyPrintWithDepth(cv.value, space, depth)})`;\n\n  if (cv.type === ClarityType.ResponseOk)\n    return `(ok ${prettyPrintWithDepth(cv.value, space, depth)})`;\n  if (cv.type === ClarityType.ResponseErr)\n    return `(err ${prettyPrintWithDepth(cv.value, space, depth)})`;\n\n  if (cv.type === ClarityType.List) {\n    return formatList(cv, space, depth + 1);\n  }\n  if (cv.type === ClarityType.Tuple) {\n    return formatTuple(cv, space, depth + 1);\n  }\n\n  // make sure that we exhausted all ClarityTypes\n  exhaustiveCheck(cv);\n}\n\n/**\n * @description format clarity values in clarity style strings\n * with the ability to prettify the result with line break end space indentation\n * @param cv The Clarity Value to format\n * @param space The indentation size of the output string. There's no indentation and no line breaks if space = 0\n * @example\n * ```ts\n * prettyPrint(Cl.tuple({ id: Cl.some(Cl.uint(1)) }))\n * // { id: (some u1) }\n *\n * prettyPrint(Cl.tuple({ id: Cl.uint(1) }, 2))\n * // {\n * //   id: u1\n * // }\n * ```\n */\nexport function prettyPrint(cv: ClarityValue, space = 0): string {\n  return prettyPrintWithDepth(cv, space, 0);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}