{"ast":null,"code":"const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst getFile = require('../utils/get-file');\nconst getHashFromKey = require('../utils/get-hash-from-key');\nconst getPublicUrl = require('../utils/get-public-url');\nconst {\n  GET_OPTIONS\n} = require('../utils/constants');\nconst get = async ({\n  apiKey,\n  apiSecret,\n  key,\n  bucket,\n  getOptions = [GET_OPTIONS.DATA]\n}) => {\n  const fileData = {\n    [GET_OPTIONS.KEY]: key,\n    [GET_OPTIONS.BUCKET]: bucket\n  };\n\n  // validate getOptions\n  let invalidOption;\n  const validOptions = Object.keys(GET_OPTIONS).map(optionKey => GET_OPTIONS[optionKey]);\n  getOptions.forEach(option => {\n    if (!validOptions.includes(option)) {\n      invalidOption = option;\n    }\n  });\n  if (invalidOption) {\n    throw `Invalid option ${invalidOption}`;\n  }\n  if (getOptions.length === 0) {\n    throw 'No Options specified';\n  }\n  let s3;\n  try {\n    s3 = initS3(apiKey, apiSecret);\n  } catch (error) {\n    throw error;\n  }\n  if (!key) {\n    throw 'No file key was specified';\n  }\n  if (!fileData[GET_OPTIONS.BUCKET]) {\n    try {\n      fileData[GET_OPTIONS.BUCKET] = await getBucket(s3);\n    } catch (error) {\n      throw error;\n    }\n  }\n  if (getOptions.includes(GET_OPTIONS.PUBLIC_URL)) {\n    const publicUrl = getPublicUrl(fileData[GET_OPTIONS.BUCKET], fileData[GET_OPTIONS.KEY]);\n    fileData[GET_OPTIONS.PUBLIC_URL] = publicUrl;\n  }\n  if (getOptions.includes(GET_OPTIONS.HASH)) {\n    try {\n      fileData[GET_OPTIONS.HASH] = await getHashFromKey(fileData[GET_OPTIONS.BUCKET], fileData[GET_OPTIONS.KEY]);\n    } catch (error) {\n      throw error;\n    }\n  }\n  if (getOptions.includes(GET_OPTIONS.DATA)) {\n    try {\n      const params = {\n        Bucket: fileData[GET_OPTIONS.BUCKET],\n        Key: fileData[GET_OPTIONS.KEY]\n      };\n      const data = await getFile(s3, params);\n      fileData[GET_OPTIONS.DATA] = data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  const returnData = {};\n  getOptions.forEach(option => {\n    returnData[option] = fileData[option];\n  });\n  return returnData;\n};\nmodule.exports = get;","map":{"version":3,"names":["initS3","require","getBucket","getFile","getHashFromKey","getPublicUrl","GET_OPTIONS","get","apiKey","apiSecret","key","bucket","getOptions","DATA","fileData","KEY","BUCKET","invalidOption","validOptions","Object","keys","map","optionKey","forEach","option","includes","length","s3","error","PUBLIC_URL","publicUrl","HASH","params","Bucket","Key","data","returnData","module","exports"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@fleekhq/fleek-storage-js/methods/get.js"],"sourcesContent":["const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst getFile = require('../utils/get-file');\nconst getHashFromKey = require('../utils/get-hash-from-key');\nconst getPublicUrl = require('../utils/get-public-url');\nconst { GET_OPTIONS } = require('../utils/constants');\n\nconst get = async ({\n  apiKey,\n  apiSecret,\n  key,\n  bucket,\n  getOptions = [GET_OPTIONS.DATA],\n}) => {\n  const fileData = {\n    [GET_OPTIONS.KEY]: key,\n    [GET_OPTIONS.BUCKET]: bucket,\n  };\n\n  // validate getOptions\n  let invalidOption;\n  const validOptions = Object.keys(GET_OPTIONS).map(optionKey => GET_OPTIONS[optionKey])\n  getOptions.forEach(option => {\n    if (!validOptions.includes(option)){\n      invalidOption = option;\n    }\n  })\n\n  if (invalidOption) {\n    throw `Invalid option ${invalidOption}`;\n  }\n\n  if (getOptions.length === 0) {\n    throw 'No Options specified'\n  }\n\n  let s3;\n  try {\n    s3 = initS3(\n      apiKey,\n      apiSecret,\n    );\n  } catch(error) {\n    throw error;\n  }\n\n  if (!key) {\n    throw 'No file key was specified'\n  }\n  \n  if (!fileData[GET_OPTIONS.BUCKET]) {\n    try {\n      fileData[GET_OPTIONS.BUCKET] = await getBucket(s3);\n    } catch(error) {\n      throw error;\n    }\n  }\n  \n  if(getOptions.includes(GET_OPTIONS.PUBLIC_URL)) {\n     const publicUrl = getPublicUrl(\n      fileData[GET_OPTIONS.BUCKET], fileData[GET_OPTIONS.KEY]\n    );\n    fileData[GET_OPTIONS.PUBLIC_URL] = publicUrl;\n  }\n\n  if(getOptions.includes(GET_OPTIONS.HASH)) {\n    try {\n      fileData[GET_OPTIONS.HASH] = await getHashFromKey(fileData[GET_OPTIONS.BUCKET], fileData[GET_OPTIONS.KEY]);\n    } catch(error) {\n      throw error;\n    }\n  }\n\n  if (getOptions.includes(GET_OPTIONS.DATA)) {\n    try {\n      const params = {\n        Bucket: fileData[GET_OPTIONS.BUCKET],\n        Key: fileData[GET_OPTIONS.KEY],\n      };\n  \n      const data = await getFile(s3, params);\n      fileData[GET_OPTIONS.DATA] = data;\n    } catch(error) {\n      throw error;\n    }\n  }\n\n  const returnData = {};\n  getOptions.forEach(option => {\n    returnData[option] = fileData[option]\n  });\n\n  return returnData;\n};\n\nmodule.exports = get;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}