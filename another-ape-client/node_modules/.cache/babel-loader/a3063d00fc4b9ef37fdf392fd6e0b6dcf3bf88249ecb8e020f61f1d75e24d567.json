{"ast":null,"code":"const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst getFileList = require('../utils/get-file-list');\nconst getHashFromKey = require('../utils/get-hash-from-key');\nconst getPublicUrl = require('../utils/get-public-url');\nconst {\n  GET_OPTIONS\n} = require('../utils/constants');\nconst listFiles = async ({\n  apiKey,\n  apiSecret,\n  bucket = null,\n  prefix = '',\n  getOptions = [GET_OPTIONS.KEY, GET_OPTIONS.BUCKET, GET_OPTIONS.PUBLIC_URL]\n}) => {\n  const possibleGetOptions = [GET_OPTIONS.KEY, GET_OPTIONS.BUCKET, GET_OPTIONS.HASH, GET_OPTIONS.PUBLIC_URL];\n  if (getOptions.length === 0) {\n    throw 'No getOptions have been specified';\n  }\n  let wrongGetOption = getOptions.forEach(option => {\n    if (!possibleGetOptions.includes(option)) {\n      wrongGetOption = option;\n    }\n  });\n  if (wrongGetOption) {\n    throw 'Unacceptable getOptions parameter';\n  }\n  try {\n    const s3 = initS3(apiKey, apiSecret);\n    let bucketName = bucket;\n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n    const files = await getFileList(s3, bucketName, prefix);\n    const promises = files.map(async (key, index) => {\n      let hash;\n      if (getOptions.includes(GET_OPTIONS.HASH)) {\n        hash = await getHashFromKey(bucketName, key);\n      }\n      return {\n        ...(getOptions.includes(GET_OPTIONS.KEY) && {\n          key\n        }),\n        ...(getOptions.includes(GET_OPTIONS.BUCKET) && {\n          bucket: bucketName\n        }),\n        ...(getOptions.includes(GET_OPTIONS.HASH) && {\n          hash\n        }),\n        ...(getOptions.includes(GET_OPTIONS.PUBLIC_URL) && {\n          publicUrl: getPublicUrl(bucketName, key)\n        })\n      };\n    });\n    return Promise.all(promises);\n  } catch (e) {\n    throw e;\n  }\n};\nmodule.exports = listFiles;","map":{"version":3,"names":["initS3","require","getBucket","getFileList","getHashFromKey","getPublicUrl","GET_OPTIONS","listFiles","apiKey","apiSecret","bucket","prefix","getOptions","KEY","BUCKET","PUBLIC_URL","possibleGetOptions","HASH","length","wrongGetOption","forEach","option","includes","s3","bucketName","files","promises","map","key","index","hash","publicUrl","Promise","all","e","module","exports"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@fleekhq/fleek-storage-js/methods/listFiles.js"],"sourcesContent":["const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst getFileList = require('../utils/get-file-list');\nconst getHashFromKey = require('../utils/get-hash-from-key');\nconst getPublicUrl = require('../utils/get-public-url');\nconst { GET_OPTIONS } = require('../utils/constants');\n\nconst listFiles = async ({\n  apiKey,\n  apiSecret,\n  bucket = null,\n  prefix = '',\n  getOptions = [GET_OPTIONS.KEY, GET_OPTIONS.BUCKET, GET_OPTIONS.PUBLIC_URL],\n}) => {\n  const possibleGetOptions = [\n    GET_OPTIONS.KEY,\n    GET_OPTIONS.BUCKET,\n    GET_OPTIONS.HASH,\n    GET_OPTIONS.PUBLIC_URL,\n  ];\n\n  if (getOptions.length === 0) {\n    throw 'No getOptions have been specified';\n  }\n\n  let wrongGetOption = getOptions.forEach(option => {\n    if (!possibleGetOptions.includes(option)) {\n      wrongGetOption = option;\n    }\n  })\n\n  if(wrongGetOption) {\n    throw 'Unacceptable getOptions parameter';\n  }\n\n  try {\n    const s3 = initS3(\n      apiKey,\n      apiSecret,\n    );\n\n    let bucketName = bucket;\n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n\n    const files = await getFileList(s3, bucketName, prefix);\n\n    const promises = files.map(async (key, index) => {\n      let hash;\n      \n      if (getOptions.includes(GET_OPTIONS.HASH)) {\n        hash = await getHashFromKey(bucketName, key);\n      }\n\n      return ({\n        ...(getOptions.includes(GET_OPTIONS.KEY) && { key }),\n        ...(getOptions.includes(GET_OPTIONS.BUCKET) && { bucket: bucketName }),\n        ...(getOptions.includes(GET_OPTIONS.HASH) && { hash }),\n        ...(getOptions.includes(GET_OPTIONS.PUBLIC_URL) && { publicUrl: getPublicUrl(bucketName, key) }),\n      });\n    });\n\n    return Promise.all(promises);\n  } catch(e) {\n    throw e;\n  }\n};\n\nmodule.exports = listFiles;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC1C,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAME,WAAW,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AACrD,MAAMG,cAAc,GAAGH,OAAO,CAAC,4BAA4B,CAAC;AAC5D,MAAMI,YAAY,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AACvD,MAAM;EAAEK;AAAY,CAAC,GAAGL,OAAO,CAAC,oBAAoB,CAAC;AAErD,MAAMM,SAAS,GAAG,MAAAA,CAAO;EACvBC,MAAM;EACNC,SAAS;EACTC,MAAM,GAAG,IAAI;EACbC,MAAM,GAAG,EAAE;EACXC,UAAU,GAAG,CAACN,WAAW,CAACO,GAAG,EAAEP,WAAW,CAACQ,MAAM,EAAER,WAAW,CAACS,UAAU;AAC3E,CAAC,KAAK;EACJ,MAAMC,kBAAkB,GAAG,CACzBV,WAAW,CAACO,GAAG,EACfP,WAAW,CAACQ,MAAM,EAClBR,WAAW,CAACW,IAAI,EAChBX,WAAW,CAACS,UAAU,CACvB;EAED,IAAIH,UAAU,CAACM,MAAM,KAAK,CAAC,EAAE;IAC3B,MAAM,mCAAmC;EAC3C;EAEA,IAAIC,cAAc,GAAGP,UAAU,CAACQ,OAAO,CAACC,MAAM,IAAI;IAChD,IAAI,CAACL,kBAAkB,CAACM,QAAQ,CAACD,MAAM,CAAC,EAAE;MACxCF,cAAc,GAAGE,MAAM;IACzB;EACF,CAAC,CAAC;EAEF,IAAGF,cAAc,EAAE;IACjB,MAAM,mCAAmC;EAC3C;EAEA,IAAI;IACF,MAAMI,EAAE,GAAGvB,MAAM,CACfQ,MAAM,EACNC,SACF,CAAC;IAED,IAAIe,UAAU,GAAGd,MAAM;IACvB,IAAI,CAACc,UAAU,EAAE;MACfA,UAAU,GAAG,MAAMtB,SAAS,CAACqB,EAAE,CAAC;IAClC;IAEA,MAAME,KAAK,GAAG,MAAMtB,WAAW,CAACoB,EAAE,EAAEC,UAAU,EAAEb,MAAM,CAAC;IAEvD,MAAMe,QAAQ,GAAGD,KAAK,CAACE,GAAG,CAAC,OAAOC,GAAG,EAAEC,KAAK,KAAK;MAC/C,IAAIC,IAAI;MAER,IAAIlB,UAAU,CAACU,QAAQ,CAAChB,WAAW,CAACW,IAAI,CAAC,EAAE;QACzCa,IAAI,GAAG,MAAM1B,cAAc,CAACoB,UAAU,EAAEI,GAAG,CAAC;MAC9C;MAEA,OAAQ;QACN,IAAIhB,UAAU,CAACU,QAAQ,CAAChB,WAAW,CAACO,GAAG,CAAC,IAAI;UAAEe;QAAI,CAAC,CAAC;QACpD,IAAIhB,UAAU,CAACU,QAAQ,CAAChB,WAAW,CAACQ,MAAM,CAAC,IAAI;UAAEJ,MAAM,EAAEc;QAAW,CAAC,CAAC;QACtE,IAAIZ,UAAU,CAACU,QAAQ,CAAChB,WAAW,CAACW,IAAI,CAAC,IAAI;UAAEa;QAAK,CAAC,CAAC;QACtD,IAAIlB,UAAU,CAACU,QAAQ,CAAChB,WAAW,CAACS,UAAU,CAAC,IAAI;UAAEgB,SAAS,EAAE1B,YAAY,CAACmB,UAAU,EAAEI,GAAG;QAAE,CAAC;MACjG,CAAC;IACH,CAAC,CAAC;IAEF,OAAOI,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;EAC9B,CAAC,CAAC,OAAMQ,CAAC,EAAE;IACT,MAAMA,CAAC;EACT;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG7B,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}