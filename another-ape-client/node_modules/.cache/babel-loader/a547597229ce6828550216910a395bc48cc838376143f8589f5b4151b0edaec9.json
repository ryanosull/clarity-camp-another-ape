{"ast":null,"code":"var AWS = require('../core');\nvar STS = require('../../clients/sts');\nvar iniLoader = AWS.util.iniLoader;\nvar ASSUME_ROLE_DEFAULT_REGION = 'us-east-1';\n\n/**\n * Represents credentials loaded from shared credentials file\n * (defaulting to ~/.aws/credentials or defined by the\n * `AWS_SHARED_CREDENTIALS_FILE` environment variable).\n *\n * ## Using the shared credentials file\n *\n * This provider is checked by default in the Node.js environment. To use the\n * credentials file provider, simply add your access and secret keys to the\n * ~/.aws/credentials file in the following format:\n *\n *     [default]\n *     aws_access_key_id = AKID...\n *     aws_secret_access_key = YOUR_SECRET_KEY\n *\n * ## Using custom profiles\n *\n * The SDK supports loading credentials for separate profiles. This can be done\n * in two ways:\n *\n * 1. Set the `AWS_PROFILE` environment variable in your process prior to\n *    loading the SDK.\n * 2. Directly load the AWS.SharedIniFileCredentials provider:\n *\n * ```javascript\n * var creds = new AWS.SharedIniFileCredentials({profile: 'myprofile'});\n * AWS.config.credentials = creds;\n * ```\n *\n * @!macro nobrowser\n */\nAWS.SharedIniFileCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new SharedIniFileCredentials object.\n   *\n   * @param options [map] a set of options\n   * @option options profile [String] (AWS_PROFILE env var or 'default')\n   *   the name of the profile to load.\n   * @option options filename [String] ('~/.aws/credentials' or defined by\n   *   AWS_SHARED_CREDENTIALS_FILE process env var)\n   *   the filename to use when loading credentials.\n   * @option options disableAssumeRole [Boolean] (false) True to disable\n   *   support for profiles that assume an IAM role. If true, and an assume\n   *   role profile is selected, an error is raised.\n   * @option options preferStaticCredentials [Boolean] (false) True to\n   *   prefer static credentials to role_arn if both are present.\n   * @option options tokenCodeFn [Function] (null) Function to provide\n   *   STS Assume Role TokenCode, if mfa_serial is provided for profile in ini\n   *   file. Function is called with value of mfa_serial and callback, and\n   *   should provide the TokenCode or an error to the callback in the format\n   *   callback(err, token)\n   * @option options callback [Function] (err) Credentials are eagerly loaded\n   *   by the constructor. When the callback is called with no error, the\n   *   credentials have been loaded successfully.\n   * @option options httpOptions [map] A set of options to pass to the low-level\n   *   HTTP request. Currently supported options are:\n   *   * **proxy** [String] &mdash; the URL to proxy requests through\n   *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform\n   *     HTTP requests with. Used for connection pooling. Defaults to the global\n   *     agent (`http.globalAgent`) for non-SSL connections. Note that for\n   *     SSL connections, a special Agent object is used in order to enable\n   *     peer certificate verification. This feature is only available in the\n   *     Node.js environment.\n   *   * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after\n   *     failing to establish a connection with the server after\n   *     `connectTimeout` milliseconds. This timeout has no effect once a socket\n   *     connection has been established.\n   *   * **timeout** [Integer] &mdash; The number of milliseconds a request can\n   *     take before automatically being terminated.\n   *     Defaults to two minutes (120000).\n   */\n  constructor: function SharedIniFileCredentials(options) {\n    AWS.Credentials.call(this);\n    options = options || {};\n    this.filename = options.filename;\n    this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n    this.disableAssumeRole = Boolean(options.disableAssumeRole);\n    this.preferStaticCredentials = Boolean(options.preferStaticCredentials);\n    this.tokenCodeFn = options.tokenCodeFn || null;\n    this.httpOptions = options.httpOptions || null;\n    this.get(options.callback || AWS.util.fn.noop);\n  },\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    try {\n      var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader, this.filename);\n      var profile = profiles[this.profile] || {};\n      if (Object.keys(profile).length === 0) {\n        throw AWS.util.error(new Error('Profile ' + this.profile + ' not found'), {\n          code: 'SharedIniFileCredentialsProviderFailure'\n        });\n      }\n\n      /*\n      In the CLI, the presence of both a role_arn and static credentials have\n      different meanings depending on how many profiles have been visited. For\n      the first profile processed, role_arn takes precedence over any static\n      credentials, but for all subsequent profiles, static credentials are\n      used if present, and only in their absence will the profile's\n      source_profile and role_arn keys be used to load another set of\n      credentials. This var is intended to yield compatible behaviour in this\n      sdk.\n      */\n      var preferStaticCredentialsToRoleArn = Boolean(this.preferStaticCredentials && profile['aws_access_key_id'] && profile['aws_secret_access_key']);\n      if (profile['role_arn'] && !preferStaticCredentialsToRoleArn) {\n        this.loadRoleProfile(profiles, profile, function (err, data) {\n          if (err) {\n            callback(err);\n          } else {\n            self.expired = false;\n            self.accessKeyId = data.Credentials.AccessKeyId;\n            self.secretAccessKey = data.Credentials.SecretAccessKey;\n            self.sessionToken = data.Credentials.SessionToken;\n            self.expireTime = data.Credentials.Expiration;\n            callback(null);\n          }\n        });\n        return;\n      }\n      this.accessKeyId = profile['aws_access_key_id'];\n      this.secretAccessKey = profile['aws_secret_access_key'];\n      this.sessionToken = profile['aws_session_token'];\n      if (!this.accessKeyId || !this.secretAccessKey) {\n        throw AWS.util.error(new Error('Credentials not set for profile ' + this.profile), {\n          code: 'SharedIniFileCredentialsProviderFailure'\n        });\n      }\n      this.expired = false;\n      callback(null);\n    } catch (err) {\n      callback(err);\n    }\n  },\n  /**\n   * Loads the credentials from the shared credentials file\n   *\n   * @callback callback function(err)\n   *   Called after the shared INI file on disk is read and parsed. When this\n   *   callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    iniLoader.clearCachedFiles();\n    this.coalesceRefresh(callback || AWS.util.fn.callback, this.disableAssumeRole);\n  },\n  /**\n   * @api private\n   */\n  loadRoleProfile: function loadRoleProfile(creds, roleProfile, callback) {\n    if (this.disableAssumeRole) {\n      throw AWS.util.error(new Error('Role assumption profiles are disabled. ' + 'Failed to load profile ' + this.profile + ' from ' + creds.filename), {\n        code: 'SharedIniFileCredentialsProviderFailure'\n      });\n    }\n    var self = this;\n    var roleArn = roleProfile['role_arn'];\n    var roleSessionName = roleProfile['role_session_name'];\n    var externalId = roleProfile['external_id'];\n    var mfaSerial = roleProfile['mfa_serial'];\n    var sourceProfileName = roleProfile['source_profile'];\n    var durationSeconds = parseInt(roleProfile['duration_seconds'], 10) || undefined;\n\n    // From experimentation, the following behavior mimics the AWS CLI:\n    //\n    // 1. Use region from the profile if present.\n    // 2. Otherwise fall back to N. Virginia (global endpoint).\n    //\n    // It is necessary to do the fallback explicitly, because if\n    // 'AWS_STS_REGIONAL_ENDPOINTS=regional', the underlying STS client will\n    // otherwise throw an error if region is left 'undefined'.\n    //\n    // Experimentation shows that the AWS CLI (tested at version 1.18.136)\n    // ignores the following potential sources of a region for the purposes of\n    // this AssumeRole call:\n    //\n    // - The [default] profile\n    // - The AWS_REGION environment variable\n    //\n    // Ignoring the [default] profile for the purposes of AssumeRole is arguably\n    // a bug in the CLI since it does use the [default] region for service\n    // calls... but right now we're matching behavior of the other tool.\n    var profileRegion = roleProfile['region'] || ASSUME_ROLE_DEFAULT_REGION;\n    if (!sourceProfileName) {\n      throw AWS.util.error(new Error('source_profile is not set using profile ' + this.profile), {\n        code: 'SharedIniFileCredentialsProviderFailure'\n      });\n    }\n    var sourceProfileExistanceTest = creds[sourceProfileName];\n    if (typeof sourceProfileExistanceTest !== 'object') {\n      throw AWS.util.error(new Error('source_profile ' + sourceProfileName + ' using profile ' + this.profile + ' does not exist'), {\n        code: 'SharedIniFileCredentialsProviderFailure'\n      });\n    }\n    var sourceCredentials = new AWS.SharedIniFileCredentials(AWS.util.merge(this.options || {}, {\n      profile: sourceProfileName,\n      preferStaticCredentials: true\n    }));\n    this.roleArn = roleArn;\n    var sts = new STS({\n      credentials: sourceCredentials,\n      region: profileRegion,\n      httpOptions: this.httpOptions\n    });\n    var roleParams = {\n      DurationSeconds: durationSeconds,\n      RoleArn: roleArn,\n      RoleSessionName: roleSessionName || 'aws-sdk-js-' + Date.now()\n    };\n    if (externalId) {\n      roleParams.ExternalId = externalId;\n    }\n    if (mfaSerial && self.tokenCodeFn) {\n      roleParams.SerialNumber = mfaSerial;\n      self.tokenCodeFn(mfaSerial, function (err, token) {\n        if (err) {\n          var message;\n          if (err instanceof Error) {\n            message = err.message;\n          } else {\n            message = err;\n          }\n          callback(AWS.util.error(new Error('Error fetching MFA token: ' + message), {\n            code: 'SharedIniFileCredentialsProviderFailure'\n          }));\n          return;\n        }\n        roleParams.TokenCode = token;\n        sts.assumeRole(roleParams, callback);\n      });\n      return;\n    }\n    sts.assumeRole(roleParams, callback);\n  }\n});","map":{"version":3,"names":["AWS","require","STS","iniLoader","util","ASSUME_ROLE_DEFAULT_REGION","SharedIniFileCredentials","inherit","Credentials","constructor","options","call","filename","profile","process","env","AWS_PROFILE","defaultProfile","disableAssumeRole","Boolean","preferStaticCredentials","tokenCodeFn","httpOptions","get","callback","fn","noop","load","self","profiles","getProfilesFromSharedConfig","Object","keys","length","error","Error","code","preferStaticCredentialsToRoleArn","loadRoleProfile","err","data","expired","accessKeyId","AccessKeyId","secretAccessKey","SecretAccessKey","sessionToken","SessionToken","expireTime","Expiration","refresh","clearCachedFiles","coalesceRefresh","creds","roleProfile","roleArn","roleSessionName","externalId","mfaSerial","sourceProfileName","durationSeconds","parseInt","undefined","profileRegion","sourceProfileExistanceTest","sourceCredentials","merge","sts","credentials","region","roleParams","DurationSeconds","RoleArn","RoleSessionName","Date","now","ExternalId","SerialNumber","token","message","TokenCode","assumeRole"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/credentials/shared_ini_file_credentials.js"],"sourcesContent":["var AWS = require('../core');\nvar STS = require('../../clients/sts');\nvar iniLoader = AWS.util.iniLoader;\n\nvar ASSUME_ROLE_DEFAULT_REGION = 'us-east-1';\n\n/**\n * Represents credentials loaded from shared credentials file\n * (defaulting to ~/.aws/credentials or defined by the\n * `AWS_SHARED_CREDENTIALS_FILE` environment variable).\n *\n * ## Using the shared credentials file\n *\n * This provider is checked by default in the Node.js environment. To use the\n * credentials file provider, simply add your access and secret keys to the\n * ~/.aws/credentials file in the following format:\n *\n *     [default]\n *     aws_access_key_id = AKID...\n *     aws_secret_access_key = YOUR_SECRET_KEY\n *\n * ## Using custom profiles\n *\n * The SDK supports loading credentials for separate profiles. This can be done\n * in two ways:\n *\n * 1. Set the `AWS_PROFILE` environment variable in your process prior to\n *    loading the SDK.\n * 2. Directly load the AWS.SharedIniFileCredentials provider:\n *\n * ```javascript\n * var creds = new AWS.SharedIniFileCredentials({profile: 'myprofile'});\n * AWS.config.credentials = creds;\n * ```\n *\n * @!macro nobrowser\n */\nAWS.SharedIniFileCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new SharedIniFileCredentials object.\n   *\n   * @param options [map] a set of options\n   * @option options profile [String] (AWS_PROFILE env var or 'default')\n   *   the name of the profile to load.\n   * @option options filename [String] ('~/.aws/credentials' or defined by\n   *   AWS_SHARED_CREDENTIALS_FILE process env var)\n   *   the filename to use when loading credentials.\n   * @option options disableAssumeRole [Boolean] (false) True to disable\n   *   support for profiles that assume an IAM role. If true, and an assume\n   *   role profile is selected, an error is raised.\n   * @option options preferStaticCredentials [Boolean] (false) True to\n   *   prefer static credentials to role_arn if both are present.\n   * @option options tokenCodeFn [Function] (null) Function to provide\n   *   STS Assume Role TokenCode, if mfa_serial is provided for profile in ini\n   *   file. Function is called with value of mfa_serial and callback, and\n   *   should provide the TokenCode or an error to the callback in the format\n   *   callback(err, token)\n   * @option options callback [Function] (err) Credentials are eagerly loaded\n   *   by the constructor. When the callback is called with no error, the\n   *   credentials have been loaded successfully.\n   * @option options httpOptions [map] A set of options to pass to the low-level\n   *   HTTP request. Currently supported options are:\n   *   * **proxy** [String] &mdash; the URL to proxy requests through\n   *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform\n   *     HTTP requests with. Used for connection pooling. Defaults to the global\n   *     agent (`http.globalAgent`) for non-SSL connections. Note that for\n   *     SSL connections, a special Agent object is used in order to enable\n   *     peer certificate verification. This feature is only available in the\n   *     Node.js environment.\n   *   * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after\n   *     failing to establish a connection with the server after\n   *     `connectTimeout` milliseconds. This timeout has no effect once a socket\n   *     connection has been established.\n   *   * **timeout** [Integer] &mdash; The number of milliseconds a request can\n   *     take before automatically being terminated.\n   *     Defaults to two minutes (120000).\n   */\n  constructor: function SharedIniFileCredentials(options) {\n    AWS.Credentials.call(this);\n\n    options = options || {};\n\n    this.filename = options.filename;\n    this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n    this.disableAssumeRole = Boolean(options.disableAssumeRole);\n    this.preferStaticCredentials = Boolean(options.preferStaticCredentials);\n    this.tokenCodeFn = options.tokenCodeFn || null;\n    this.httpOptions = options.httpOptions || null;\n    this.get(options.callback || AWS.util.fn.noop);\n  },\n\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    try {\n      var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader, this.filename);\n      var profile = profiles[this.profile] || {};\n\n      if (Object.keys(profile).length === 0) {\n        throw AWS.util.error(\n          new Error('Profile ' + this.profile + ' not found'),\n          { code: 'SharedIniFileCredentialsProviderFailure' }\n        );\n      }\n\n      /*\n      In the CLI, the presence of both a role_arn and static credentials have\n      different meanings depending on how many profiles have been visited. For\n      the first profile processed, role_arn takes precedence over any static\n      credentials, but for all subsequent profiles, static credentials are\n      used if present, and only in their absence will the profile's\n      source_profile and role_arn keys be used to load another set of\n      credentials. This var is intended to yield compatible behaviour in this\n      sdk.\n      */\n      var preferStaticCredentialsToRoleArn = Boolean(\n        this.preferStaticCredentials\n        && profile['aws_access_key_id']\n        && profile['aws_secret_access_key']\n      );\n\n      if (profile['role_arn'] && !preferStaticCredentialsToRoleArn) {\n        this.loadRoleProfile(profiles, profile, function(err, data) {\n          if (err) {\n            callback(err);\n          } else {\n            self.expired = false;\n            self.accessKeyId = data.Credentials.AccessKeyId;\n            self.secretAccessKey = data.Credentials.SecretAccessKey;\n            self.sessionToken = data.Credentials.SessionToken;\n            self.expireTime = data.Credentials.Expiration;\n            callback(null);\n          }\n        });\n        return;\n      }\n\n      this.accessKeyId = profile['aws_access_key_id'];\n      this.secretAccessKey = profile['aws_secret_access_key'];\n      this.sessionToken = profile['aws_session_token'];\n\n      if (!this.accessKeyId || !this.secretAccessKey) {\n        throw AWS.util.error(\n          new Error('Credentials not set for profile ' + this.profile),\n          { code: 'SharedIniFileCredentialsProviderFailure' }\n        );\n      }\n      this.expired = false;\n      callback(null);\n    } catch (err) {\n      callback(err);\n    }\n  },\n\n  /**\n   * Loads the credentials from the shared credentials file\n   *\n   * @callback callback function(err)\n   *   Called after the shared INI file on disk is read and parsed. When this\n   *   callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    iniLoader.clearCachedFiles();\n    this.coalesceRefresh(\n      callback || AWS.util.fn.callback,\n      this.disableAssumeRole\n    );\n  },\n\n  /**\n   * @api private\n   */\n  loadRoleProfile: function loadRoleProfile(creds, roleProfile, callback) {\n    if (this.disableAssumeRole) {\n      throw AWS.util.error(\n        new Error('Role assumption profiles are disabled. ' +\n                  'Failed to load profile ' + this.profile +\n                  ' from ' + creds.filename),\n        { code: 'SharedIniFileCredentialsProviderFailure' }\n      );\n    }\n\n    var self = this;\n    var roleArn = roleProfile['role_arn'];\n    var roleSessionName = roleProfile['role_session_name'];\n    var externalId = roleProfile['external_id'];\n    var mfaSerial = roleProfile['mfa_serial'];\n    var sourceProfileName = roleProfile['source_profile'];\n    var durationSeconds = parseInt(roleProfile['duration_seconds'], 10) || undefined;\n\n    // From experimentation, the following behavior mimics the AWS CLI:\n    //\n    // 1. Use region from the profile if present.\n    // 2. Otherwise fall back to N. Virginia (global endpoint).\n    //\n    // It is necessary to do the fallback explicitly, because if\n    // 'AWS_STS_REGIONAL_ENDPOINTS=regional', the underlying STS client will\n    // otherwise throw an error if region is left 'undefined'.\n    //\n    // Experimentation shows that the AWS CLI (tested at version 1.18.136)\n    // ignores the following potential sources of a region for the purposes of\n    // this AssumeRole call:\n    //\n    // - The [default] profile\n    // - The AWS_REGION environment variable\n    //\n    // Ignoring the [default] profile for the purposes of AssumeRole is arguably\n    // a bug in the CLI since it does use the [default] region for service\n    // calls... but right now we're matching behavior of the other tool.\n    var profileRegion = roleProfile['region'] || ASSUME_ROLE_DEFAULT_REGION;\n\n    if (!sourceProfileName) {\n      throw AWS.util.error(\n        new Error('source_profile is not set using profile ' + this.profile),\n        { code: 'SharedIniFileCredentialsProviderFailure' }\n      );\n    }\n\n    var sourceProfileExistanceTest = creds[sourceProfileName];\n\n    if (typeof sourceProfileExistanceTest !== 'object') {\n      throw AWS.util.error(\n        new Error('source_profile ' + sourceProfileName + ' using profile '\n          + this.profile + ' does not exist'),\n        { code: 'SharedIniFileCredentialsProviderFailure' }\n      );\n    }\n\n    var sourceCredentials = new AWS.SharedIniFileCredentials(\n      AWS.util.merge(this.options || {}, {\n        profile: sourceProfileName,\n        preferStaticCredentials: true\n      })\n    );\n\n    this.roleArn = roleArn;\n    var sts = new STS({\n      credentials: sourceCredentials,\n      region: profileRegion,\n      httpOptions: this.httpOptions\n    });\n\n    var roleParams = {\n      DurationSeconds: durationSeconds,\n      RoleArn: roleArn,\n      RoleSessionName: roleSessionName || 'aws-sdk-js-' + Date.now()\n    };\n\n    if (externalId) {\n      roleParams.ExternalId = externalId;\n    }\n\n    if (mfaSerial && self.tokenCodeFn) {\n      roleParams.SerialNumber = mfaSerial;\n      self.tokenCodeFn(mfaSerial, function(err, token) {\n        if (err) {\n          var message;\n          if (err instanceof Error) {\n            message = err.message;\n          } else {\n            message = err;\n          }\n          callback(\n            AWS.util.error(\n              new Error('Error fetching MFA token: ' + message),\n              { code: 'SharedIniFileCredentialsProviderFailure' }\n            ));\n          return;\n        }\n\n        roleParams.TokenCode = token;\n        sts.assumeRole(roleParams, callback);\n      });\n      return;\n    }\n    sts.assumeRole(roleParams, callback);\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}