{"ast":null,"code":"const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst uploadFile = require('../utils/upload-file');\nconst getPublicUrl = require('../utils/get-public-url');\nconst upload = async ({\n  apiKey,\n  apiSecret,\n  data,\n  key,\n  bucket,\n  httpUploadProgressCallback\n}) => {\n  try {\n    const s3 = initS3(apiKey, apiSecret);\n    if (!data) {\n      throw 'No file to upload';\n    }\n    if (!key) {\n      throw 'No file key was specified';\n    }\n    let bucketName = bucket;\n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n    const params = {\n      Bucket: bucketName,\n      Key: key,\n      Body: data,\n      ACL: 'public-read'\n    };\n    const result = await uploadFile(s3, params, httpUploadProgressCallback);\n    const returnData = {\n      hash: result.hash,\n      hashV0: result.hashV0,\n      key,\n      bucket: bucketName,\n      publicUrl: getPublicUrl(bucketName, key)\n    };\n    return returnData;\n  } catch (error) {\n    throw error;\n  }\n};\nmodule.exports = upload;","map":{"version":3,"names":["initS3","require","getBucket","uploadFile","getPublicUrl","upload","apiKey","apiSecret","data","key","bucket","httpUploadProgressCallback","s3","bucketName","params","Bucket","Key","Body","ACL","result","returnData","hash","hashV0","publicUrl","error","module","exports"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@fleekhq/fleek-storage-js/methods/upload.js"],"sourcesContent":["const initS3 = require('../utils/init-s3');\nconst getBucket = require('../utils/get-bucket');\nconst uploadFile = require('../utils/upload-file');\nconst getPublicUrl = require('../utils/get-public-url');\n\nconst upload = async ({\n  apiKey,\n  apiSecret,\n  data,\n  key,\n  bucket,\n  httpUploadProgressCallback,\n}) => {\n  try {\n    const s3 = initS3(\n      apiKey,\n      apiSecret,\n    );\n\n    if (!data) {\n      throw 'No file to upload';\n    }\n\n    if (!key) {\n      throw 'No file key was specified'\n    }\n\n    let bucketName = bucket;\n    \n    if (!bucketName) {\n      bucketName = await getBucket(s3);\n    }\n\n    const params = {\n      Bucket: bucketName,\n      Key: key,\n      Body: data,\n      ACL: 'public-read',\n    };\n\n    const result = await uploadFile(s3, params, httpUploadProgressCallback);\n\n    const returnData = {\n      hash: result.hash,\n      hashV0: result.hashV0,\n      key,\n      bucket: bucketName,\n      publicUrl: getPublicUrl(bucketName, key),\n    };\n\n    return returnData;\n  } catch(error) {\n    throw error;\n  }\n};\n\nmodule.exports = upload;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC1C,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAME,UAAU,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAMG,YAAY,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AAEvD,MAAMI,MAAM,GAAG,MAAAA,CAAO;EACpBC,MAAM;EACNC,SAAS;EACTC,IAAI;EACJC,GAAG;EACHC,MAAM;EACNC;AACF,CAAC,KAAK;EACJ,IAAI;IACF,MAAMC,EAAE,GAAGZ,MAAM,CACfM,MAAM,EACNC,SACF,CAAC;IAED,IAAI,CAACC,IAAI,EAAE;MACT,MAAM,mBAAmB;IAC3B;IAEA,IAAI,CAACC,GAAG,EAAE;MACR,MAAM,2BAA2B;IACnC;IAEA,IAAII,UAAU,GAAGH,MAAM;IAEvB,IAAI,CAACG,UAAU,EAAE;MACfA,UAAU,GAAG,MAAMX,SAAS,CAACU,EAAE,CAAC;IAClC;IAEA,MAAME,MAAM,GAAG;MACbC,MAAM,EAAEF,UAAU;MAClBG,GAAG,EAAEP,GAAG;MACRQ,IAAI,EAAET,IAAI;MACVU,GAAG,EAAE;IACP,CAAC;IAED,MAAMC,MAAM,GAAG,MAAMhB,UAAU,CAACS,EAAE,EAAEE,MAAM,EAAEH,0BAA0B,CAAC;IAEvE,MAAMS,UAAU,GAAG;MACjBC,IAAI,EAAEF,MAAM,CAACE,IAAI;MACjBC,MAAM,EAAEH,MAAM,CAACG,MAAM;MACrBb,GAAG;MACHC,MAAM,EAAEG,UAAU;MAClBU,SAAS,EAAEnB,YAAY,CAACS,UAAU,EAAEJ,GAAG;IACzC,CAAC;IAED,OAAOW,UAAU;EACnB,CAAC,CAAC,OAAMI,KAAK,EAAE;IACb,MAAMA,KAAK;EACb;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGrB,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}