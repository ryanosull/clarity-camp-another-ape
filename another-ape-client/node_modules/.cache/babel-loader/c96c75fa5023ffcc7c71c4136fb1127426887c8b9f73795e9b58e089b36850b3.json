{"ast":null,"code":"var AWS = require('../core');\nvar path = require('path');\nvar crypto = require('crypto');\nvar iniLoader = AWS.util.iniLoader;\n\n/**\n *  Represents credentials from sso.getRoleCredentials API for\n * `sso_*` values defined in shared credentials file.\n *\n * ## Using SSO credentials\n *\n * The credentials file must specify the information below to use sso:\n *\n *     [profile sso-profile]\n *     sso_account_id = 012345678901\n *     sso_region = **-****-*\n *     sso_role_name = SampleRole\n *     sso_start_url = https://d-******.awsapps.com/start\n *\n * or using the session format:\n *\n *     [profile sso-token]\n *     sso_session = prod\n *     sso_account_id = 012345678901\n *     sso_role_name = SampleRole\n *\n *     [sso-session prod]\n *     sso_region = **-****-*\n *     sso_start_url = https://d-******.awsapps.com/start\n *\n * This information will be automatically added to your shared credentials file by running\n * `aws configure sso`.\n *\n * ## Using custom profiles\n *\n * The SDK supports loading credentials for separate profiles. This can be done\n * in two ways:\n *\n * 1. Set the `AWS_PROFILE` environment variable in your process prior to\n *    loading the SDK.\n * 2. Directly load the AWS.SsoCredentials provider:\n *\n * ```javascript\n * var creds = new AWS.SsoCredentials({profile: 'myprofile'});\n * AWS.config.credentials = creds;\n * ```\n *\n * @!macro nobrowser\n */\nAWS.SsoCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new SsoCredentials object.\n   *\n   * @param options [map] a set of options\n   * @option options profile [String] (AWS_PROFILE env var or 'default')\n   *   the name of the profile to load.\n   * @option options filename [String] ('~/.aws/credentials' or defined by\n   *   AWS_SHARED_CREDENTIALS_FILE process env var)\n   *   the filename to use when loading credentials.\n   * @option options callback [Function] (err) Credentials are eagerly loaded\n   *   by the constructor. When the callback is called with no error, the\n   *   credentials have been loaded successfully.\n   */\n  constructor: function SsoCredentials(options) {\n    AWS.Credentials.call(this);\n    options = options || {};\n    this.errorCode = 'SsoCredentialsProviderFailure';\n    this.expired = true;\n    this.filename = options.filename;\n    this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n    this.service = options.ssoClient;\n    this.httpOptions = options.httpOptions || null;\n    this.get(options.callback || AWS.util.fn.noop);\n  },\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    try {\n      var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader, this.filename);\n      var profile = profiles[this.profile] || {};\n      if (Object.keys(profile).length === 0) {\n        throw AWS.util.error(new Error('Profile ' + this.profile + ' not found'), {\n          code: self.errorCode\n        });\n      }\n      if (profile.sso_session) {\n        if (!profile.sso_account_id || !profile.sso_role_name) {\n          throw AWS.util.error(new Error('Profile ' + this.profile + ' with session ' + profile.sso_session + ' does not have valid SSO credentials. Required parameters \"sso_account_id\", \"sso_session\", ' + '\"sso_role_name\". Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html'), {\n            code: self.errorCode\n          });\n        }\n      } else {\n        if (!profile.sso_start_url || !profile.sso_account_id || !profile.sso_region || !profile.sso_role_name) {\n          throw AWS.util.error(new Error('Profile ' + this.profile + ' does not have valid SSO credentials. Required parameters \"sso_account_id\", \"sso_region\", ' + '\"sso_role_name\", \"sso_start_url\". Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html'), {\n            code: self.errorCode\n          });\n        }\n      }\n      this.getToken(this.profile, profile, function (err, token) {\n        if (err) {\n          return callback(err);\n        }\n        var request = {\n          accessToken: token,\n          accountId: profile.sso_account_id,\n          roleName: profile.sso_role_name\n        };\n        if (!self.service || self.service.config.region !== profile.sso_region) {\n          self.service = new AWS.SSO({\n            region: profile.sso_region,\n            httpOptions: self.httpOptions\n          });\n        }\n        self.service.getRoleCredentials(request, function (err, data) {\n          if (err || !data || !data.roleCredentials) {\n            callback(AWS.util.error(err || new Error('Please log in using \"aws sso login\"'), {\n              code: self.errorCode\n            }), null);\n          } else if (!data.roleCredentials.accessKeyId || !data.roleCredentials.secretAccessKey || !data.roleCredentials.sessionToken || !data.roleCredentials.expiration) {\n            throw AWS.util.error(new Error('SSO returns an invalid temporary credential.'));\n          } else {\n            self.expired = false;\n            self.accessKeyId = data.roleCredentials.accessKeyId;\n            self.secretAccessKey = data.roleCredentials.secretAccessKey;\n            self.sessionToken = data.roleCredentials.sessionToken;\n            self.expireTime = new Date(data.roleCredentials.expiration);\n            callback(null);\n          }\n        });\n      });\n    } catch (err) {\n      callback(err);\n    }\n  },\n  /**\n   * @private\n   * Uses legacy file system retrieval or if sso-session is set,\n   * use the SSOTokenProvider.\n   *\n   * @param {string} profileName - name of the profile.\n   * @param {object} profile - profile data containing sso_session or sso_start_url etc.\n   * @param {function} callback - called with (err, (string) token).\n   *\n   * @returns {void}\n   */\n  getToken: function getToken(profileName, profile, callback) {\n    var self = this;\n    if (profile.sso_session) {\n      var _iniLoader = AWS.util.iniLoader;\n      var ssoSessions = _iniLoader.loadSsoSessionsFrom();\n      var ssoSession = ssoSessions[profile.sso_session];\n      Object.assign(profile, ssoSession);\n      var ssoTokenProvider = new AWS.SSOTokenProvider({\n        profile: profileName\n      });\n      ssoTokenProvider.get(function (err) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, ssoTokenProvider.token);\n      });\n      return;\n    }\n    try {\n      /**\n       * The time window (15 mins) that SDK will treat the SSO token expires in before the defined expiration date in token.\n       * This is needed because server side may have invalidated the token before the defined expiration date.\n       */\n      var EXPIRE_WINDOW_MS = 15 * 60 * 1000;\n      var hasher = crypto.createHash('sha1');\n      var fileName = hasher.update(profile.sso_start_url).digest('hex') + '.json';\n      var cachePath = path.join(iniLoader.getHomeDir(), '.aws', 'sso', 'cache', fileName);\n      var cacheFile = AWS.util.readFileSync(cachePath);\n      var cacheContent = null;\n      if (cacheFile) {\n        cacheContent = JSON.parse(cacheFile);\n      }\n      if (!cacheContent) {\n        throw AWS.util.error(new Error('Cached credentials not found under ' + this.profile + ' profile. Please make sure you log in with aws sso login first'), {\n          code: self.errorCode\n        });\n      }\n      if (!cacheContent.startUrl || !cacheContent.region || !cacheContent.accessToken || !cacheContent.expiresAt) {\n        throw AWS.util.error(new Error('Cached credentials are missing required properties. Try running aws sso login.'));\n      }\n      if (new Date(cacheContent.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {\n        throw AWS.util.error(new Error('The SSO session associated with this profile has expired. To refresh this SSO session run aws sso login with the corresponding profile.'));\n      }\n      return callback(null, cacheContent.accessToken);\n    } catch (err) {\n      return callback(err, null);\n    }\n  },\n  /**\n   * Loads the credentials from the AWS SSO process\n   *\n   * @callback callback function(err)\n   *   Called after the AWS SSO process has been executed. When this\n   *   callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    iniLoader.clearCachedFiles();\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  }\n});","map":{"version":3,"names":["AWS","require","path","crypto","iniLoader","util","SsoCredentials","inherit","Credentials","constructor","options","call","errorCode","expired","filename","profile","process","env","AWS_PROFILE","defaultProfile","service","ssoClient","httpOptions","get","callback","fn","noop","load","self","profiles","getProfilesFromSharedConfig","Object","keys","length","error","Error","code","sso_session","sso_account_id","sso_role_name","sso_start_url","sso_region","getToken","err","token","request","accessToken","accountId","roleName","config","region","SSO","getRoleCredentials","data","roleCredentials","accessKeyId","secretAccessKey","sessionToken","expiration","expireTime","Date","profileName","_iniLoader","ssoSessions","loadSsoSessionsFrom","ssoSession","assign","ssoTokenProvider","SSOTokenProvider","EXPIRE_WINDOW_MS","hasher","createHash","fileName","update","digest","cachePath","join","getHomeDir","cacheFile","readFileSync","cacheContent","JSON","parse","startUrl","expiresAt","getTime","now","refresh","clearCachedFiles","coalesceRefresh"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/credentials/sso_credentials.js"],"sourcesContent":["var AWS = require('../core');\nvar path = require('path');\nvar crypto = require('crypto');\nvar iniLoader = AWS.util.iniLoader;\n\n/**\n *  Represents credentials from sso.getRoleCredentials API for\n * `sso_*` values defined in shared credentials file.\n *\n * ## Using SSO credentials\n *\n * The credentials file must specify the information below to use sso:\n *\n *     [profile sso-profile]\n *     sso_account_id = 012345678901\n *     sso_region = **-****-*\n *     sso_role_name = SampleRole\n *     sso_start_url = https://d-******.awsapps.com/start\n *\n * or using the session format:\n *\n *     [profile sso-token]\n *     sso_session = prod\n *     sso_account_id = 012345678901\n *     sso_role_name = SampleRole\n *\n *     [sso-session prod]\n *     sso_region = **-****-*\n *     sso_start_url = https://d-******.awsapps.com/start\n *\n * This information will be automatically added to your shared credentials file by running\n * `aws configure sso`.\n *\n * ## Using custom profiles\n *\n * The SDK supports loading credentials for separate profiles. This can be done\n * in two ways:\n *\n * 1. Set the `AWS_PROFILE` environment variable in your process prior to\n *    loading the SDK.\n * 2. Directly load the AWS.SsoCredentials provider:\n *\n * ```javascript\n * var creds = new AWS.SsoCredentials({profile: 'myprofile'});\n * AWS.config.credentials = creds;\n * ```\n *\n * @!macro nobrowser\n */\nAWS.SsoCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new SsoCredentials object.\n   *\n   * @param options [map] a set of options\n   * @option options profile [String] (AWS_PROFILE env var or 'default')\n   *   the name of the profile to load.\n   * @option options filename [String] ('~/.aws/credentials' or defined by\n   *   AWS_SHARED_CREDENTIALS_FILE process env var)\n   *   the filename to use when loading credentials.\n   * @option options callback [Function] (err) Credentials are eagerly loaded\n   *   by the constructor. When the callback is called with no error, the\n   *   credentials have been loaded successfully.\n   */\n  constructor: function SsoCredentials(options) {\n    AWS.Credentials.call(this);\n\n    options = options || {};\n    this.errorCode = 'SsoCredentialsProviderFailure';\n    this.expired = true;\n\n    this.filename = options.filename;\n    this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n    this.service = options.ssoClient;\n    this.httpOptions = options.httpOptions || null;\n    this.get(options.callback || AWS.util.fn.noop);\n  },\n\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n\n    try {\n      var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader, this.filename);\n      var profile = profiles[this.profile] || {};\n\n      if (Object.keys(profile).length === 0) {\n        throw AWS.util.error(\n          new Error('Profile ' + this.profile + ' not found'),\n          { code: self.errorCode }\n        );\n      }\n\n      if (profile.sso_session) {\n        if (!profile.sso_account_id || !profile.sso_role_name) {\n          throw AWS.util.error(\n            new Error('Profile ' + this.profile + ' with session ' + profile.sso_session +\n              ' does not have valid SSO credentials. Required parameters \"sso_account_id\", \"sso_session\", ' +\n              '\"sso_role_name\". Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html'),\n            { code: self.errorCode }\n          );\n        }\n      } else {\n        if (!profile.sso_start_url || !profile.sso_account_id || !profile.sso_region || !profile.sso_role_name) {\n          throw AWS.util.error(\n            new Error('Profile ' + this.profile + ' does not have valid SSO credentials. Required parameters \"sso_account_id\", \"sso_region\", ' +\n            '\"sso_role_name\", \"sso_start_url\". Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html'),\n            { code: self.errorCode }\n          );\n        }\n      }\n\n      this.getToken(this.profile, profile, function (err, token) {\n        if (err) {\n          return callback(err);\n        }\n        var request = {\n          accessToken: token,\n          accountId: profile.sso_account_id,\n          roleName: profile.sso_role_name,\n        };\n\n        if (!self.service || self.service.config.region !== profile.sso_region) {\n          self.service = new AWS.SSO({\n            region: profile.sso_region,\n            httpOptions: self.httpOptions,\n          });\n        }\n\n        self.service.getRoleCredentials(request, function(err, data) {\n          if (err || !data || !data.roleCredentials) {\n            callback(AWS.util.error(\n              err || new Error('Please log in using \"aws sso login\"'),\n              { code: self.errorCode }\n            ), null);\n          } else if (!data.roleCredentials.accessKeyId || !data.roleCredentials.secretAccessKey || !data.roleCredentials.sessionToken || !data.roleCredentials.expiration) {\n            throw AWS.util.error(new Error(\n              'SSO returns an invalid temporary credential.'\n            ));\n          } else {\n            self.expired = false;\n            self.accessKeyId = data.roleCredentials.accessKeyId;\n            self.secretAccessKey = data.roleCredentials.secretAccessKey;\n            self.sessionToken = data.roleCredentials.sessionToken;\n            self.expireTime = new Date(data.roleCredentials.expiration);\n            callback(null);\n          }\n        });\n      });\n    } catch (err) {\n      callback(err);\n    }\n  },\n\n  /**\n   * @private\n   * Uses legacy file system retrieval or if sso-session is set,\n   * use the SSOTokenProvider.\n   *\n   * @param {string} profileName - name of the profile.\n   * @param {object} profile - profile data containing sso_session or sso_start_url etc.\n   * @param {function} callback - called with (err, (string) token).\n   *\n   * @returns {void}\n   */\n  getToken: function getToken(profileName, profile, callback) {\n    var self = this;\n\n    if (profile.sso_session) {\n      var _iniLoader = AWS.util.iniLoader;\n      var ssoSessions = _iniLoader.loadSsoSessionsFrom();\n      var ssoSession = ssoSessions[profile.sso_session];\n      Object.assign(profile, ssoSession);\n\n      var ssoTokenProvider = new AWS.SSOTokenProvider({\n        profile: profileName,\n      });\n      ssoTokenProvider.get(function (err) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, ssoTokenProvider.token);\n      });\n      return;\n    }\n\n    try {\n      /**\n       * The time window (15 mins) that SDK will treat the SSO token expires in before the defined expiration date in token.\n       * This is needed because server side may have invalidated the token before the defined expiration date.\n       */\n      var EXPIRE_WINDOW_MS = 15 * 60 * 1000;\n      var hasher = crypto.createHash('sha1');\n      var fileName = hasher.update(profile.sso_start_url).digest('hex') + '.json';\n      var cachePath = path.join(\n        iniLoader.getHomeDir(),\n        '.aws',\n        'sso',\n        'cache',\n        fileName\n      );\n      var cacheFile = AWS.util.readFileSync(cachePath);\n      var cacheContent = null;\n      if (cacheFile) {\n        cacheContent = JSON.parse(cacheFile);\n      }\n      if (!cacheContent) {\n        throw AWS.util.error(\n          new Error('Cached credentials not found under ' + this.profile + ' profile. Please make sure you log in with aws sso login first'),\n          { code: self.errorCode }\n        );\n      }\n\n      if (!cacheContent.startUrl || !cacheContent.region || !cacheContent.accessToken || !cacheContent.expiresAt) {\n        throw AWS.util.error(\n          new Error('Cached credentials are missing required properties. Try running aws sso login.')\n        );\n      }\n\n      if (new Date(cacheContent.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {\n        throw AWS.util.error(new Error(\n          'The SSO session associated with this profile has expired. To refresh this SSO session run aws sso login with the corresponding profile.'\n        ));\n      }\n\n      return callback(null, cacheContent.accessToken);\n    } catch (err) {\n      return callback(err, null);\n    }\n  },\n\n  /**\n   * Loads the credentials from the AWS SSO process\n   *\n   * @callback callback function(err)\n   *   Called after the AWS SSO process has been executed. When this\n   *   callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    iniLoader.clearCachedFiles();\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}