{"ast":null,"code":"var AWS = require('../core');\nvar crypto = require('crypto');\nvar fs = require('fs');\nvar path = require('path');\nvar iniLoader = AWS.util.iniLoader;\n\n// Tracking refresh attempt to ensure refresh is not attempted more than once every 30 seconds.\nvar lastRefreshAttemptTime = 0;\n\n/**\n * Throws error is key is not present in token object.\n *\n * @param token [Object] Object to be validated.\n * @param key [String] The key to be validated on the object.\n */\nvar validateTokenKey = function validateTokenKey(token, key) {\n  if (!token[key]) {\n    throw AWS.util.error(new Error('Key \"' + key + '\" not present in SSO Token'), {\n      code: 'SSOTokenProviderFailure'\n    });\n  }\n};\n\n/**\n * Calls callback function with or without error based on provided times in case\n * of unsuccessful refresh.\n *\n * @param currentTime [number] current time in milliseconds since ECMAScript epoch.\n * @param tokenExpireTime [number] token expire time in milliseconds since ECMAScript epoch.\n * @param callback [Function] Callback to call in case of error.\n */\nvar refreshUnsuccessful = function refreshUnsuccessful(currentTime, tokenExpireTime, callback) {\n  if (tokenExpireTime > currentTime) {\n    // Cached token is still valid, return.\n    callback(null);\n  } else {\n    // Token invalid, throw error requesting user to sso login.\n    throw AWS.util.error(new Error('SSO Token refresh failed. Please log in using \"aws sso login\"'), {\n      code: 'SSOTokenProviderFailure'\n    });\n  }\n};\n\n/**\n * Represents token loaded from disk derived from the AWS SSO device grant authorication flow.\n *\n * ## Using SSO Token Provider\n *\n * This provider is checked by default in the Node.js environment in TokenProviderChain.\n * To use the SSO Token Provider, simply add your SSO Start URL and Region to the\n * ~/.aws/config file in the following format:\n *\n *     [default]\n *     sso_start_url = https://d-abc123.awsapps.com/start\n *     sso_region = us-east-1\n *\n * ## Using custom profiles\n *\n * The SDK supports loading token for separate profiles. This can be done in two ways:\n *\n * 1. Set the `AWS_PROFILE` environment variable in your process prior to loading the SDK.\n * 2. Directly load the AWS.SSOTokenProvider:\n *\n * ```javascript\n * var ssoTokenProvider = new AWS.SSOTokenProvider({profile: 'myprofile'});\n * ```\n *\n * @!macro nobrowser\n */\nAWS.SSOTokenProvider = AWS.util.inherit(AWS.Token, {\n  /**\n   * Expiry window of five minutes.\n   */\n  expiryWindow: 5 * 60,\n  /**\n   * Creates a new token object from cached access token.\n   *\n   * @param options [map] a set of options\n   * @option options profile [String] (AWS_PROFILE env var or 'default')\n   *   the name of the profile to load.\n   * @option options callback [Function] (err) Token is eagerly loaded\n   *   by the constructor. When the callback is called with no error, the\n   *   token has been loaded successfully.\n   */\n  constructor: function SSOTokenProvider(options) {\n    AWS.Token.call(this);\n    options = options || {};\n    this.expired = true;\n    this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n    this.get(options.callback || AWS.util.fn.noop);\n  },\n  /**\n   * Reads sso_start_url from provided profile, and reads token from\n   * ~/.aws/sso/cache/<sha1-of-utf8-encoded-value-from-sso_start_url>.json\n   *\n   * Throws an error if required fields token and expiresAt are missing.\n   * Throws an error if token has expired and metadata to perform refresh is\n   * not available.\n   * Attempts to refresh the token if it's within 5 minutes before expiry time.\n   *\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    var profiles = iniLoader.loadFrom({\n      isConfig: true\n    });\n    var profile = profiles[this.profile] || {};\n    if (Object.keys(profile).length === 0) {\n      throw AWS.util.error(new Error('Profile \"' + this.profile + '\" not found'), {\n        code: 'SSOTokenProviderFailure'\n      });\n    } else if (!profile['sso_session']) {\n      throw AWS.util.error(new Error('Profile \"' + this.profile + '\" is missing required property \"sso_session\".'), {\n        code: 'SSOTokenProviderFailure'\n      });\n    }\n    var ssoSessionName = profile['sso_session'];\n    var ssoSessions = iniLoader.loadSsoSessionsFrom();\n    var ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n      throw AWS.util.error(new Error('Sso session \"' + ssoSessionName + '\" not found'), {\n        code: 'SSOTokenProviderFailure'\n      });\n    } else if (!ssoSession['sso_start_url']) {\n      throw AWS.util.error(new Error('Sso session \"' + this.profile + '\" is missing required property \"sso_start_url\".'), {\n        code: 'SSOTokenProviderFailure'\n      });\n    } else if (!ssoSession['sso_region']) {\n      throw AWS.util.error(new Error('Sso session \"' + this.profile + '\" is missing required property \"sso_region\".'), {\n        code: 'SSOTokenProviderFailure'\n      });\n    }\n    var hasher = crypto.createHash('sha1');\n    var fileName = hasher.update(ssoSessionName).digest('hex') + '.json';\n    var cachePath = path.join(iniLoader.getHomeDir(), '.aws', 'sso', 'cache', fileName);\n    var tokenFromCache = JSON.parse(fs.readFileSync(cachePath));\n    if (!tokenFromCache) {\n      throw AWS.util.error(new Error('Cached token not found. Please log in using \"aws sso login\"' + ' for profile \"' + this.profile + '\".'), {\n        code: 'SSOTokenProviderFailure'\n      });\n    }\n    validateTokenKey(tokenFromCache, 'accessToken');\n    validateTokenKey(tokenFromCache, 'expiresAt');\n    var currentTime = AWS.util.date.getDate().getTime();\n    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);\n    var tokenExpireTime = new Date(tokenFromCache['expiresAt']);\n    if (tokenExpireTime > adjustedTime) {\n      // Token is valid and not expired.\n      self.token = tokenFromCache.accessToken;\n      self.expireTime = tokenExpireTime;\n      self.expired = false;\n      callback(null);\n      return;\n    }\n\n    // Skip new refresh, if last refresh was done within 30 seconds.\n    if (currentTime - lastRefreshAttemptTime < 30 * 1000) {\n      refreshUnsuccessful(currentTime, tokenExpireTime, callback);\n      return;\n    }\n\n    // Token is in expiry window, refresh from SSOOIDC.createToken() call.\n    validateTokenKey(tokenFromCache, 'clientId');\n    validateTokenKey(tokenFromCache, 'clientSecret');\n    validateTokenKey(tokenFromCache, 'refreshToken');\n    if (!self.service || self.service.config.region !== ssoSession.sso_region) {\n      self.service = new AWS.SSOOIDC({\n        region: ssoSession.sso_region\n      });\n    }\n    var params = {\n      clientId: tokenFromCache.clientId,\n      clientSecret: tokenFromCache.clientSecret,\n      refreshToken: tokenFromCache.refreshToken,\n      grantType: 'refresh_token'\n    };\n    lastRefreshAttemptTime = AWS.util.date.getDate().getTime();\n    self.service.createToken(params, function (err, data) {\n      if (err || !data) {\n        refreshUnsuccessful(currentTime, tokenExpireTime, callback);\n      } else {\n        try {\n          validateTokenKey(data, 'accessToken');\n          validateTokenKey(data, 'expiresIn');\n          self.expired = false;\n          self.token = data.accessToken;\n          self.expireTime = new Date(Date.now() + data.expiresIn * 1000);\n          callback(null);\n          try {\n            // Write updated token data to disk.\n            tokenFromCache.accessToken = data.accessToken;\n            tokenFromCache.expiresAt = self.expireTime.toISOString();\n            tokenFromCache.refreshToken = data.refreshToken;\n            fs.writeFileSync(cachePath, JSON.stringify(tokenFromCache, null, 2));\n          } catch (error) {\n            // Swallow error if unable to write token to file.\n          }\n        } catch (error) {\n          refreshUnsuccessful(currentTime, tokenExpireTime, callback);\n        }\n      }\n    });\n  },\n  /**\n   * Loads the cached access token from disk.\n   *\n   * @callback callback function(err)\n   *   Called after the AWS SSO process has been executed. When this\n   *   callback is called with no error, it means that the token information\n   *   has been loaded into the object (as the `token` property).\n   *   @param err [Error] if an error occurred, this value will be filled.\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    iniLoader.clearCachedFiles();\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  }\n});","map":{"version":3,"names":["AWS","require","crypto","fs","path","iniLoader","util","lastRefreshAttemptTime","validateTokenKey","token","key","error","Error","code","refreshUnsuccessful","currentTime","tokenExpireTime","callback","SSOTokenProvider","inherit","Token","expiryWindow","constructor","options","call","expired","profile","process","env","AWS_PROFILE","defaultProfile","get","fn","noop","load","self","profiles","loadFrom","isConfig","Object","keys","length","ssoSessionName","ssoSessions","loadSsoSessionsFrom","ssoSession","hasher","createHash","fileName","update","digest","cachePath","join","getHomeDir","tokenFromCache","JSON","parse","readFileSync","date","getDate","getTime","adjustedTime","Date","accessToken","expireTime","service","config","region","sso_region","SSOOIDC","params","clientId","clientSecret","refreshToken","grantType","createToken","err","data","now","expiresIn","expiresAt","toISOString","writeFileSync","stringify","refresh","clearCachedFiles","coalesceRefresh"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/token/sso_token_provider.js"],"sourcesContent":["var AWS = require('../core');\nvar crypto = require('crypto');\nvar fs = require('fs');\nvar path = require('path');\nvar iniLoader = AWS.util.iniLoader;\n\n// Tracking refresh attempt to ensure refresh is not attempted more than once every 30 seconds.\nvar lastRefreshAttemptTime = 0;\n\n/**\n * Throws error is key is not present in token object.\n *\n * @param token [Object] Object to be validated.\n * @param key [String] The key to be validated on the object.\n */\nvar validateTokenKey = function validateTokenKey(token, key) {\n  if (!token[key]) {\n    throw AWS.util.error(\n      new Error('Key \"' + key + '\" not present in SSO Token'),\n      { code: 'SSOTokenProviderFailure' }\n    );\n  }\n};\n\n/**\n * Calls callback function with or without error based on provided times in case\n * of unsuccessful refresh.\n *\n * @param currentTime [number] current time in milliseconds since ECMAScript epoch.\n * @param tokenExpireTime [number] token expire time in milliseconds since ECMAScript epoch.\n * @param callback [Function] Callback to call in case of error.\n */\nvar refreshUnsuccessful = function refreshUnsuccessful(\n  currentTime,\n  tokenExpireTime,\n  callback\n) {\n  if (tokenExpireTime > currentTime) {\n    // Cached token is still valid, return.\n    callback(null);\n  } else {\n    // Token invalid, throw error requesting user to sso login.\n    throw AWS.util.error(\n      new Error('SSO Token refresh failed. Please log in using \"aws sso login\"'),\n      { code: 'SSOTokenProviderFailure' }\n    );\n  }\n};\n\n/**\n * Represents token loaded from disk derived from the AWS SSO device grant authorication flow.\n *\n * ## Using SSO Token Provider\n *\n * This provider is checked by default in the Node.js environment in TokenProviderChain.\n * To use the SSO Token Provider, simply add your SSO Start URL and Region to the\n * ~/.aws/config file in the following format:\n *\n *     [default]\n *     sso_start_url = https://d-abc123.awsapps.com/start\n *     sso_region = us-east-1\n *\n * ## Using custom profiles\n *\n * The SDK supports loading token for separate profiles. This can be done in two ways:\n *\n * 1. Set the `AWS_PROFILE` environment variable in your process prior to loading the SDK.\n * 2. Directly load the AWS.SSOTokenProvider:\n *\n * ```javascript\n * var ssoTokenProvider = new AWS.SSOTokenProvider({profile: 'myprofile'});\n * ```\n *\n * @!macro nobrowser\n */\nAWS.SSOTokenProvider = AWS.util.inherit(AWS.Token, {\n  /**\n   * Expiry window of five minutes.\n   */\n  expiryWindow: 5 * 60,\n\n  /**\n   * Creates a new token object from cached access token.\n   *\n   * @param options [map] a set of options\n   * @option options profile [String] (AWS_PROFILE env var or 'default')\n   *   the name of the profile to load.\n   * @option options callback [Function] (err) Token is eagerly loaded\n   *   by the constructor. When the callback is called with no error, the\n   *   token has been loaded successfully.\n   */\n  constructor: function SSOTokenProvider(options) {\n    AWS.Token.call(this);\n\n    options = options || {};\n\n    this.expired = true;\n    this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n    this.get(options.callback || AWS.util.fn.noop);\n  },\n\n  /**\n   * Reads sso_start_url from provided profile, and reads token from\n   * ~/.aws/sso/cache/<sha1-of-utf8-encoded-value-from-sso_start_url>.json\n   *\n   * Throws an error if required fields token and expiresAt are missing.\n   * Throws an error if token has expired and metadata to perform refresh is\n   * not available.\n   * Attempts to refresh the token if it's within 5 minutes before expiry time.\n   *\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    var profiles = iniLoader.loadFrom({ isConfig: true });\n    var profile = profiles[this.profile] || {};\n\n    if (Object.keys(profile).length === 0) {\n      throw AWS.util.error(\n        new Error('Profile \"' + this.profile + '\" not found'),\n        { code: 'SSOTokenProviderFailure' }\n      );\n    } else if (!profile['sso_session']) {\n      throw AWS.util.error(\n        new Error('Profile \"' + this.profile + '\" is missing required property \"sso_session\".'),\n        { code: 'SSOTokenProviderFailure' }\n      );\n    }\n\n    var ssoSessionName = profile['sso_session'];\n    var ssoSessions = iniLoader.loadSsoSessionsFrom();\n    var ssoSession = ssoSessions[ssoSessionName];\n\n    if (!ssoSession) {\n      throw AWS.util.error(\n        new Error('Sso session \"' + ssoSessionName + '\" not found'),\n        { code: 'SSOTokenProviderFailure' }\n      );\n    } else if (!ssoSession['sso_start_url']) {\n      throw AWS.util.error(\n        new Error('Sso session \"' + this.profile + '\" is missing required property \"sso_start_url\".'),\n        { code: 'SSOTokenProviderFailure' }\n      );\n    } else if (!ssoSession['sso_region']) {\n      throw AWS.util.error(\n        new Error('Sso session \"' + this.profile + '\" is missing required property \"sso_region\".'),\n        { code: 'SSOTokenProviderFailure' }\n      );\n    }\n\n    var hasher = crypto.createHash('sha1');\n    var fileName = hasher.update(ssoSessionName).digest('hex') + '.json';\n    var cachePath = path.join(iniLoader.getHomeDir(), '.aws', 'sso', 'cache', fileName);\n    var tokenFromCache = JSON.parse(fs.readFileSync(cachePath));\n\n    if (!tokenFromCache) {\n      throw AWS.util.error(\n        new Error('Cached token not found. Please log in using \"aws sso login\"'\n          + ' for profile \"' + this.profile + '\".'),\n        { code: 'SSOTokenProviderFailure' }\n      );\n    }\n\n    validateTokenKey(tokenFromCache, 'accessToken');\n    validateTokenKey(tokenFromCache, 'expiresAt');\n\n    var currentTime = AWS.util.date.getDate().getTime();\n    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);\n    var tokenExpireTime = new Date(tokenFromCache['expiresAt']);\n\n    if (tokenExpireTime > adjustedTime) {\n      // Token is valid and not expired.\n      self.token = tokenFromCache.accessToken;\n      self.expireTime = tokenExpireTime;\n      self.expired = false;\n      callback(null);\n      return;\n    }\n\n    // Skip new refresh, if last refresh was done within 30 seconds.\n    if (currentTime - lastRefreshAttemptTime < 30 * 1000) {\n      refreshUnsuccessful(currentTime, tokenExpireTime, callback);\n      return;\n    }\n\n    // Token is in expiry window, refresh from SSOOIDC.createToken() call.\n    validateTokenKey(tokenFromCache, 'clientId');\n    validateTokenKey(tokenFromCache, 'clientSecret');\n    validateTokenKey(tokenFromCache, 'refreshToken');\n\n    if (!self.service || self.service.config.region !== ssoSession.sso_region) {\n      self.service = new AWS.SSOOIDC({ region: ssoSession.sso_region });\n    }\n\n    var params = {\n      clientId: tokenFromCache.clientId,\n      clientSecret: tokenFromCache.clientSecret,\n      refreshToken: tokenFromCache.refreshToken,\n      grantType: 'refresh_token',\n    };\n\n    lastRefreshAttemptTime = AWS.util.date.getDate().getTime();\n    self.service.createToken(params, function(err, data) {\n      if (err || !data) {\n        refreshUnsuccessful(currentTime, tokenExpireTime, callback);\n      } else {\n        try {\n          validateTokenKey(data, 'accessToken');\n          validateTokenKey(data, 'expiresIn');\n          self.expired = false;\n          self.token = data.accessToken;\n          self.expireTime = new Date(Date.now() + data.expiresIn * 1000);\n          callback(null);\n\n          try {\n            // Write updated token data to disk.\n            tokenFromCache.accessToken = data.accessToken;\n            tokenFromCache.expiresAt = self.expireTime.toISOString();\n            tokenFromCache.refreshToken = data.refreshToken;\n            fs.writeFileSync(cachePath, JSON.stringify(tokenFromCache, null, 2));\n          } catch (error) {\n            // Swallow error if unable to write token to file.\n          }\n        } catch (error) {\n          refreshUnsuccessful(currentTime, tokenExpireTime, callback);\n        }\n      }\n    });\n  },\n\n  /**\n   * Loads the cached access token from disk.\n   *\n   * @callback callback function(err)\n   *   Called after the AWS SSO process has been executed. When this\n   *   callback is called with no error, it means that the token information\n   *   has been loaded into the object (as the `token` property).\n   *   @param err [Error] if an error occurred, this value will be filled.\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    iniLoader.clearCachedFiles();\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}