{"ast":null,"code":"import { DEFAULT_SCOPE, DEFAULT_BLOCKSTACK_HOST } from './constants';\nimport { getGlobalObject } from '@stacks/common';\nexport class AppConfig {\n  constructor(scopes = DEFAULT_SCOPE.slice(), appDomain = getGlobalObject('location', {\n    returnEmptyObject: true\n  })?.origin, redirectPath = '', manifestPath = '/manifest.json', coreNode = undefined, authenticatorURL = DEFAULT_BLOCKSTACK_HOST) {\n    this.appDomain = appDomain;\n    this.scopes = scopes;\n    this.redirectPath = redirectPath;\n    this.manifestPath = manifestPath;\n    this.coreNode = coreNode;\n    this.authenticatorURL = authenticatorURL;\n  }\n  redirectURI() {\n    return `${this.appDomain}${this.redirectPath}`;\n  }\n  manifestURI() {\n    return `${this.appDomain}${this.manifestPath}`;\n  }\n}","map":{"version":3,"names":["DEFAULT_SCOPE","DEFAULT_BLOCKSTACK_HOST","getGlobalObject","AppConfig","constructor","scopes","slice","appDomain","returnEmptyObject","origin","redirectPath","manifestPath","coreNode","undefined","authenticatorURL","redirectURI","manifestURI"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@stacks/auth/src/appConfig.ts"],"sourcesContent":["import { DEFAULT_SCOPE, DEFAULT_BLOCKSTACK_HOST, AuthScope } from './constants';\nimport { getGlobalObject } from '@stacks/common';\n\n/**\n * Configuration data for the current app.\n *\n * On browser platforms, creating an instance of this\n * class without any arguments will use\n * `window.location.origin` as the app domain.\n * On non-browser platforms, you need to\n * specify an app domain as the second argument.\n *\n */\nexport class AppConfig {\n  /**\n   * Blockstack apps are uniquely identified by their app domain.\n   *\n   */\n  appDomain?: string;\n\n  /**\n   * An array of string representing permissions requested by the app.\n   *\n   */\n  scopes: (AuthScope | string)[];\n\n  /**\n   * Path on app domain to redirect users to after authentication. The\n   * authentication response token will be postpended in a query.\n   *\n   */\n  redirectPath: string;\n\n  /**\n   * Path relative to app domain of app's manifest file.\n   *\n   * This file needs to have CORS headers set so that it can be fetched\n   * from any origin. Typically this means return the header `Access-Control-Allow-Origin: *`.\n   *\n   */\n  manifestPath: string;\n\n  /**\n   * The URL of Blockstack core node to use for this app. If this is\n   * `null`, the core node specified by the user or default core node\n   * will be used.\n   *\n   */\n  coreNode?: string;\n\n  /**\n   * The URL of a web-based Blockstack Authenticator to use in the event\n   * the user doesn't have Blockstack installed on their machine. If this\n   * is not specified, the current default in this library will be used.\n   *\n   */\n  authenticatorURL?: string;\n\n  /**\n   * @param {Array<string>} scopes - permissions this app is requesting\n   * @param {string} appDomain - the app domain\n   * @param {string} redirectPath - path on app domain to redirect users to after authentication\n   * @param {string} manifestPath - path relative to app domain of app's manifest file\n   * @param {string | undefined} coreNode - override the default or user selected core node\n   * @param {string} authenticatorURL - the web-based fall back authenticator\n   * ([[DEFAULT_BLOCKSTACK_HOST]])\n   */\n  constructor(\n    scopes: string[] = DEFAULT_SCOPE.slice(),\n    appDomain: string | undefined = getGlobalObject('location', { returnEmptyObject: true })\n      ?.origin,\n    redirectPath = '',\n    manifestPath = '/manifest.json',\n    coreNode: string | undefined = undefined,\n    authenticatorURL: string = DEFAULT_BLOCKSTACK_HOST\n  ) {\n    this.appDomain = appDomain;\n    this.scopes = scopes;\n    this.redirectPath = redirectPath;\n    this.manifestPath = manifestPath;\n    this.coreNode = coreNode;\n    this.authenticatorURL = authenticatorURL;\n  }\n\n  /**\n   * The location to which the authenticator should\n   * redirect the user.\n   * @returns {string} - URI\n   */\n  redirectURI(): string {\n    return `${this.appDomain}${this.redirectPath}`;\n  }\n\n  /**\n   * The location of the app's manifest file.\n   * @returns {string} - URI\n   */\n  manifestURI(): string {\n    return `${this.appDomain}${this.manifestPath}`;\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,uBAAuB,QAAmB,aAAa;AAC/E,SAASC,eAAe,QAAQ,gBAAgB;AAYhD,OAAM,MAAOC,SAAS;EAsDpBC,YACEC,MAAA,GAAmBL,aAAa,CAACM,KAAK,EAAE,EACxCC,SAAA,GAAgCL,eAAe,CAAC,UAAU,EAAE;IAAEM,iBAAiB,EAAE;EAAI,CAAE,CAAC,EACpFC,MAAM,EACVC,YAAY,GAAG,EAAE,EACjBC,YAAY,GAAG,gBAAgB,EAC/BC,QAAA,GAA+BC,SAAS,EACxCC,gBAAA,GAA2Bb,uBAAuB;IAElD,IAAI,CAACM,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACK,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,gBAAgB,GAAGA,gBAAgB;EAC1C;EAOAC,WAAWA,CAAA;IACT,OAAO,GAAG,IAAI,CAACR,SAAS,GAAG,IAAI,CAACG,YAAY,EAAE;EAChD;EAMAM,WAAWA,CAAA;IACT,OAAO,GAAG,IAAI,CAACT,SAAS,GAAG,IAAI,CAACI,YAAY,EAAE;EAChD"},"metadata":{},"sourceType":"module","externalDependencies":[]}