{"ast":null,"code":"const axios = require('axios').default;\nconst {\n  ipfsGateway\n} = require('../config');\nconst {\n  GET_FILE_FROM_HASH_OPTIONS\n} = require('../utils/constants');\nconst getFileFromHash = async ({\n  hash,\n  getFileFromHashOptions = []\n}) => {\n  if (!hash) {\n    throw 'No hash was given';\n  }\n\n  // validate getOptions\n  let invalidOption;\n  const validOptions = Object.keys(GET_FILE_FROM_HASH_OPTIONS).map(optionKey => GET_FILE_FROM_HASH_OPTIONS[optionKey]);\n  getFileFromHashOptions.forEach(option => {\n    if (!validOptions.includes(option)) {\n      invalidOption = option;\n    }\n  });\n  if (invalidOption) {\n    throw `Invalid option ${invalidOption}`;\n  }\n  const params = {\n    method: 'get',\n    url: `${ipfsGateway}/${hash}`\n  };\n  if (getFileFromHashOptions.includes(GET_FILE_FROM_HASH_OPTIONS.BUFFER)) {\n    params.responseType = 'arraybuffer';\n  }\n  try {\n    const response = await axios(params);\n    return response.data;\n  } catch (e) {\n    throw e;\n  }\n};\nmodule.exports = getFileFromHash;","map":{"version":3,"names":["axios","require","default","ipfsGateway","GET_FILE_FROM_HASH_OPTIONS","getFileFromHash","hash","getFileFromHashOptions","invalidOption","validOptions","Object","keys","map","optionKey","forEach","option","includes","params","method","url","BUFFER","responseType","response","data","e","module","exports"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/@fleekhq/fleek-storage-js/methods/getFileFromHash.js"],"sourcesContent":["const axios = require('axios').default;\nconst { ipfsGateway } = require('../config');\nconst { GET_FILE_FROM_HASH_OPTIONS } = require('../utils/constants');\n\nconst getFileFromHash = async ({\n  hash,\n  getFileFromHashOptions = [],\n}) => {\n  if(!hash) {\n    throw 'No hash was given';\n  }\n\n  // validate getOptions\n  let invalidOption;\n  const validOptions = Object.keys(GET_FILE_FROM_HASH_OPTIONS).map(optionKey => GET_FILE_FROM_HASH_OPTIONS[optionKey])\n  getFileFromHashOptions.forEach(option => {\n    if (!validOptions.includes(option)){\n      invalidOption = option;\n    }\n  })\n\n  if (invalidOption) {\n    throw `Invalid option ${invalidOption}`;\n  }\n\n  const params = {\n    method: 'get',\n    url: `${ipfsGateway}/${hash}`,\n  };\n\n  if(getFileFromHashOptions.includes(GET_FILE_FROM_HASH_OPTIONS.BUFFER)) {\n    params.responseType = 'arraybuffer'\n }\n\n  try {\n    const response = await axios(params);\n\n    return response.data;\n  } catch(e) {\n    throw e;\n  }\n};\n\nmodule.exports = getFileFromHash;\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAACC,OAAO;AACtC,MAAM;EAAEC;AAAY,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC;AAC5C,MAAM;EAAEG;AAA2B,CAAC,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAEpE,MAAMI,eAAe,GAAG,MAAAA,CAAO;EAC7BC,IAAI;EACJC,sBAAsB,GAAG;AAC3B,CAAC,KAAK;EACJ,IAAG,CAACD,IAAI,EAAE;IACR,MAAM,mBAAmB;EAC3B;;EAEA;EACA,IAAIE,aAAa;EACjB,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACP,0BAA0B,CAAC,CAACQ,GAAG,CAACC,SAAS,IAAIT,0BAA0B,CAACS,SAAS,CAAC,CAAC;EACpHN,sBAAsB,CAACO,OAAO,CAACC,MAAM,IAAI;IACvC,IAAI,CAACN,YAAY,CAACO,QAAQ,CAACD,MAAM,CAAC,EAAC;MACjCP,aAAa,GAAGO,MAAM;IACxB;EACF,CAAC,CAAC;EAEF,IAAIP,aAAa,EAAE;IACjB,MAAO,kBAAiBA,aAAc,EAAC;EACzC;EAEA,MAAMS,MAAM,GAAG;IACbC,MAAM,EAAE,KAAK;IACbC,GAAG,EAAG,GAAEhB,WAAY,IAAGG,IAAK;EAC9B,CAAC;EAED,IAAGC,sBAAsB,CAACS,QAAQ,CAACZ,0BAA0B,CAACgB,MAAM,CAAC,EAAE;IACrEH,MAAM,CAACI,YAAY,GAAG,aAAa;EACtC;EAEC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACiB,MAAM,CAAC;IAEpC,OAAOK,QAAQ,CAACC,IAAI;EACtB,CAAC,CAAC,OAAMC,CAAC,EAAE;IACT,MAAMA,CAAC;EACT;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGrB,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}