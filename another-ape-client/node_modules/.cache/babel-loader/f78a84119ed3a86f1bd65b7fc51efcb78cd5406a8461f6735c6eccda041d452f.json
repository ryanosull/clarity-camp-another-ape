{"ast":null,"code":"var AWS = require('../core');\nvar s3util = require('./s3util');\nvar regionUtil = require('../region_config');\nAWS.util.update(AWS.S3Control.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('extractError', this.extractHostId);\n    request.addListener('extractData', this.extractHostId);\n    request.addListener('validate', this.validateAccountId);\n    var isArnInBucket = s3util.isArnInParam(request, 'Bucket');\n    var isArnInName = s3util.isArnInParam(request, 'Name');\n    if (isArnInBucket) {\n      request._parsedArn = AWS.util.ARN.parse(request.params['Bucket']);\n      request.addListener('validate', this.validateOutpostsBucketArn);\n      request.addListener('validate', s3util.validateOutpostsArn);\n      request.addListener('afterBuild', this.addOutpostIdHeader);\n    } else if (isArnInName) {\n      request._parsedArn = AWS.util.ARN.parse(request.params['Name']);\n      request.addListener('validate', s3util.validateOutpostsAccessPointArn);\n      request.addListener('validate', s3util.validateOutpostsArn);\n      request.addListener('afterBuild', this.addOutpostIdHeader);\n    }\n    if (isArnInBucket || isArnInName) {\n      request.addListener('validate', this.validateArnRegion);\n      request.addListener('validate', this.validateArnAccountWithParams, true);\n      request.addListener('validate', s3util.validateArnAccount);\n      request.addListener('validate', s3util.validateArnService);\n      request.addListener('build', this.populateParamFromArn, true);\n      request.addListener('build', this.populateUriFromArn);\n      request.addListener('build', s3util.validatePopulateUriFromArn);\n    }\n    if (request.params.OutpostId && (request.operation === 'createBucket' || request.operation === 'listRegionalBuckets')) {\n      request.addListener('build', this.populateEndpointForOutpostId);\n    }\n  },\n  /**\n   * Adds outpostId header\n   */\n  addOutpostIdHeader: function addOutpostIdHeader(req) {\n    req.httpRequest.headers['x-amz-outpost-id'] = req._parsedArn.outpostId;\n  },\n  /**\n   * Validate Outposts ARN supplied in Bucket parameter is a valid bucket name\n   */\n  validateOutpostsBucketArn: function validateOutpostsBucketArn(req) {\n    var parsedArn = req._parsedArn;\n\n    //can be ':' or '/'\n    var delimiter = parsedArn.resource['outpost'.length];\n    if (parsedArn.resource.split(delimiter).length !== 4) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Bucket ARN should have two resources outpost/{outpostId}/bucket/{accesspointName}'\n      });\n    }\n    var bucket = parsedArn.resource.split(delimiter)[3];\n    if (!s3util.dnsCompatibleBucketName(bucket) || bucket.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Bucket ARN is not DNS compatible. Got ' + bucket\n      });\n    }\n\n    //set parsed valid bucket\n    req._parsedArn.bucket = bucket;\n  },\n  /**\n   * @api private\n   */\n  populateParamFromArn: function populateParamFromArn(req) {\n    var parsedArn = req._parsedArn;\n    if (s3util.isArnInParam(req, 'Bucket')) {\n      req.params.Bucket = parsedArn.bucket;\n    } else if (s3util.isArnInParam(req, 'Name')) {\n      req.params.Name = parsedArn.accessPoint;\n    }\n  },\n  /**\n   * Populate URI according to the ARN\n   */\n  populateUriFromArn: function populateUriFromArn(req) {\n    var parsedArn = req._parsedArn;\n    var endpoint = req.httpRequest.endpoint;\n    var useArnRegion = req.service.config.s3UseArnRegion;\n    var useFipsEndpoint = req.service.config.useFipsEndpoint;\n    endpoint.hostname = ['s3-outposts' + (useFipsEndpoint ? '-fips' : ''), useArnRegion ? parsedArn.region : req.service.config.region, 'amazonaws.com'].join('.');\n    endpoint.host = endpoint.hostname;\n  },\n  /**\n   * @api private\n   */\n  populateEndpointForOutpostId: function populateEndpointForOutpostId(req) {\n    var endpoint = req.httpRequest.endpoint;\n    var useFipsEndpoint = req.service.config.useFipsEndpoint;\n    endpoint.hostname = ['s3-outposts' + (useFipsEndpoint ? '-fips' : ''), req.service.config.region, 'amazonaws.com'].join('.');\n    endpoint.host = endpoint.hostname;\n  },\n  /**\n   * @api private\n   */\n  extractHostId: function (response) {\n    var hostId = response.httpResponse.headers ? response.httpResponse.headers['x-amz-id-2'] : null;\n    response.extendedRequestId = hostId;\n    if (response.error) {\n      response.error.extendedRequestId = hostId;\n    }\n  },\n  /**\n   * @api private\n   */\n  validateArnRegion: function validateArnRegion(req) {\n    s3util.validateArnRegion(req, {\n      allowFipsEndpoint: true\n    });\n  },\n  /**\n   * @api private\n   */\n  validateArnAccountWithParams: function validateArnAccountWithParams(req) {\n    var params = req.params;\n    var inputModel = req.service.api.operations[req.operation].input;\n    if (inputModel.members.AccountId) {\n      var parsedArn = req._parsedArn;\n      if (parsedArn.accountId) {\n        if (params.AccountId) {\n          if (params.AccountId !== parsedArn.accountId) {\n            throw AWS.util.error(new Error(), {\n              code: 'ValidationError',\n              message: 'AccountId in ARN and request params should be same.'\n            });\n          }\n        } else {\n          // Store accountId from ARN in params\n          params.AccountId = parsedArn.accountId;\n        }\n      }\n    }\n  },\n  /**\n   * @api private\n   */\n  validateAccountId: function (request) {\n    var params = request.params;\n    if (!Object.prototype.hasOwnProperty.call(params, 'AccountId')) return;\n    var accountId = params.AccountId;\n    //validate type\n    if (typeof accountId !== 'string') {\n      throw AWS.util.error(new Error(), {\n        code: 'ValidationError',\n        message: 'AccountId must be a string.'\n      });\n    }\n    //validate length\n    if (accountId.length < 1 || accountId.length > 63) {\n      throw AWS.util.error(new Error(), {\n        code: 'ValidationError',\n        message: 'AccountId length should be between 1 to 63 characters, inclusive.'\n      });\n    }\n    //validate pattern\n    var hostPattern = /^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9]$/;\n    if (!hostPattern.test(accountId)) {\n      throw AWS.util.error(new Error(), {\n        code: 'ValidationError',\n        message: 'AccountId should be hostname compatible. AccountId: ' + accountId\n      });\n    }\n  },\n  /**\n   * @api private\n   */\n  getSigningName: function getSigningName(req) {\n    var _super = AWS.Service.prototype.getSigningName;\n    if (req && req._parsedArn && req._parsedArn.service) {\n      return req._parsedArn.service;\n    } else if (req.params.OutpostId && (req.operation === 'createBucket' || req.operation === 'listRegionalBuckets')) {\n      return 's3-outposts';\n    } else {\n      return _super.call(this, req);\n    }\n  }\n});","map":{"version":3,"names":["AWS","require","s3util","regionUtil","util","update","S3Control","prototype","setupRequestListeners","request","addListener","extractHostId","validateAccountId","isArnInBucket","isArnInParam","isArnInName","_parsedArn","ARN","parse","params","validateOutpostsBucketArn","validateOutpostsArn","addOutpostIdHeader","validateOutpostsAccessPointArn","validateArnRegion","validateArnAccountWithParams","validateArnAccount","validateArnService","populateParamFromArn","populateUriFromArn","validatePopulateUriFromArn","OutpostId","operation","populateEndpointForOutpostId","req","httpRequest","headers","outpostId","parsedArn","delimiter","resource","length","split","error","Error","code","message","bucket","dnsCompatibleBucketName","match","Bucket","Name","accessPoint","endpoint","useArnRegion","service","config","s3UseArnRegion","useFipsEndpoint","hostname","region","join","host","response","hostId","httpResponse","extendedRequestId","allowFipsEndpoint","inputModel","api","operations","input","members","AccountId","accountId","Object","hasOwnProperty","call","hostPattern","test","getSigningName","_super","Service"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/services/s3control.js"],"sourcesContent":["var AWS = require('../core');\nvar s3util = require('./s3util');\nvar regionUtil = require('../region_config');\n\nAWS.util.update(AWS.S3Control.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('extractError', this.extractHostId);\n    request.addListener('extractData', this.extractHostId);\n    request.addListener('validate', this.validateAccountId);\n\n    var isArnInBucket = s3util.isArnInParam(request, 'Bucket');\n    var isArnInName = s3util.isArnInParam(request, 'Name');\n\n    if (isArnInBucket) {\n      request._parsedArn = AWS.util.ARN.parse(request.params['Bucket']);\n      request.addListener('validate', this.validateOutpostsBucketArn);\n      request.addListener('validate', s3util.validateOutpostsArn);\n      request.addListener('afterBuild', this.addOutpostIdHeader);\n    } else if (isArnInName) {\n      request._parsedArn = AWS.util.ARN.parse(request.params['Name']);\n      request.addListener('validate', s3util.validateOutpostsAccessPointArn);\n      request.addListener('validate', s3util.validateOutpostsArn);\n      request.addListener('afterBuild', this.addOutpostIdHeader);\n    }\n\n    if (isArnInBucket || isArnInName) {\n      request.addListener('validate', this.validateArnRegion);\n      request.addListener('validate', this.validateArnAccountWithParams, true);\n      request.addListener('validate', s3util.validateArnAccount);\n      request.addListener('validate', s3util.validateArnService);\n      request.addListener('build', this.populateParamFromArn, true);\n      request.addListener('build', this.populateUriFromArn);\n      request.addListener('build', s3util.validatePopulateUriFromArn);\n    }\n\n    if (request.params.OutpostId &&\n        (request.operation === 'createBucket' ||\n          request.operation === 'listRegionalBuckets')) {\n      request.addListener('build', this.populateEndpointForOutpostId);\n    }\n  },\n\n  /**\n   * Adds outpostId header\n   */\n  addOutpostIdHeader: function addOutpostIdHeader(req) {\n    req.httpRequest.headers['x-amz-outpost-id'] = req._parsedArn.outpostId;\n  },\n\n  /**\n   * Validate Outposts ARN supplied in Bucket parameter is a valid bucket name\n   */\n  validateOutpostsBucketArn: function validateOutpostsBucketArn(req) {\n    var parsedArn = req._parsedArn;\n\n    //can be ':' or '/'\n    var delimiter = parsedArn.resource['outpost'.length];\n\n    if (parsedArn.resource.split(delimiter).length !== 4) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Bucket ARN should have two resources outpost/{outpostId}/bucket/{accesspointName}'\n      });\n    }\n\n    var bucket = parsedArn.resource.split(delimiter)[3];\n    if (!s3util.dnsCompatibleBucketName(bucket) || bucket.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Bucket ARN is not DNS compatible. Got ' + bucket\n      });\n    }\n\n    //set parsed valid bucket\n    req._parsedArn.bucket = bucket;\n  },\n\n  /**\n   * @api private\n   */\n  populateParamFromArn: function populateParamFromArn(req) {\n    var parsedArn = req._parsedArn;\n    if (s3util.isArnInParam(req, 'Bucket')) {\n      req.params.Bucket = parsedArn.bucket;\n    } else if (s3util.isArnInParam(req, 'Name')) {\n      req.params.Name = parsedArn.accessPoint;\n    }\n  },\n\n  /**\n   * Populate URI according to the ARN\n   */\n  populateUriFromArn: function populateUriFromArn(req) {\n    var parsedArn = req._parsedArn;\n\n    var endpoint = req.httpRequest.endpoint;\n    var useArnRegion = req.service.config.s3UseArnRegion;\n    var useFipsEndpoint = req.service.config.useFipsEndpoint;\n\n    endpoint.hostname = [\n      's3-outposts' + (useFipsEndpoint ? '-fips': ''),\n      useArnRegion ? parsedArn.region : req.service.config.region,\n      'amazonaws.com'\n    ].join('.');\n    endpoint.host = endpoint.hostname;\n  },\n\n  /**\n   * @api private\n   */\n  populateEndpointForOutpostId: function populateEndpointForOutpostId(req) {\n    var endpoint = req.httpRequest.endpoint;\n    var useFipsEndpoint = req.service.config.useFipsEndpoint;\n    endpoint.hostname = [\n      's3-outposts' + (useFipsEndpoint ? '-fips': ''),\n      req.service.config.region,\n      'amazonaws.com'\n    ].join('.');\n    endpoint.host = endpoint.hostname;\n  },\n\n  /**\n   * @api private\n   */\n  extractHostId: function(response) {\n    var hostId = response.httpResponse.headers ? response.httpResponse.headers['x-amz-id-2'] : null;\n    response.extendedRequestId = hostId;\n    if (response.error) {\n      response.error.extendedRequestId = hostId;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateArnRegion: function validateArnRegion(req) {\n    s3util.validateArnRegion(req, { allowFipsEndpoint: true });\n  },\n\n  /**\n   * @api private\n   */\n  validateArnAccountWithParams: function validateArnAccountWithParams(req) {\n    var params = req.params;\n    var inputModel = req.service.api.operations[req.operation].input;\n    if (inputModel.members.AccountId) {\n      var parsedArn = req._parsedArn;\n      if (parsedArn.accountId) {\n        if (params.AccountId) {\n          if (params.AccountId !== parsedArn.accountId) {\n            throw AWS.util.error(\n              new Error(),\n              {code: 'ValidationError', message: 'AccountId in ARN and request params should be same.'}\n            );\n          }\n        } else {\n          // Store accountId from ARN in params\n          params.AccountId = parsedArn.accountId;\n        }\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateAccountId: function(request) {\n    var params = request.params;\n    if (!Object.prototype.hasOwnProperty.call(params, 'AccountId')) return;\n    var accountId = params.AccountId;\n    //validate type\n    if (typeof accountId !== 'string') {\n      throw AWS.util.error(\n        new Error(),\n        {code: 'ValidationError', message: 'AccountId must be a string.'}\n      );\n    }\n    //validate length\n    if (accountId.length < 1 || accountId.length > 63) {\n      throw AWS.util.error(\n        new Error(),\n        {code: 'ValidationError', message: 'AccountId length should be between 1 to 63 characters, inclusive.'}\n      );\n    }\n    //validate pattern\n    var hostPattern = /^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9]$/;\n    if (!hostPattern.test(accountId)) {\n      throw AWS.util.error(new Error(),\n        {code: 'ValidationError', message: 'AccountId should be hostname compatible. AccountId: ' + accountId});\n    }\n  },\n\n  /**\n   * @api private\n   */\n  getSigningName: function getSigningName(req) {\n    var _super = AWS.Service.prototype.getSigningName;\n    if (req && req._parsedArn && req._parsedArn.service) {\n      return req._parsedArn.service;\n    } else if (req.params.OutpostId &&\n      (req.operation === 'createBucket' ||\n        req.operation === 'listRegionalBuckets')) {\n      return 's3-outposts';\n    } else {\n      return _super.call(this, req);\n    }\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}