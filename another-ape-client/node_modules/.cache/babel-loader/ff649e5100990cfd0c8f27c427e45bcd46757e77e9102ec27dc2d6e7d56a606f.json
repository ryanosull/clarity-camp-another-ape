{"ast":null,"code":"var AWS = require('../core');\nvar proc = require('child_process');\nvar iniLoader = AWS.util.iniLoader;\n\n/**\n * Represents credentials loaded from shared credentials file\n * (defaulting to ~/.aws/credentials or defined by the\n * `AWS_SHARED_CREDENTIALS_FILE` environment variable).\n *\n * ## Using process credentials\n *\n * The credentials file can specify a credential provider that executes\n * a given process and attempts to read its stdout to recieve a JSON payload\n * containing the credentials:\n *\n *     [default]\n *     credential_process = /usr/bin/credential_proc\n *\n * Automatically handles refreshing credentials if an Expiration time is\n * provided in the credentials payload. Credentials supplied in the same profile\n * will take precedence over the credential_process.\n *\n * Sourcing credentials from an external process can potentially be dangerous,\n * so proceed with caution. Other credential providers should be preferred if\n * at all possible. If using this option, you should make sure that the shared\n * credentials file is as locked down as possible using security best practices\n * for your operating system.\n *\n * ## Using custom profiles\n *\n * The SDK supports loading credentials for separate profiles. This can be done\n * in two ways:\n *\n * 1. Set the `AWS_PROFILE` environment variable in your process prior to\n *    loading the SDK.\n * 2. Directly load the AWS.ProcessCredentials provider:\n *\n * ```javascript\n * var creds = new AWS.ProcessCredentials({profile: 'myprofile'});\n * AWS.config.credentials = creds;\n * ```\n *\n * @!macro nobrowser\n */\nAWS.ProcessCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new ProcessCredentials object.\n   *\n   * @param options [map] a set of options\n   * @option options profile [String] (AWS_PROFILE env var or 'default')\n   *   the name of the profile to load.\n   * @option options filename [String] ('~/.aws/credentials' or defined by\n   *   AWS_SHARED_CREDENTIALS_FILE process env var)\n   *   the filename to use when loading credentials.\n   * @option options callback [Function] (err) Credentials are eagerly loaded\n   *   by the constructor. When the callback is called with no error, the\n   *   credentials have been loaded successfully.\n   */\n  constructor: function ProcessCredentials(options) {\n    AWS.Credentials.call(this);\n    options = options || {};\n    this.filename = options.filename;\n    this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n    this.get(options.callback || AWS.util.fn.noop);\n  },\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    try {\n      var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader, this.filename);\n      var profile = profiles[this.profile] || {};\n      if (Object.keys(profile).length === 0) {\n        throw AWS.util.error(new Error('Profile ' + this.profile + ' not found'), {\n          code: 'ProcessCredentialsProviderFailure'\n        });\n      }\n      if (profile['credential_process']) {\n        this.loadViaCredentialProcess(profile, function (err, data) {\n          if (err) {\n            callback(err, null);\n          } else {\n            self.expired = false;\n            self.accessKeyId = data.AccessKeyId;\n            self.secretAccessKey = data.SecretAccessKey;\n            self.sessionToken = data.SessionToken;\n            if (data.Expiration) {\n              self.expireTime = new Date(data.Expiration);\n            }\n            callback(null);\n          }\n        });\n      } else {\n        throw AWS.util.error(new Error('Profile ' + this.profile + ' did not include credential process'), {\n          code: 'ProcessCredentialsProviderFailure'\n        });\n      }\n    } catch (err) {\n      callback(err);\n    }\n  },\n  /**\n  * Executes the credential_process and retrieves\n  * credentials from the output\n  * @api private\n  * @param profile [map] credentials profile\n  * @throws ProcessCredentialsProviderFailure\n  */\n  loadViaCredentialProcess: function loadViaCredentialProcess(profile, callback) {\n    proc.exec(profile['credential_process'], {\n      env: process.env\n    }, function (err, stdOut, stdErr) {\n      if (err) {\n        callback(AWS.util.error(new Error('credential_process returned error'), {\n          code: 'ProcessCredentialsProviderFailure'\n        }), null);\n      } else {\n        try {\n          var credData = JSON.parse(stdOut);\n          if (credData.Expiration) {\n            var currentTime = AWS.util.date.getDate();\n            var expireTime = new Date(credData.Expiration);\n            if (expireTime < currentTime) {\n              throw Error('credential_process returned expired credentials');\n            }\n          }\n          if (credData.Version !== 1) {\n            throw Error('credential_process does not return Version == 1');\n          }\n          callback(null, credData);\n        } catch (err) {\n          callback(AWS.util.error(new Error(err.message), {\n            code: 'ProcessCredentialsProviderFailure'\n          }), null);\n        }\n      }\n    });\n  },\n  /**\n   * Loads the credentials from the credential process\n   *\n   * @callback callback function(err)\n   *   Called after the credential process has been executed. When this\n   *   callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    iniLoader.clearCachedFiles();\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  }\n});","map":{"version":3,"names":["AWS","require","proc","iniLoader","util","ProcessCredentials","inherit","Credentials","constructor","options","call","filename","profile","process","env","AWS_PROFILE","defaultProfile","get","callback","fn","noop","load","self","profiles","getProfilesFromSharedConfig","Object","keys","length","error","Error","code","loadViaCredentialProcess","err","data","expired","accessKeyId","AccessKeyId","secretAccessKey","SecretAccessKey","sessionToken","SessionToken","Expiration","expireTime","Date","exec","stdOut","stdErr","credData","JSON","parse","currentTime","date","getDate","Version","message","refresh","clearCachedFiles","coalesceRefresh"],"sources":["/home/ryanosull/clarity/clarity-camp/projects/nft-vids/another-ape-client/node_modules/aws-sdk/lib/credentials/process_credentials.js"],"sourcesContent":["var AWS = require('../core');\nvar proc = require('child_process');\nvar iniLoader = AWS.util.iniLoader;\n\n/**\n * Represents credentials loaded from shared credentials file\n * (defaulting to ~/.aws/credentials or defined by the\n * `AWS_SHARED_CREDENTIALS_FILE` environment variable).\n *\n * ## Using process credentials\n *\n * The credentials file can specify a credential provider that executes\n * a given process and attempts to read its stdout to recieve a JSON payload\n * containing the credentials:\n *\n *     [default]\n *     credential_process = /usr/bin/credential_proc\n *\n * Automatically handles refreshing credentials if an Expiration time is\n * provided in the credentials payload. Credentials supplied in the same profile\n * will take precedence over the credential_process.\n *\n * Sourcing credentials from an external process can potentially be dangerous,\n * so proceed with caution. Other credential providers should be preferred if\n * at all possible. If using this option, you should make sure that the shared\n * credentials file is as locked down as possible using security best practices\n * for your operating system.\n *\n * ## Using custom profiles\n *\n * The SDK supports loading credentials for separate profiles. This can be done\n * in two ways:\n *\n * 1. Set the `AWS_PROFILE` environment variable in your process prior to\n *    loading the SDK.\n * 2. Directly load the AWS.ProcessCredentials provider:\n *\n * ```javascript\n * var creds = new AWS.ProcessCredentials({profile: 'myprofile'});\n * AWS.config.credentials = creds;\n * ```\n *\n * @!macro nobrowser\n */\nAWS.ProcessCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new ProcessCredentials object.\n   *\n   * @param options [map] a set of options\n   * @option options profile [String] (AWS_PROFILE env var or 'default')\n   *   the name of the profile to load.\n   * @option options filename [String] ('~/.aws/credentials' or defined by\n   *   AWS_SHARED_CREDENTIALS_FILE process env var)\n   *   the filename to use when loading credentials.\n   * @option options callback [Function] (err) Credentials are eagerly loaded\n   *   by the constructor. When the callback is called with no error, the\n   *   credentials have been loaded successfully.\n   */\n  constructor: function ProcessCredentials(options) {\n    AWS.Credentials.call(this);\n\n    options = options || {};\n\n    this.filename = options.filename;\n    this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n    this.get(options.callback || AWS.util.fn.noop);\n  },\n\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    try {\n      var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader, this.filename);\n      var profile = profiles[this.profile] || {};\n\n      if (Object.keys(profile).length === 0) {\n        throw AWS.util.error(\n          new Error('Profile ' + this.profile + ' not found'),\n          { code: 'ProcessCredentialsProviderFailure' }\n        );\n      }\n\n      if (profile['credential_process']) {\n        this.loadViaCredentialProcess(profile, function(err, data) {\n          if (err) {\n            callback(err, null);\n          } else {\n            self.expired = false;\n            self.accessKeyId = data.AccessKeyId;\n            self.secretAccessKey = data.SecretAccessKey;\n            self.sessionToken = data.SessionToken;\n            if (data.Expiration) {\n              self.expireTime = new Date(data.Expiration);\n            }\n            callback(null);\n          }\n        });\n      } else {\n        throw AWS.util.error(\n          new Error('Profile ' + this.profile + ' did not include credential process'),\n          { code: 'ProcessCredentialsProviderFailure' }\n        );\n      }\n    } catch (err) {\n      callback(err);\n    }\n  },\n\n  /**\n  * Executes the credential_process and retrieves\n  * credentials from the output\n  * @api private\n  * @param profile [map] credentials profile\n  * @throws ProcessCredentialsProviderFailure\n  */\n  loadViaCredentialProcess: function loadViaCredentialProcess(profile, callback) {\n    proc.exec(profile['credential_process'], { env: process.env }, function(err, stdOut, stdErr) {\n      if (err) {\n        callback(AWS.util.error(\n          new Error('credential_process returned error'),\n          { code: 'ProcessCredentialsProviderFailure'}\n        ), null);\n      } else {\n        try {\n          var credData = JSON.parse(stdOut);\n          if (credData.Expiration) {\n            var currentTime = AWS.util.date.getDate();\n            var expireTime = new Date(credData.Expiration);\n            if (expireTime < currentTime) {\n              throw Error('credential_process returned expired credentials');\n            }\n          }\n\n          if (credData.Version !== 1) {\n            throw Error('credential_process does not return Version == 1');\n          }\n          callback(null, credData);\n        } catch (err) {\n          callback(AWS.util.error(\n            new Error(err.message),\n            { code: 'ProcessCredentialsProviderFailure'}\n          ), null);\n        }\n      }\n    });\n  },\n\n  /**\n   * Loads the credentials from the credential process\n   *\n   * @callback callback function(err)\n   *   Called after the credential process has been executed. When this\n   *   callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    iniLoader.clearCachedFiles();\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}