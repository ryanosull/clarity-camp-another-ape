{"version":3,"sources":["../src/react/components/connect/index.tsx","../src/react/components/connect/context.tsx","../src/react/hooks/use-connect.ts","../src/index.ts"],"names":["React","useReducer","createContext","initialState","connectReducer","state","type","payload","__spreadProps","__spreadValues","ConnectContext","ConnectDispatchContext","ConnectProvider","authOptions","children","dispatch","Connect","authenticate","openContractCall","openContractDeploy","openProfileUpdateRequestPopup","openPsbtRequestPopup","openSignatureRequestPopup","openStructuredDataSignatureRequestPopup","openSTXTransfer","showBlockstackConnect","useContext","useConnectDispatch","useConnect","isOpen","isAuthenticating","authData","userSession","doUpdateAuthOptions","doOpenAuth","signIn","options","provider","_options","_a","doAuth","doContractCall","doContractDeploy","doSTXTransfer","doProfileUpdate","sign","signStructuredData","signPsbt"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ConnectProvider } from './context';\nimport { AuthOptions } from '@stacks/connect';\n\n/**\n * Usage\n *\n *\n * const auth = {\n      manifestPath: '/static/manifest.json',\n      redirectTo: '/',\n      finished: ({userSession}) => {\n        doFinishSignIn();\n      },\n      authOrigin,\n      appDetails: {\n        name: 'Wink',\n        icon: 'url'\n      }\n    }\n *\n * <Connect authOptions={authOptions} />\n */\nconst Connect = ({ authOptions, children }: { authOptions: AuthOptions; children: any }) => {\n  return <ConnectProvider authOptions={authOptions}>{children}</ConnectProvider>;\n};\n\nexport { Connect };\n","import React, { useReducer, createContext } from 'react';\nimport { AuthOptions, FinishedAuthData, UserSession } from '@stacks/connect';\n\nenum States {\n  UPDATE_AUTH_OPTIONS = 'data/update-auth-options',\n}\n\ntype Action = { type: string; payload?: any };\n\ntype Dispatch = (action: Action) => void;\n\ntype State = {\n  isOpen: boolean;\n  isAuthenticating: boolean;\n  authData?: FinishedAuthData;\n  authOptions: AuthOptions;\n  userSession?: UserSession;\n};\n\nconst initialState: State = {\n  isOpen: false,\n  isAuthenticating: false,\n  authData: undefined,\n  userSession: undefined,\n  authOptions: {\n    redirectTo: '',\n    manifestPath: '',\n    onFinish: () => null,\n    authOrigin: undefined,\n    sendToSignIn: false,\n    appDetails: {\n      name: '',\n      icon: '',\n    },\n  },\n};\n\nconst connectReducer = (state: State, { type, payload }: { type: string; payload?: any }) => {\n  switch (type) {\n    case States.UPDATE_AUTH_OPTIONS: {\n      return {\n        ...state,\n        authOptions: {\n          ...state.authOptions,\n          ...payload,\n        },\n      };\n    }\n\n    default: {\n      throw new Error(`Unhandled action type: ${type}`);\n    }\n  }\n};\n\nconst ConnectContext = createContext<State>(initialState);\n\nconst ConnectDispatchContext = createContext<Dispatch | undefined>(undefined);\n\nconst ConnectProvider = ({\n  authOptions,\n  children,\n}: {\n  authOptions: AuthOptions;\n  children: any;\n}) => {\n  const [state, dispatch] = useReducer(connectReducer, initialState);\n\n  return (\n    <ConnectContext.Provider value={{ ...state, authOptions }}>\n      <ConnectDispatchContext.Provider value={dispatch}>{children}</ConnectDispatchContext.Provider>\n    </ConnectContext.Provider>\n  );\n};\n\nexport {\n  initialState,\n  connectReducer,\n  ConnectContext,\n  ConnectDispatchContext,\n  ConnectProvider,\n  States,\n};\n","import {\n  authenticate,\n  AuthOptions,\n  ContractCallOptions,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  ContractDeployOptions,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  FinishedAuthData,\n  openContractCall,\n  openContractDeploy,\n  openProfileUpdateRequestPopup,\n  openPsbtRequestPopup,\n  openSignatureRequestPopup,\n  openStructuredDataSignatureRequestPopup,\n  openSTXTransfer,\n  PsbtRequestOptions,\n  ProfileUpdateRequestOptions,\n  showBlockstackConnect,\n  SignatureRequestOptions,\n  STXTransferOptions,\n  STXTransferRegularOptions,\n  STXTransferSponsoredOptions,\n  StacksProvider,\n} from '@stacks/connect';\nimport { StructuredDataSignatureRequestOptions } from '@stacks/connect/src/types/structuredDataSignature';\nimport { useContext } from 'react';\nimport { ConnectContext, ConnectDispatchContext, States } from '../components/connect/context';\n\nconst useConnectDispatch = () => {\n  const dispatch = useContext(ConnectDispatchContext);\n  if (!dispatch) {\n    throw new Error('This must be used within the ConnectProvider component.');\n  }\n  return dispatch;\n};\n\nexport const useConnect = () => {\n  // todo: add custom provider injection in connect context\n  const { isOpen, isAuthenticating, authData, authOptions, userSession } =\n    useContext(ConnectContext);\n\n  const dispatch = useConnectDispatch();\n\n  const doUpdateAuthOptions = (payload: Partial<AuthOptions>) => {\n    return dispatch({ type: States.UPDATE_AUTH_OPTIONS, payload });\n  };\n\n  /**\n   *\n   * @param signIn Whether the user should be sent to sign in\n   * @param options\n   */\n  const doOpenAuth = (\n    signIn?: boolean,\n    options?: Partial<AuthOptions>,\n    provider?: StacksProvider\n  ) => {\n    if (signIn) {\n      const _options: AuthOptions = {\n        ...authOptions,\n        ...options,\n        onFinish: (payload: FinishedAuthData) => {\n          authOptions.onFinish?.(payload);\n        },\n        sendToSignIn: true,\n      };\n      void authenticate(_options, provider);\n      return;\n    } else {\n      showBlockstackConnect({\n        ...authOptions,\n        sendToSignIn: false,\n      });\n    }\n    authOptions && doUpdateAuthOptions(authOptions);\n  };\n\n  const doAuth = (options: Partial<AuthOptions> = {}, provider?: StacksProvider) => {\n    void authenticate(\n      {\n        ...authOptions,\n        ...options,\n        onFinish: (payload: FinishedAuthData) => {\n          authOptions.onFinish?.(payload);\n        },\n      },\n      provider\n    );\n  };\n\n  function doContractCall(\n    options: ContractCallOptions | ContractCallRegularOptions | ContractCallSponsoredOptions,\n    provider?: StacksProvider\n  ) {\n    return openContractCall(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function doContractDeploy(\n    options: ContractDeployOptions | ContractDeployRegularOptions | ContractDeploySponsoredOptions,\n    provider?: StacksProvider\n  ) {\n    return openContractDeploy(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function doSTXTransfer(\n    options: STXTransferOptions | STXTransferRegularOptions | STXTransferSponsoredOptions,\n    provider?: StacksProvider\n  ) {\n    return openSTXTransfer(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function doProfileUpdate(options: ProfileUpdateRequestOptions, provider?: StacksProvider) {\n    return openProfileUpdateRequestPopup(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function sign(options: SignatureRequestOptions, provider?: StacksProvider) {\n    return openSignatureRequestPopup(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function signStructuredData(\n    options: StructuredDataSignatureRequestOptions,\n    provider?: StacksProvider\n  ) {\n    return openStructuredDataSignatureRequestPopup(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  function signPsbt(options: PsbtRequestOptions, provider?: StacksProvider) {\n    return openPsbtRequestPopup(\n      {\n        ...options,\n        authOrigin: authOptions.authOrigin,\n        appDetails: authOptions.appDetails,\n      },\n      provider\n    );\n  }\n\n  return {\n    isOpen,\n    isAuthenticating,\n    authData,\n    authOptions,\n    userSession,\n    doOpenAuth,\n    doAuth,\n    authenticate,\n    doContractCall,\n    doContractDeploy,\n    doSTXTransfer,\n    doProfileUpdate,\n    sign,\n    signStructuredData,\n    signPsbt,\n  };\n};\n","export * from './react';\nexport * from '@stacks/connect';\n"]}